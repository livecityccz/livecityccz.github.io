<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>诗和田野</title>
  
  <subtitle>生活不苟且</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chucz.club/"/>
  <updated>2018-09-28T03:15:31.511Z</updated>
  <id>http://chucz.club/</id>
  
  <author>
    <name>chucz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://chucz.club/2018/09/28/hello-world/"/>
    <id>http://chucz.club/2018/09/28/hello-world/</id>
    <published>2018-09-28T03:15:31.511Z</published>
    <updated>2018-09-28T03:15:31.511Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记Django开发中的一些常用代码段</title>
    <link href="http://chucz.club/2018/08/27/%E8%AE%B0Django%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <id>http://chucz.club/2018/08/27/记Django开发中的一些常用代码段/</id>
    <published>2018-08-27T22:46:20.000Z</published>
    <updated>2018-09-28T08:51:24.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2018年的第一场雪，比2002年来得更晚一些<br>　　记得之前有分享过Django开发相关的系列文章（可在博客右上方自行搜索），内容包括模版、视图、路由等。那么本篇再补充一些Django开发过程中常用到的一些功能代码块，内容涉及前端、后端相关功能代码。这些代码块都是平常开发中常用的，因此在此做个备份，方便查询。<br><a id="more"></a></p></blockquote><h3 id="前端功能"><a href="#前端功能" class="headerlink" title="前端功能"></a><a href="#前端功能" title="前端功能"></a>前端功能</h3><p>搞安全的还需要会前端？当然啊，搞安全的也需要出产品，出产品了没前端不就显得很low吗？不过自己写前端太累了，因此还得用框架，这里推荐<a href="http://v3.bootcss.com/" target="_blank" rel="noopener">Bootstrap</a>。在尝试使用文章下方介绍的前端代码前，先在代码中添加上Bootstrap框架提供给的css、js连接。</p><h4 id="面板折叠"><a href="#面板折叠" class="headerlink" title="面板折叠"></a><a href="#面板折叠" title="面板折叠"></a>面板折叠</h4><p><img src="/upload_image/20180126/6.png" alt=""><br><img src="/upload_image/20180126/1.png" alt=""><br>这个功能经常在侧边菜单栏中用到，面板折叠可有效的保持界面整洁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">“panel panel-success”</span>&gt;</div><div class="line">&lt;div class=<span class="string">“panel-heading”</span> data-toggle=<span class="string">“collapse”</span> data-parent=<span class="string">“#accordion”</span> href=<span class="string">“#collapse”</span>&gt;</div><div class="line">  &lt;h1 class=<span class="string">“panel-title”</span>&gt;&lt;span class=<span class="string">“glyphicon glyphicon-tag”</span> aria-hidden=<span class="string">“true”</span>&gt;&lt;/span&gt;Index&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=<span class="string">“collapse”</span> class=<span class="string">“panel-collapse collapse out”</span>&gt; <span class="comment"># out or in 控制折叠状态</span></div><div class="line">  &lt;div class=<span class="string">“panel-body”</span>&gt;</div><div class="line">    &lt;a href=<span class="string">“”</span>&gt;index1&lt;/a&gt;&lt;br&gt;&lt;br&gt;</div><div class="line">    &lt;a href=<span class="string">“”</span>&gt;index2&lt;/a&gt;&lt;br&gt;&lt;br&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="表格分页"><a href="#表格分页" class="headerlink" title="表格分页"></a><a href="#表格分页" title="表格分页"></a>表格分页</h4><p><img src="/upload_image/20180126/7.png" alt=""><br>表格分页前端比较简单，想要实现真正的分页显示数据，需要结合后端代码，文章后面会介绍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!– 分页 –&gt;</div><div class="line">&lt;form action=<span class="string">“&#123;% url ‘asset_list’ %&#125;”</span> method=<span class="string">“POST”</span>&gt;</div><div class="line">&#123;% csrf_token %&#125;</div><div class="line">&lt;ul class=<span class="string">“pagination pagination”</span>&gt;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">“&#123;% url ‘asset_list’ %&#125;?page=0&amp;search_key=&#123;&#123;search_key&#125;&#125;”</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">“&#123;% url ‘asset_list’ %&#125;?page=&#123;&#123;pre_page&#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;”</span>&gt;上一页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &#123;% <span class="keyword">for</span> i <span class="keyword">in</span> page_list %&#125;</div><div class="line">        &lt;li&gt;&lt;a href=<span class="string">“&#123;% url ‘asset_list’ %&#125;?page=&#123;&#123; i &#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;”</span> class=<span class="string">“active”</span>&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">“&#123;% url ‘asset_list’ %&#125;?page=&#123;&#123; next_page &#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;”</span>&gt;下一页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=<span class="string">“&#123;% url ‘asset_list’ %&#125;?page=&#123;&#123; last_page &#125;&#125;&amp;search_key=&#123;&#123;search_key&#125;&#125;”</span>&gt;尾页&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &amp;nbsp;</div><div class="line">     &lt;li&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">“text”</span> placeholder=<span class="string">“输入页码”</span> ng-model=<span class="string">“gotoPage”</span> class=<span class="string">“”</span> style=<span class="string">“width: 80px”</span> name=<span class="string">“page”</span>&gt;</div><div class="line">        &amp;nbsp;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">“submit”</span> class=<span class="string">“btn btn-default”</span> name=<span class="string">“”</span> value=<span class="string">“跳转到”</span> style=<span class="string">“width:70px;height: 34px”</span>&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line"> &lt;/ul&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure><h4 id="控制表格单元格内容自动换行"><a href="#控制表格单元格内容自动换行" class="headerlink" title="控制表格单元格内容自动换行"></a><a href="#控制表格单元格内容自动换行" title="控制表格单元格内容自动换行"></a>控制表格单元格内容自动换行</h4><p>有些时候表格中单元格内容太长，会导致表格整体很不好看，因此对于内容会很长的表格列需要添加如下style</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;td style=<span class="string">“word-wrap:break-word;word-break:break-all;”</span>&gt;<span class="built_in">test</span>&lt;/td&gt;</div></pre></td></tr></table></figure><h4 id="弹出框（可编辑）"><a href="#弹出框（可编辑）" class="headerlink" title="弹出框（可编辑）"></a><a href="#弹出框（可编辑）" title="弹出框（可编辑）"></a>弹出框（可编辑）</h4><p><img src="/upload_image/20180126/2.png" alt=""><br>有些时候需要修改一些表格数据，之前的做法是点击一个按钮，跳转到一个修改的页面，但这种做法不够优雅，因此可以选择点击按钮弹出一个可编辑的对话框。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">“/index/“</span> method=<span class="string">“POST”</span>&gt;</div><div class="line">&lt;div class=<span class="string">“modal fade”</span> id=<span class="string">“update”</span> tabindex=<span class="string">“-1”</span> role=<span class="string">“dialog”</span> aria-labelledby=<span class="string">“myModalLabel”</span> aria-hidden=<span class="string">“true”</span>&gt;</div><div class="line">  &lt;div class=<span class="string">“modal-dialog”</span>&gt;</div><div class="line">    &lt;div class=<span class="string">“modal-content”</span>&gt;</div><div class="line">      &lt;div class=<span class="string">“modal-header”</span>&gt;</div><div class="line">        &lt;button <span class="built_in">type</span>=<span class="string">“button”</span> class=<span class="string">“close”</span> data-dismiss=<span class="string">“modal”</span> aria-hidden=<span class="string">“true”</span>&gt;</div><div class="line">          &amp;<span class="built_in">times</span>;</div><div class="line">        &lt;/button&gt;</div><div class="line">        &lt;h4 class=<span class="string">“modal-title”</span> id=<span class="string">“myModalLabel”</span>&gt;</div><div class="line">          提醒框</div><div class="line">        &lt;/h4&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=<span class="string">“modal-body”</span>&gt;</div><div class="line">        &lt;label&gt;KEY&lt;/label&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">“text”</span> class=<span class="string">“form-control”</span> name=<span class="string">“new_key”</span> value=<span class="string">“&#123;&#123;i.key_&#125;&#125;”</span>&gt;</div><div class="line">        &lt;label&gt;VALUES&lt;/label&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">“text”</span> class=<span class="string">“form-control”</span> name=<span class="string">“new_value”</span> value=<span class="string">“&#123;&#123;i.value_&#125;&#125;”</span>&gt;</div><div class="line"></div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=<span class="string">“modal-footer”</span>&gt;</div><div class="line">        &lt;button <span class="built_in">type</span>=<span class="string">“button”</span> class=<span class="string">“btn btn-default”</span> data-dismiss=<span class="string">“modal”</span>&gt;关闭</div><div class="line">        &lt;/button&gt;</div><div class="line">        &lt;button <span class="built_in">type</span>=<span class="string">“submit”</span> name=<span class="string">“update_id”</span> value=<span class="string">“&#123;&#123;i.id&#125;&#125;”</span> class=<span class="string">“btn btn-primary”</span>&gt;</div><div class="line">          确定修改</div><div class="line">        &lt;/button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">“button”</span> data-toggle=<span class="string">“modal”</span> data-target=<span class="string">“#update”</span> class=<span class="string">“btn btn-info”</span> value=<span class="string">“修改”</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure><h4 id="弹出提醒框（不可编辑）"><a href="#弹出提醒框（不可编辑）" class="headerlink" title="弹出提醒框（不可编辑）"></a><a href="#弹出提醒框（不可编辑）" title="弹出提醒框（不可编辑）"></a>弹出提醒框（不可编辑）</h4><p><img src="/upload_image/20180126/3.png" alt=""><br>这个功能主要作用删除数据、修改数据时的提醒。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">“/index/“</span> method=<span class="string">“POST”</span>&gt;</div><div class="line">&lt;div class=<span class="string">“modal fade”</span> id=<span class="string">“del”</span> tabindex=<span class="string">“-1”</span> role=<span class="string">“dialog”</span> aria-labelledby=<span class="string">“myModalLabel”</span> aria-hidden=<span class="string">“true”</span>&gt;</div><div class="line">&lt;div class=<span class="string">“modal-dialog”</span>&gt;</div><div class="line">&lt;div class=<span class="string">“modal-content”</span>&gt;</div><div class="line">  &lt;div class=<span class="string">“modal-header”</span>&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">“button”</span> class=<span class="string">“close”</span> data-dismiss=<span class="string">“modal”</span> aria-hidden=<span class="string">“true”</span>&gt;</div><div class="line">      &amp;<span class="built_in">times</span>;</div><div class="line">    &lt;/button&gt;</div><div class="line">    &lt;h4 class=<span class="string">“modal-title”</span> id=<span class="string">“myModalLabel”</span>&gt;</div><div class="line">      提醒框</div><div class="line">    &lt;/h4&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=<span class="string">“modal-body”</span>&gt;</div><div class="line">    您确定要删除记录吗？</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=<span class="string">“modal-footer”</span>&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">“button”</span> class=<span class="string">“btn btn-default”</span> data-dismiss=<span class="string">“modal”</span>&gt;关闭</div><div class="line">    &lt;/button&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">“submit”</span> name=<span class="string">“del_id”</span> value=<span class="string">“&#123;&#123;i.id&#125;&#125;”</span> class=<span class="string">“btn btn-primary”</span>&gt;</div><div class="line">      确定删除</div><div class="line">    &lt;/button&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">“button”</span> data-toggle=<span class="string">“modal”</span> data-target=<span class="string">“#del”</span> class=<span class="string">“btn btn-danger”</span> value=<span class="string">“删除”</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure><h4 id="搜索框自动补全"><a href="#搜索框自动补全" class="headerlink" title="搜索框自动补全"></a><a href="#搜索框自动补全" title="搜索框自动补全"></a>搜索框自动补全</h4><p><img src="/upload_image/20180126/4.png" alt=""><br>这个就厉害啦，当搜索一些资源的时候，如果能自动补全是不是会方便很多呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">“autocomplete”</span>&gt;选择扫描插件（必选）&lt;/label&gt;&lt;br&gt;</div><div class="line">&lt;input  class=<span class="string">“form-control”</span> id=<span class="string">“autocomplete”</span> name=<span class="string">“vul_name”</span> placeholder=<span class="string">“输入漏洞名称”</span>&gt;&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">“text/javascript”</span>&gt;</div><div class="line">var tags = &#123;&#123; plugin_list|safe &#125;&#125;; <span class="comment"># 注plugin_list</span></div><div class="line">$( <span class="string">“#autocomplete”</span> ).autocomplete(&#123;</div><div class="line">  <span class="built_in">source</span>: tags</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a><a href="#ajax请求" title="ajax请求"></a>ajax请求</h4><p>用ajax发送请求有好有坏，具体用法可参考：<a href="https://thief.one/2017/09/14/3/" target="_blank" rel="noopener">https://thief.one/2017/09/14/3/</a></p><h4 id="界面面板布局"><a href="#界面面板布局" class="headerlink" title="界面面板布局"></a><a href="#界面面板布局" title="界面面板布局"></a>界面面板布局</h4><p><img src="/upload_image/20180126/5.png" alt=""><br>这个纯粹为了装逼。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">“container”</span>&gt;</div><div class="line">  &lt;div class=<span class="string">“row”</span>&gt;</div><div class="line">        <span class="comment">####### 面板 ##########</span></div><div class="line">        &lt;div class=<span class="string">“col-md-3”</span>&gt;</div><div class="line">            &lt;div class=<span class="string">“list-group”</span>&gt;</div><div class="line">                &lt;form class=<span class="string">“list-group-item”</span>&gt; </div><div class="line">                    &lt;a href=<span class="string">“”</span>&gt;<span class="built_in">test</span>&lt;/a&gt;</div><div class="line">                &lt;/form&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">       <span class="comment">####### 面板 ##########</span></div><div class="line">        &lt;div class=<span class="string">“col-md-3”</span>&gt;</div><div class="line">            &lt;div class=<span class="string">“list-group”</span>&gt;</div><div class="line">                &lt;form class=<span class="string">“list-group-item”</span>&gt; </div><div class="line">                    &lt;a href=<span class="string">“”</span>&gt;test2&lt;/a&gt;</div><div class="line">                &lt;/form&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">  </div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="表格单选框"><a href="#表格单选框" class="headerlink" title="表格单选框"></a><a href="#表格单选框" title="表格单选框"></a>表格单选框</h4><p>表格显示数据是常见的功能，一般情况下需要多表格数据进行删改，因此批量选中就很重要。一般表格中的批量选择，可以使用单选框实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;!– 导入js –&gt;</div><div class="line">&lt;script src=<span class="string">“<a href="https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js&quot;" target="_blank" rel="noopener">https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js&quot;</a></span>&gt;&lt;/script&gt;</div><div class="line">&lt;!– 表格数据 –&gt;</div><div class="line">&lt;div id=<span class="string">“list”</span>&gt;</div><div class="line">    &lt;table class=<span class="string">“table table-hover table-bordered table-striped”</span>&gt;</div><div class="line">        &lt;thead&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;th&gt;&lt;input <span class="built_in">type</span>=<span class="string">“checkbox”</span> id=<span class="string">“all”</span> name=<span class="string">“task_check_”</span> value=<span class="string">“”</span>&gt;&lt;/th&gt;</div><div class="line">                &lt;th&gt;ID&lt;/th&gt;</div><div class="line">                &lt;th&gt;User&lt;/th&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/thead&gt;</div><div class="line">        &lt;tbody&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;th&gt;&lt;input <span class="built_in">type</span>=<span class="string">“checkbox”</span> id=<span class="string">“”</span> name=<span class="string">“task_check”</span> value=<span class="string">“”</span>&gt;&lt;/th&gt;</div><div class="line">                &lt;td&gt;01&lt;/td&gt;</div><div class="line">                &lt;td&gt;nmask&lt;/td&gt;</div><div class="line">                &lt;td&gt;</div><div class="line">                    &lt;a href=<span class="string">“”</span> class=<span class="string">“link”</span>&gt;修改&lt;/a&gt;&amp;nbsp;&amp;nbsp;</div><div class="line">                &lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/tbody&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!– js –&gt;</div><div class="line">&lt;script&gt;</div><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    //全选或全不选</div><div class="line">    $(<span class="string">“#all”</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        <span class="keyword">if</span> (this.checked) &#123;</div><div class="line">            $(<span class="string">“#list :checkbox”</span>).prop(<span class="string">“checked”</span>, <span class="literal">true</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $(<span class="string">“#list :checkbox”</span>).attr(<span class="string">“checked”</span>, <span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    //设置全选复选框</div><div class="line">    $(<span class="string">“#list :checkbox”</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        allchk();</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">function</span> selectAll(check)&#123;</div><div class="line">        $(check).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            <span class="keyword">if</span> ($(check).is(<span class="string">‘:checked’</span>)) &#123;</div><div class="line">                $(<span class="string">“.list input”</span>).prop(<span class="string">“checked”</span>,<span class="literal">true</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                $(<span class="string">“.list input”</span>).prop(<span class="string">“checked”</span>,<span class="literal">false</span>);</div><div class="line">            &#125;;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    //显示时执行一次</div><div class="line">    selectAll();</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="后端功能"><a href="#后端功能" class="headerlink" title="后端功能"></a><a href="#后端功能" title="后端功能"></a>后端功能</h3><h4 id="表格分页-1"><a href="#表格分页-1" class="headerlink" title="表格分页"></a><a href="#表格分页-1" title="表格分页"></a>表格分页</h4><p>前面介绍了前端的分页，那么后端怎么写分页的功能呢？django框架有内置的分页模块Paginator，其他框架也有，比如flask等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">from django.core.paginator import Paginator</div><div class="line"></div><div class="line">def page_fenye(objects,page,num=10):</div><div class="line">    <span class="string">‘’</span><span class="string">‘分页函数</span></div><div class="line">    @num:每页显示多少条数据</div><div class="line">    @page:当前页码</div><div class="line">    @fenye_num:分页栏显示的数字数量</div><div class="line"></div><div class="line">    return：</div><div class="line">    @object_list:该页显示的数据对象</div><div class="line">    @page_range:分页栏显示的数字范围</div><div class="line">    @last_page:最后一页的数字</div><div class="line">    ‘<span class="string">‘’</span></div><div class="line">    fenye_num=6</div><div class="line">    fenye_num_av=fenye_num/2</div><div class="line"></div><div class="line">    try:</div><div class="line">        page=int(page)</div><div class="line">    except:</div><div class="line">        page=1</div><div class="line"></div><div class="line">    <span class="keyword">if</span> page&lt;1:</div><div class="line">        page=1</div><div class="line"></div><div class="line">    range_first_page=page-fenye_num_av</div><div class="line">    range_last_page=page+fenye_num_av</div><div class="line"></div><div class="line">    <span class="keyword">if</span> range_first_page&lt;0:</div><div class="line">        range_first_page=0</div><div class="line">        range_last_page=fenye_num</div><div class="line"></div><div class="line">    p = Paginator(objects, num)</div><div class="line"></div><div class="line">    page_range=list(p.page_range)[range_first_page:range_last_page]</div><div class="line"></div><div class="line">    last_page=len(p.page_range)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> page&gt;last_page:</div><div class="line">        page=1</div><div class="line"></div><div class="line">    page1 = p.page(page)</div><div class="line"></div><div class="line">    object_list=page1.object_list</div><div class="line"></div><div class="line">    <span class="built_in">return</span> object_list,page_range,last_page</div></pre></td></tr></table></figure><p>但个人使用以后发现性能不好，因为每次请求页面需要先获取所有的数据，再通过此模块计算出此页面需要展示的数据，当所有的数据量比较大时，返回就比较慢了(也可能是我没用对这个模块)。因此，我自己写了一个分页的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">def fenye(all_num,page,num,page_list_num):</div><div class="line">    <span class="string">‘’</span><span class="string">‘分页计算</span></div><div class="line">    @all_num:数据库记录总量</div><div class="line">    @page:当前页码</div><div class="line">    @num:每一页显示的记录条数</div><div class="line">    @page_list_num:分页导航显示多少个数字，要为偶数</div><div class="line">    @page_list_aver:page_list_num除以2</div><div class="line"></div><div class="line">    return：</div><div class="line">    @page:显示第几页</div><div class="line">    @last_page:最后一页的数字</div><div class="line">    @page_list:分页栏显示的数字范围</div><div class="line">    ‘<span class="string">‘’</span></div><div class="line"></div><div class="line">    page=int(page)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> all_num!=0:</div><div class="line">        last_page = all_num/num-1 <span class="keyword">if</span> all_num%num == 0 <span class="keyword">else</span> all_num/num <span class="comment">#计算最后一页数字</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        last_page=0</div><div class="line"></div><div class="line">    page_list_aver=page_list_num/2</div><div class="line"> </div><div class="line">    page=last_page <span class="keyword">if</span> page &gt; last_page <span class="keyword">else</span> page <span class="comment">#判断请求的页数是否超过范围</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> page &gt; page_list_aver:</div><div class="line">        <span class="keyword">if</span> last_page &gt; page+page_list_aver:</div><div class="line"></div><div class="line">            page_list=range(page - page_list_aver , page + page_list_aver)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line"></div><div class="line">            page_list=range(last_page - (page_list_num-1), last_page + 1)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> last_page &gt; page_list_num:</div><div class="line"></div><div class="line">            page_list = range(page_list_num)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line"></div><div class="line">            page_list = range(last_page + 1)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> page,last_page,page_list</div></pre></td></tr></table></figure><p>这样不需要提前先查询出所有的数据存入内存，而只需要查询出总共存在多少条数据（注意，这里的查询语句由select <code>*</code> 改为select count(<code>*</code>)会快很多）。获取到分页函数返回的page后，可以结合sql语句中的limit功能，查询分页要展示的数据内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <em> from <span class="built_in">test</span> <span class="built_in">limit</span> page</em>num,num <span class="comment"># page为分页返回的显示页码，num是一页显示的数据数量</span></div></pre></td></tr></table></figure><h4 id="session做身份认证"><a href="#session做身份认证" class="headerlink" title="session做身份认证"></a><a href="#session做身份认证" title="session做身份认证"></a>session做身份认证</h4><p>这个功能就是用来验证用户身份的，可配合登录功能，写一个装饰器函数，检查全局是否存在session值。（session值是一个字典格式，在用户登录时生成）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">def session_check(level=2,return_=False):</div><div class="line">    <span class="string">‘’</span><span class="string">‘session_check装饰器函数 针对函数</span></div><div class="line">    @level：可以给用户区分权限</div><div class="line">    @return_:检测到不存在session后跳转到不同的页面</div><div class="line">    ‘<span class="string">‘’</span></div><div class="line">    def dec(func):</div><div class="line">        def warp(request,<em>args,**kwargs):</em></div><div class="line">            <span class="keyword">if</span> request.session.get(<span class="string">‘user_id’</span>,False) and int(request.session.get(<span class="string">‘level’</span>))&lt;=level:</div><div class="line">                <span class="built_in">return</span> func(request,args,**kwargs)</div><div class="line">            <span class="keyword">elif</span> return_:</div><div class="line">                <span class="built_in">return</span> HttpResponse(<span class="string">‘&lt;head&gt;&lt;meta http-equiv=”refresh” content=”0.0001;url=/login/“&gt;&lt;/head&gt;’</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="built_in">return</span> HttpResponse(<span class="string">‘&lt;head&gt;&lt;meta http-equiv=”refresh” content=”0.0001;url=/error/“&gt;&lt;/head&gt;’</span>)</div><div class="line">        <span class="built_in">return</span> warp</div><div class="line"></div><div class="line">    <span class="built_in">return</span> dec</div></pre></td></tr></table></figure><p>使用的话，直接在需要权限控制的函数上添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@session_check(return_=True)</div><div class="line">def vul_index(request):</div><div class="line">    <span class="string">‘’</span><span class="string">‘ 漏洞扫描 ‘</span><span class="string">‘’</span></div><div class="line">    pass</div></pre></td></tr></table></figure><p><code>暂时就想到了这些，先记这么多吧，等以后遇上了再补充一些，o了</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2018年的第一场雪，比2002年来得更晚一些&lt;br&gt;　　记得之前有分享过Django开发相关的系列文章（可在博客右上方自行搜索），内容包括模版、视图、路由等。那么本篇再补充一些Django开发过程中常用到的一些功能代码块，内容涉及前端、后端相关功
      
    
    </summary>
    
    
      <category term="编程之道" scheme="http://chucz.club/tags/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
      <category term="django" scheme="http://chucz.club/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>生成k8s证书的三种方式</title>
    <link href="http://chucz.club/2018/08/21/%E7%94%9F%E6%88%90k8s%E8%AF%81%E4%B9%A6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://chucz.club/2018/08/21/生成k8s证书的三种方式/</id>
    <published>2018-08-21T05:51:16.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<p>根据官方文档，生成k8s秘钥证书及相关管理证书有三种方式，其本质都是通过openssl:</p><ul><li>cfssl</li><li>easyrsa</li><li>openssl</li></ul><p>官方文档：<a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/certificates/</a></p><h5 id="cfssl方式"><a href="#cfssl方式" class="headerlink" title="cfssl方式"></a><a href="#cfssl方式" title="cfssl方式"></a>cfssl方式</h5><h6 id="1-cfssl下载地址"><a href="#1-cfssl下载地址" class="headerlink" title="1.cfssl下载地址:"></a><a href="#1-cfssl下载地址" title="1.cfssl下载地址:"></a>1.cfssl下载地址:</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VERSION=R1.<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;cfssl,cfssljson,cfssl-certinfo&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">wget https:<span class="regexp">//</span>pkg.cfssl.org<span class="regexp">/$&#123;VERSION&#125;/</span><span class="variable">$&#123;i&#125;</span>_linux-amd64 -O <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span><span class="variable">$&#123;i&#125;</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h6 id="2-生成CA配置文件"><a href="#2-生成CA配置文件" class="headerlink" title="2.生成CA配置文件"></a><a href="#2-生成CA配置文件" title="2.生成CA配置文件"></a>2.生成CA配置文件</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mkdir ssl &amp;&amp; cd ssl</span><br><span class="line">cfssl print-defaults<span class="built_in"> config </span>&gt; config.json</span><br><span class="line">cfssl print-defaults csr &gt; csr.json</span><br><span class="line">cat &gt; ca-config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“signing”</span>: &#123;</span><br><span class="line">    <span class="string">“default”</span>: &#123;</span><br><span class="line">      <span class="string">“expiry”</span>: <span class="string">“87600h”</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">“profiles”</span>: &#123;</span><br><span class="line">      <span class="string">“kubernetes”</span>: &#123;</span><br><span class="line">        <span class="string">“usages”</span>: [</span><br><span class="line">            <span class="string">“signing”</span>,</span><br><span class="line">            <span class="string">“key encipherment”</span>,</span><br><span class="line">            <span class="string">“server auth”</span>,</span><br><span class="line">            <span class="string">“client auth”</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">“expiry”</span>: <span class="string">“87600h”</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h6 id="3-生成CA签名配置文件"><a href="#3-生成CA签名配置文件" class="headerlink" title="3.生成CA签名配置文件"></a><a href="#3-生成CA签名配置文件" title="3.生成CA签名配置文件"></a>3.生成CA签名配置文件</h6><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“CN”</span>: <span class="string">“kubernetes”</span>,</span><br><span class="line">  <span class="string">“key”</span>: &#123;</span><br><span class="line">    <span class="string">“algo”</span>: <span class="string">“rsa”</span>,</span><br><span class="line">    <span class="string">“size”</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“names”</span>:[&#123;</span><br><span class="line">    <span class="string">“C”</span>: <span class="string">“CN”</span>,</span><br><span class="line">    <span class="string">“ST”</span>: <span class="string">“Beijing”</span>,</span><br><span class="line">    <span class="string">“L”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">    <span class="string">“O”</span>: <span class="string">“k8s”</span>,</span><br><span class="line">    <span class="string">“OU”</span>: <span class="string">“System”</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><a id="more"></a><br><br>###### <a href="#4-生成私钥和证书" title="4.生成私钥和证书"></a>4.生成私钥和证书<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca <span class="keyword">ca</span>-csr.json | cfssljson -bare <span class="keyword">ca</span></span><br></pre></td></tr></table></figure><h6 id="5-创建一个用于生成API-Server的密钥和证书的JSON配置文件"><a href="#5-创建一个用于生成API-Server的密钥和证书的JSON配置文件" class="headerlink" title="5.创建一个用于生成API Server的密钥和证书的JSON配置文件"></a><a href="#5-创建一个用于生成API-Server的密钥和证书的JSON配置文件" title="5.创建一个用于生成API Server的密钥和证书的JSON配置文件"></a>5.创建一个用于生成API Server的密钥和证书的JSON配置文件</h6><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kubernetes-csr.json &lt;&lt;<span class="built_in">EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“CN”</span>: <span class="string">“kubernetes”</span>,</span><br><span class="line">  <span class="string">“hosts”</span>: [</span><br><span class="line">    <span class="string">“127.0.0.1”</span>,</span><br><span class="line">    <span class="string">“&lt;MASTER_IP&gt;”</span>,</span><br><span class="line">    <span class="string">“&lt;MASTER_CLUSTER_IP&gt;”</span>,</span><br><span class="line">    <span class="string">“kubernetes”</span>,</span><br><span class="line">    <span class="string">“kubernetes.default”</span>,</span><br><span class="line">    <span class="string">“kubernetes.default.svc”</span>,</span><br><span class="line">    <span class="string">“kubernetes.default.svc.cluster”</span>,</span><br><span class="line">    <span class="string">“kubernetes.default.svc.cluster.local”</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">“key”</span>: &#123;</span><br><span class="line">    <span class="string">“algo”</span>: <span class="string">“rsa”</span>,</span><br><span class="line">    <span class="string">“size”</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“names”</span>: [&#123;</span><br><span class="line">    <span class="string">“C”</span>: <span class="string">“CN”</span>,</span><br><span class="line">    <span class="string">“ST”</span>: <span class="string">“Beijing”</span>,</span><br><span class="line">    <span class="string">“L”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">    <span class="string">“O”</span>: <span class="string">“k8s”</span>,</span><br><span class="line">    <span class="string">“OU”</span>: <span class="string">“System”</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">EOF</span></span><br><span class="line"><span class="meta">#该文件需要包含所有使用该证书的ip和域名列表，包括etcd集群、kubernetes master集群、以及apiserver 集群内部cluster ip。</span></span><br></pre></td></tr></table></figure><h6 id="6-生成-kubernetes-证书和私钥"><a href="#6-生成-kubernetes-证书和私钥" class="headerlink" title="6.生成 kubernetes 证书和私钥"></a><a href="#6-生成-kubernetes-证书和私钥" title="6.生成 kubernetes 证书和私钥"></a>6.生成 kubernetes 证书和私钥</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert <span class="attribute">-ca</span>=ca.pem <span class="attribute">-ca-key</span>=ca-key.pem <span class="attribute">-config</span>=ca-config.json <span class="attribute">-profile</span>=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span><br></pre></td></tr></table></figure><h6 id="7-创建admin证书"><a href="#7-创建admin证书" class="headerlink" title="7.创建admin证书"></a><a href="#7-创建admin证书" title="7.创建admin证书"></a>7.创建admin证书</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; admin-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“CN”</span>: <span class="string">“admin”</span>,</span><br><span class="line">  <span class="string">“hosts”</span>: [],</span><br><span class="line">  <span class="string">“key”</span>: &#123;</span><br><span class="line">    <span class="string">“algo”</span>: <span class="string">“rsa”</span>,</span><br><span class="line">    <span class="string">“size”</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“names”</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">“C”</span>: <span class="string">“CN”</span>,</span><br><span class="line">      <span class="string">“ST”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“L”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“O”</span>: <span class="string">“system:masters”</span>,</span><br><span class="line">      <span class="string">“OU”</span>: <span class="string">“System”</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert <span class="attribute">-ca</span>=ca.pem <span class="attribute">-ca-key</span>=ca-key.pem <span class="attribute">-config</span>=ca-config.json <span class="attribute">-profile</span>=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line"><span class="comment"># 证书O配置为system:masters 在集群内部cluster-admin的clusterrolebinding将system:masters组和cluster-admin clusterrole绑定在一起</span></span><br></pre></td></tr></table></figure><h6 id="8-创建kube-proxy证书"><a href="#8-创建kube-proxy证书" class="headerlink" title="8.创建kube-proxy证书"></a><a href="#8-创建kube-proxy证书" title="8.创建kube-proxy证书"></a>8.创建kube-proxy证书</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> &gt; kube-proxy-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“CN”</span>: <span class="string">“system:kube-proxy”</span>,</span><br><span class="line">  <span class="string">“hosts”</span>: [],</span><br><span class="line">  <span class="string">“key”</span>: &#123;</span><br><span class="line">    <span class="string">“algo”</span>: <span class="string">“rsa”</span>,</span><br><span class="line">    <span class="string">“size”</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“names”</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">“C”</span>: <span class="string">“CN”</span>,</span><br><span class="line">      <span class="string">“ST”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“L”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“O”</span>: <span class="string">“k8s”</span>,</span><br><span class="line">      <span class="string">“OU”</span>: <span class="string">“System”</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">cfssl gencert -<span class="keyword">ca</span>=<span class="keyword">ca</span>.pem -<span class="keyword">ca</span>-key=<span class="keyword">ca</span>-key.pem -config=<span class="keyword">ca</span>-config.json -<span class="keyword">profile</span>=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line"># 该证书用户名为<span class="built_in">system</span>:kube-proxy，预定义的<span class="built_in">system</span>:node-proxier clusterrolebindings将 <span class="built_in">system</span>:kube-proxy用户和<span class="built_in">system</span>:node-proxier角色绑定在一起</span><br></pre></td></tr></table></figure><h6 id="9-校验证书信息"><a href="#9-校验证书信息" class="headerlink" title="9.校验证书信息"></a><a href="#9-校验证书信息" title="9.校验证书信息"></a>9.校验证书信息</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl-certinfo -cert kubernetes.pem</span><br><span class="line">openssl x509  -noout -text -<span class="keyword">in</span>  kubernetes.pem</span><br></pre></td></tr></table></figure><h6 id="10-拷贝证书"><a href="#10-拷贝证书" class="headerlink" title="10.拷贝证书"></a><a href="#10-拷贝证书" title="10.拷贝证书"></a>10.拷贝证书</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/etc/</span>kubernetes<span class="regexp">/ssl/</span> &amp;&amp; cp *.pem <span class="regexp">/etc/</span>kubernetes<span class="regexp">/ssl/</span></span><br></pre></td></tr></table></figure><h5 id="easyrsa方式"><a href="#easyrsa方式" class="headerlink" title="easyrsa方式"></a><a href="#easyrsa方式" title="easyrsa方式"></a>easyrsa方式</h5><h6 id="1-下载："><a href="#1-下载：" class="headerlink" title="1.下载："></a><a href="#1-下载：" title="1.下载："></a>1.下载：</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https:<span class="string">//storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz</span></span><br><span class="line">tar xzf easy-rsa.tar.gz</span><br><span class="line"><span class="keyword">cd</span> easy-rsa-master/easyrsa3</span><br><span class="line"><span class="string">./easyrsa</span> init-pki</span><br><span class="line"><span class="string">./easyrsa</span> <span class="params">–batch</span> <span class="string">“--req-cn=172.26.6.1@<code>date +%s</code>“</span> build-ca nopass</span><br></pre></td></tr></table></figure><h6 id="2-生成-kubernetes-证书和私钥"><a href="#2-生成-kubernetes-证书和私钥" class="headerlink" title="2.生成 kubernetes 证书和私钥"></a><a href="#2-生成-kubernetes-证书和私钥" title="2.生成 kubernetes 证书和私钥"></a>2.生成 kubernetes 证书和私钥</h6><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./easyrsa –<span class="attr">subject-alt-name=</span><span class="string">“IP:172.26.6.1,IP:10.254.0.1,DNS:kubernetes.default”</span> build-server-full kubernetes-<span class="keyword">master</span> <span class="title">nopass</span></span><br></pre></td></tr></table></figure><h6 id="3-签发admin证书"><a href="#3-签发admin证书" class="headerlink" title="3.签发admin证书"></a><a href="#3-签发admin证书" title="3.签发admin证书"></a>3.签发admin证书</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./easyrsa</span> <span class="params">–dn-mode=org</span> <span class="params">–req-cn=admin</span> <span class="params">–req-org=system</span><span class="function">:masters</span> <span class="params">–req-c=</span> <span class="params">–req-st=</span> <span class="params">–req-city=</span> <span class="params">–req-email=</span> <span class="params">–req-ou=</span> build-client-full admin nopass</span><br></pre></td></tr></table></figure><h5 id="openssl方式"><a href="#openssl方式" class="headerlink" title="openssl方式"></a><a href="#openssl方式" title="openssl方式"></a>openssl方式</h5><h6 id="1-生成ca"><a href="#1-生成ca" class="headerlink" title="1.生成ca"></a><a href="#1-生成ca" title="1.生成ca"></a>1.生成ca</h6><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out ca.<span class="type">key</span> <span class="number">2048</span></span><br><span class="line">openssl req -x509 -new -nodes -<span class="type">key</span> ca.<span class="type">key</span> -subj <span class="string">“/CN=172.26.6.1”</span> -days <span class="number">10000</span> -out ca.crt</span><br></pre></td></tr></table></figure><h6 id="2-kubernetes证书和私钥"><a href="#2-kubernetes证书和私钥" class="headerlink" title="2.kubernetes证书和私钥"></a><a href="#2-kubernetes证书和私钥" title="2.kubernetes证书和私钥"></a>2.kubernetes证书和私钥</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server<span class="selector-class">.key</span> <span class="number">2048</span></span><br><span class="line">cat &gt;csr<span class="selector-class">.conf</span> &lt;&lt;EOF</span><br><span class="line">[ req ]</span><br><span class="line">default_bits = <span class="number">2048</span></span><br><span class="line">prompt = no</span><br><span class="line">default_md = sha256</span><br><span class="line">req_extensions = req_ext</span><br><span class="line">distinguished_name = dn</span><br><span class="line">    </span><br><span class="line">[ dn ]</span><br><span class="line">C = &lt;country&gt;</span><br><span class="line">ST = &lt;state&gt;</span><br><span class="line">L = &lt;city&gt;</span><br><span class="line">O = &lt;organization&gt;</span><br><span class="line">OU = &lt;organization unit&gt;</span><br><span class="line">CN = <span class="number">172.26</span>.<span class="number">6.1</span></span><br><span class="line">    </span><br><span class="line">[ req_ext ]</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">    </span><br><span class="line">[ alt_names ]</span><br><span class="line">DNS.<span class="number">1</span> = kubernetes</span><br><span class="line">DNS.<span class="number">2</span> = kubernetes.default</span><br><span class="line">DNS.<span class="number">3</span> = kubernetes<span class="selector-class">.default</span><span class="selector-class">.svc</span></span><br><span class="line">DNS.<span class="number">4</span> = kubernetes<span class="selector-class">.default</span><span class="selector-class">.svc</span><span class="selector-class">.cluster</span></span><br><span class="line">DNS.<span class="number">5</span> = kubernetes<span class="selector-class">.default</span><span class="selector-class">.svc</span><span class="selector-class">.cluster</span><span class="selector-class">.local</span></span><br><span class="line">IP.<span class="number">1</span> = <span class="number">172.26</span>.<span class="number">6.1</span></span><br><span class="line">IP.<span class="number">2</span> = <span class="number">10.254</span>.<span class="number">0.1</span></span><br><span class="line">    </span><br><span class="line">[ v3_ext ]</span><br><span class="line">authorityKeyIdentifier=keyid,issuer:always</span><br><span class="line">basicConstraints=CA:FALSE</span><br><span class="line">keyUsage=keyEncipherment,dataEncipherment</span><br><span class="line">extendedKeyUsage=serverAuth,clientAuth</span><br><span class="line">subjectAltName=@alt_names</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">openssl req -new -key server<span class="selector-class">.key</span> -out server<span class="selector-class">.csr</span> -config csr.conf</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server<span class="selector-class">.csr</span> -CA ca<span class="selector-class">.crt</span> -CAkey ca<span class="selector-class">.key</span> -CAcreateserial -out server<span class="selector-class">.crt</span> -days <span class="number">10000</span> -extensions v3_ext -extfile csr.conf</span><br><span class="line">openssl x509  -noout -text -<span class="keyword">in</span> ./server.crt</span><br></pre></td></tr></table></figure><h6 id="3-admin证书"><a href="#3-admin证书" class="headerlink" title="3.admin证书"></a><a href="#3-admin证书" title="3.admin证书"></a>3.admin证书</h6><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -<span class="keyword">out</span> admin.key 2048</span><br><span class="line">openssl req -new -key admin.key -<span class="keyword">out</span> admin.csr -subj <span class="string">“/O=system:masters/CN=dmin”</span></span><br><span class="line">openssl x509 -req -set_serial $(date +%s%<span class="keyword">N</span>) -<span class="keyword">in</span> admin.csr -<span class="keyword">CA</span> <span class="keyword">ca</span>.crt -CAkey <span class="keyword">ca</span>.key -<span class="keyword">out</span> admin.crt -days 365 -extensions v3_req -extfile req.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;根据官方文档，生成k8s秘钥证书及相关管理证书有三种方式，其本质都是通过openssl:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cfssl&lt;/li&gt;
&lt;li&gt;easyrsa&lt;/li&gt;
&lt;li&gt;openssl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://kub
      
    
    </summary>
    
    
      <category term="K8s" scheme="http://chucz.club/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>23种非常有用的ElasticSearch查询例子</title>
    <link href="http://chucz.club/2018/08/19/23%E7%A7%8D%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84ElasticSearch%E6%9F%A5%E8%AF%A2%E4%BE%8B%E5%AD%90/"/>
    <id>http://chucz.club/2018/08/19/23种非常有用的ElasticSearch查询例子/</id>
    <published>2018-08-19T01:57:30.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、新建索引"><a href="#一、新建索引" class="headerlink" title="一、新建索引"></a><a href="#一、新建索引" title="一、新建索引"></a>一、新建索引</h2><p>为了展示Elasticsearch中不同查询的用法，先在Elasticsearch里面创建了book相关的documents，每本书主要涉及以下字段： title, authors, summary, publish_date(发行日期),publisher以及评论条数。</p><p>操作如下：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT <span class="string">‘<a href="https://www.iteblog.com:9200/iteblog_book_index&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index&#39;</a></span> -d <span class="string">‘&#123; “</span>settings<span class="string">“: &#123; “</span>number_of_shards<span class="string">“: 1 &#125;&#125;’</span></span><br><span class="line"></span><br><span class="line">curl -XPOST <span class="string">‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_bulk&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_bulk&#39;</a></span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123; “</span>index<span class="string">“: &#123; “</span>_id<span class="string">“: 1 &#125;&#125;</span></span><br><span class="line"><span class="string">&#123; “</span>title<span class="string">“: “</span>Elasticsearch: The Definitive Guide<span class="string">“, “</span>authors<span class="string">“: [“</span>clinton gormley<span class="string">“, “</span>zachary tong<span class="string">“], “</span>summary<span class="string">“ : “</span>A distibuted <span class="built_in">real</span>-time search <span class="built_in">and</span> analytics engine<span class="string">“, “</span>publish_date<span class="string">“ : “</span><span class="number">2015</span><span class="number">-02</span><span class="number">-07</span><span class="string">“, “</span>num_reviews<span class="string">“: 20, “</span>publisher<span class="string">“: “</span>oreilly<span class="string">“ &#125;</span></span><br><span class="line"><span class="string">&#123; “</span>index<span class="string">“: &#123; “</span>_id<span class="string">“: 2 &#125;&#125;</span></span><br><span class="line"><span class="string">&#123; “</span>title<span class="string">“: “</span>Taming Text: How to Find, Organize, <span class="built_in">and</span> Manipulate It<span class="string">“, “</span>authors<span class="string">“: [“</span>grant ingersoll<span class="string">“, “</span>thomas morton<span class="string">“, “</span>drew farris<span class="string">“], “</span>summary<span class="string">“ : “</span>organize text using approaches such as full-text search, proper name recognition, clustering, tagging, information extraction, <span class="built_in">and</span> summarization<span class="string">“, “</span>publish_date<span class="string">“ : “</span><span class="number">2013</span><span class="number">-01</span><span class="number">-24</span><span class="string">“, “</span>num_reviews<span class="string">“: 12, “</span>publisher<span class="string">“: “</span>manning<span class="string">“ &#125;</span></span><br><span class="line"><span class="string">&#123; “</span>index<span class="string">“: &#123; “</span>_id<span class="string">“: 3 &#125;&#125;</span></span><br><span class="line"><span class="string">&#123; “</span>title<span class="string">“: “</span>Elasticsearch in Action<span class="string">“, “</span>authors<span class="string">“: [“</span>radu gheorge<span class="string">“, “</span>matthew lee hinman<span class="string">“, “</span>roy russo<span class="string">“], “</span>summary<span class="string">“ : “</span>build scalable search applications using Elasticsearch without having to <span class="keyword">do</span> complex low-level programming <span class="built_in">or</span> understand advanced data science algorithms<span class="string">“, “</span>publish_date<span class="string">“ : “</span><span class="number">2015</span><span class="number">-12</span><span class="number">-03</span><span class="string">“, “</span>num_reviews<span class="string">“: 18, “</span>publisher<span class="string">“: “</span>manning<span class="string">“ &#125;</span></span><br><span class="line"><span class="string">&#123; “</span>index<span class="string">“: &#123; “</span>_id<span class="string">“: 4 &#125;&#125;</span></span><br><span class="line"><span class="string">&#123; “</span>title<span class="string">“: “</span>Solr in Action<span class="string">“, “</span>authors<span class="string">“: [“</span>trey grainger<span class="string">“, “</span>timothy potter<span class="string">“], “</span>summary<span class="string">“ : “</span>Comprehensive guide to implementing a scalable search engine using Apache Solr<span class="string">“, “</span>publish_date<span class="string">“ : “</span><span class="number">2014</span><span class="number">-04</span><span class="number">-05</span><span class="string">“, “</span>num_reviews<span class="string">“: 23, “</span>publisher<span class="string">“: “</span>manning<span class="string">“ &#125;</span></span><br><span class="line"><span class="string">‘</span></span><br></pre></td></tr></table></figure><p>通过dev tools来模拟则为：<br><a href="http://cos.leiyawu.com/img/elk_index_check_1.png" target="_blank" rel="noopener">http://cos.leiyawu.com/img/elk_index_check_1.png</a></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /iteblog_book_index/book/_bulk</span><br><span class="line">&#123; <span class="string">“index”</span>: &#123; <span class="string">“_id”</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">“title”</span>: <span class="string">“Elasticsearch: The Definitive Guide”</span>, <span class="string">“authors”</span>: [<span class="string">“clinton gormley”</span>, <span class="string">“zachary tong”</span>], <span class="string">“summary”</span> : <span class="string">“A distibuted real-time search and analytics engine”</span>, <span class="string">“publish_date”</span> : <span class="string">“2015-02-07”</span>, <span class="string">“num_reviews”</span>: <span class="number">20</span>, <span class="string">“publisher”</span>: <span class="string">“oreilly”</span> &#125;</span><br><span class="line">&#123; <span class="string">“index”</span>: &#123; <span class="string">“_id”</span>: <span class="number">2</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">“title”</span>: <span class="string">“Taming Text: How to Find, Organize, and Manipulate It”</span>, <span class="string">“authors”</span>: [<span class="string">“grant ingersoll”</span>, <span class="string">“thomas morton”</span>, <span class="string">“drew farris”</span>], <span class="string">“summary”</span> : <span class="string">“organize text using approaches such as full-text search, proper name recognition, clustering, tagging, information extraction, and summarization”</span>, <span class="string">“publish_date”</span> : <span class="string">“2013-01-24”</span>, <span class="string">“num_reviews”</span>: <span class="number">12</span>, <span class="string">“publisher”</span>: <span class="string">“manning”</span> &#125;</span><br><span class="line">&#123; <span class="string">“index”</span>: &#123; <span class="string">“_id”</span>: <span class="number">3</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">“title”</span>: <span class="string">“Elasticsearch in Action”</span>, <span class="string">“authors”</span>: [<span class="string">“radu gheorge”</span>, <span class="string">“matthew lee hinman”</span>, <span class="string">“roy russo”</span>], <span class="string">“summary”</span> : <span class="string">“build scalable search applications using Elasticsearch without having to do complex low-level programming or understand advanced data science algorithms”</span>, <span class="string">“publish_date”</span> : <span class="string">“2015-12-03”</span>, <span class="string">“num_reviews”</span>: <span class="number">18</span>, <span class="string">“publisher”</span>: <span class="string">“manning”</span> &#125;</span><br><span class="line">&#123; <span class="string">“index”</span>: &#123; <span class="string">“_id”</span>: <span class="number">4</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">“title”</span>: <span class="string">“Solr in Action”</span>, <span class="string">“authors”</span>: [<span class="string">“trey grainger”</span>, <span class="string">“timothy potter”</span>], <span class="string">“summary”</span> : <span class="string">“Comprehensive guide to implementing a scalable search engine using Apache Solr”</span>, <span class="string">“publish_date”</span> : <span class="string">“2014-04-05”</span>, <span class="string">“num_reviews”</span>: <span class="number">23</span>, <span class="string">“publisher”</span>: <span class="string">“manning”</span> &#125;</span><br></pre></td></tr></table></figure><p>ES中的查询请求有两种方式，一种是简易版的查询，另外一种是使用JSON完整的请求体，叫做结构化查询（DSL）。<br>由于DSL查询更为直观也更为简易，所以大都使用这种方式。<br>DSL查询是POST过去一个json，由于post的请求是json格式的，所以存在很多灵活性，也有很多形式。</p><p>基本匹配查询主要形式：<br>（1）、使用Search Lite API，并将所有的搜索参数都通过URL传递<br>（2）、使用Elasticsearch DSL，其可以通过传递一个JSON请求来获取结果。Curl方式与其类似，只是提交方式不是POST，而是XGET，提交参数与DSL提交一致</p><p>二、基本匹配查询(Basic Match Query)<br>1、在所有的字段中搜索带有”guide”的结果：<br>通过dev tools:<br>GET /iteblog_book_index/book/_search?q=guide</p><p>通过curl方式：<br>curl -u elastic “<a href="http://10.104.37.115:9281/iteblog_book_index/book/_search?pretty&quot;" target="_blank" rel="noopener">http://10.104.37.115:9281/iteblog_book_index/book/_search?pretty&quot;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “guide”,<br>            “fields” : [“_all”]<br>        }<br>    }<br>}’</p><p>通过DSL：(POST json方式)</p><p>其输出和上面使用/iteblog_book_index/book/_search?q=guide的输出一样。上面的multi_match关键字通常在查询多个fields的时候作为match关键字的简写方式。fields属性指定需要查询的字段，如果我们想查询所有的字段，这时候可以使用_all关键字，正如上面的一样。</p><p>如果只是查询summary字段，则为：</p><p>title的Guide则不会显示。</p><p>2、以上两种方式都允许我们指定查询哪些字段。比如，我们想查询title中出现in Action的图书，那么我们可以这么查询：</p><p>GET /iteblog_book_index/book/_search?q=title:in%20action</p><p>然而，DSL方式提供了更加灵活的方式来构建更加复杂的查询（我们将在后面看到），甚至指定你想要的返回结果。下面的例子中，我将指定需要返回结果的数量，开始的偏移量（这在分页的情况下非常有用），需要返回document中的哪些字段以及高亮关键字：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “match” : {<br>            “title” : “in action”<br>        }<br>    },<br>    “size”: 2,   #返回结果的数量<br>    “from”: 0,  #开始的偏移量<br>    “_source”: [ “title”, “summary”, “publish_date” ],<br>    “highlight”: {<br>        “fields” : {<br>            “title” : {}<br>        }<br>    }<br>}’<br><a id="more"></a></p><p>三、Multi-field Search<br>正如我们之前所看到的，想在一个搜索中查询多个 document field （比如使用同一个查询关键字同时在title和summary中查询），你可以使用multi_match查询，使用如下：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “elasticsearch guide”,<br>            “fields”: [“title”, “summary”]<br>        }<br>    }<br>}’</p><p>四、Boosting<br>上面使用同一个搜索请求在多个field中查询，你也许想提高某个field的查询权重。在下面的例子中，我们把summary field的权重调成3，这样就提高了其在结果中的权重，这样把_id=4的文档相关性大大提高了，如下：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “elasticsearch guide”,<br>            “fields”: [“title”, “summary^3”]<br>        }<br>    },<br>    “_source”: [“title”, “summary”, “publish_date”]<br>}’</p><p>需要注意的是：Boosting不仅仅意味着计算出来的分数(calculated score)直接乘以boost factor，最终的boost value会经过归一化以及其他一些内部的优化</p><p>五、Bool Query<br>在查询条件中使用AND/OR/NOT操作符，这就是布尔查询(Bool Query)。布尔查询可以接受一个must参数(等价于AND)，一个must_not参数(等价于NOT)，以及一个should参数(等价于OR)。比如，我想查询title中出现Elasticsearch或者Solr关键字的图书，图书的作者是clinton gormley，但没有radu gheorge，可以这么来查询：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “bool”: {<br>            “must”: {<br>                “bool” : { “should”: [<br>                      { “match”: { “title”: “Elasticsearch” }},<br>                      { “match”: { “title”: “Solr” }} ] }<br>            },<br>            “must”: { “match”: { “authors”: “clinton gormely” }},<br>            “must_not”: { “match”: {“authors”: “radu gheorge” }}<br>        }<br>    }<br>}’</p><p>六、Fuzzy Queries（模糊查询）<br>模糊查询可以在Match和 Multi-Match查询中使用以便解决拼写的错误，模糊度是基于Levenshtein distance计算与原单词的距离。使用如下：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match” : {<br>            “query” : “comprihensiv guide”,<br>            “fields”: [“title”, “summary”],<br>            “fuzziness”: “AUTO”<br>        }<br>    },<br>    “_source”: [“title”, “summary”, “publish_date”],<br>    “size”: 1<br>}’</p><p>需要注意：上面我们将fuzziness的值指定为AUTO，其在term的长度大于5的时候相当于指定值为2。然而80%的人拼写错误的编辑距离(edit distance)为1，所有如果你将fuzziness设置为1可能会提高你的搜索性能。</p><p>七、Wildcard Query(通配符查询)<br>通配符查询允许我们指定一个模式来匹配，而不需要指定完整的term。?将会匹配一个字符；_将会匹配零个或者多个字符。比如我们想查找所有作者名字中以t字符开始的记录，我们可以如下使用：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “wildcard” : {      #wildcard是通配符意思<br>            “authors” : “t_“<br>        }<br>    },<br>    “_source”: [“title”, “authors”],<br>    “highlight”: {<br>        “fields” : {<br>            “authors” : {}<br>        }<br>    }<br>}’</p><p>八、Regexp Query(正则表达式查询)<br>ElasticSearch还支持正则表达式查询，此方式提供了比通配符查询更加复杂的模式。比如我们先查找作者名字以t字符开头，中间是若干个a-z之间的字符，并且以字符y结束的记录，可以如下查询：</p><p>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “regexp” : {<br>            “authors” : “t[a-z]*y”<br>        }<br>    },<br>    “_source”: [“title”, “authors”],<br>    “highlight”: {<br>        “fields” : {<br>            “authors” : {}<br>        }<br>    }<br>}’</p><p>九、Match Phrase Query(匹配短语查询)<br>匹配短语查询要求查询字符串中的trems要么都出现Document中、要么trems按照输入顺序依次出现在结果中。在默认情况下，查询输入的trems必须在搜索字符串紧挨着出现，否则将查询不到。不过我们可以指定slop参数，来控制输入的trems之间有多少个单词仍然能够搜索到，如下所示：<br>curl -XGET ‘<a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search&#39;</a> -d ‘<br>{<br>    “query”: {<br>        “multi_match”: {<br>            “query”: “search engine”,<br>            “fields”: [<br>                “title”,<br>                “summary”<br>            ],<br>            “type”: “phrase”,<br>            “slop”: 3<br>        }<br>    },<br>    “_source”: [<br>        “title”,<br>        “summary”,<br>        “publish_date”<br>    ]<br>}’</p><p>从上面的例子可以看出，id为4的document被搜索（summary字段里面精确匹配到了search engine），并且分数比较高；而id为1的document也被搜索到了，虽然其summary中的search和engine单词并不是紧挨着的，但是我们指定了slop属性，所以被搜索到了。如果我们将”slop”: 3条件删除，那么id为1的文档将不会被搜索到，如下：</p><p>十、Simple Query String(简单查询字符串)<br>simple_query_string是query_string的另一种版本，其更适合为用户提供一个搜索框中，因为其使用+/|/- 分别替换AND/OR/NOT，如果用输入了错误的查询，其直接忽略这种情况而不是抛出异常。使用如下：(注意是POST)<br>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “simple_query_string” : {<br>            “query”: “(saerch~1 algorithm~1) + (grant ingersoll)  | (tom morton)”,<br>            “fields”: [“_all”, “summary^2”]<br>        }<br>    },<br>    “_source”: [ “title”, “summary”, “authors” ],<br>    “highlight”: {<br>        “fields” : {<br>            “summary” : {}<br>        }<br>    }<br>}</p><p>十一、Term/Terms Query<br>前面的例子中我们已经介绍了全文搜索(full-text search)，但有时候我们对结构化搜索中能够精确匹配并返回搜索结果更感兴趣。这种情况下我们可以使用term和terms查询。在下面例子中，我们想搜索所有曼宁出版社(Manning Publications)出版的图书：</p><p>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a> -d ‘<br>{<br>    “query”: {<br>        “term” : {<br>            “publisher”: “manning”<br>        }<br>    },<br>    “_source” : [“title”,”publish_date”,”publisher”]<br>}’</p><p>还可以使用terms关键字来指定多个terms，如下：</p><p>{<br>    “query”: {<br>        “terms” : {<br>            “publisher”: [“oreilly”, “packt”]<br>        }<br>    }<br>}</p><p>十二、Term Query - Sorted<br>词查询结果和其他查询结果一样可以很容易地对其进行排序，而且我们可以对输出结果按照多层进行排序：<br>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “term” : {<br>            “publisher”: “manning”<br>        }<br>    },<br>    “_source” : [“title”,”publish_date”,”publisher”],<br>    “sort”: [<br>        { “publish_date”: {“order”:”desc”}},<br>        { “title”: { “order”: “desc” }}<br>    ]<br>}</p><p>执行提示：<br>Fielddata is disabled on text fields by default. Set fielddata=true on [title] in order to load fielddata in memory by uninverting the inverted index</p><p>应该是5.x后对排序，聚合这些操作用单独的数据结构(fielddata)缓存到内存里了，需要单独开启</p><p>PUT /iteblog_book_index/_mapping/book<br>{<br>  “properties”: {<br>    “title”: {<br>      “type”: “text”,<br>      “fielddata”: true<br>    }<br>  }<br>}</p><p>再次执行：</p><p>十三、Range Query(范围查询)<br>另一种结构化查询就是范围查询。在下面例子中，我们搜索所有发行年份为2015的图书：<br>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “range” : {<br>            “publish_date”: {<br>                “gte”: “2015-01-01”,<br>                “lte”: “2015-12-31”<br>            }<br>        }<br>    },<br>    “_source” : [“title”,”publish_date”,”publisher”]<br>}</p><p>十四、Filtered Query(过滤查询)<br>过滤查询允许我们对查询结果进行筛选。比如：我们查询标题和摘要中包含Elasticsearch关键字的图书，但是我们想过滤出评论大于20的结果，可以如下使用：</p><p>curl POST <a href="https://www.iteblog.com:9200/iteblog_book_index/book/_search" target="_blank" rel="noopener">https://www.iteblog.com:9200/iteblog_book_index/book/_search</a><br>{<br>    “query”: {<br>        “filtered”: {<br>            “query” : {<br>                “multi_match”: {<br>                    “query”: “elasticsearch”,<br>                    “fields”: [“title”,”summary”]<br>                }<br>            },<br>            “filter”: {<br>                “range” : {<br>                    “num_reviews”: {<br>                        “gte”: 20<br>                    }<br>                }<br>            }<br>        }<br>    },<br>    “_source” : [“title”,”summary”,”publisher”, “num_reviews”]<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、新建索引&quot;&gt;&lt;a href=&quot;#一、新建索引&quot; class=&quot;headerlink&quot; title=&quot;一、新建索引&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#一、新建索引&quot; title=&quot;一、新建索引&quot;&gt;&lt;/a&gt;一、新建索引&lt;/h2&gt;&lt;p&gt;为了展示Elasticsearch
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch 索引查询使用指南</title>
    <link href="http://chucz.club/2018/08/19/ElasticSearch-%E7%B4%A2%E5%BC%95%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://chucz.club/2018/08/19/ElasticSearch-索引查询使用指南/</id>
    <published>2018-08-19T01:56:47.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<p>1.我们通常用用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html" target="_blank" rel="noopener">_cat API</a>检测集群是否健康。 确保9200端口号可用:<br>curl ‘localhost:9200/_cat/health?v’</p><p>绿色表示一切正常, 黄色表示所有的数据可用但是部分副本还没有分配,红色表示部分数据因为某些原因不可用.</p><p>2.通过如下语句，我们可以获取集群的节点列表：<br>curl ‘localhost:9200/_cat/nodes?v’</p><p>3.通过如下语句，列出所有索引：<br>curl ‘localhost:9200/_cat/indices?v’<br>返回结果：</p><p><img src="http://cos.leiyawu.com/img/elk_index_check_1.png" alt="图1"> 　　</p><p>4.创建索引<br>现在我们创建一个名为“customer”的索引，然后再查看所有的索引：<br> curl -XPUT ‘localhost:9200/customer?pretty’<br> curl ‘localhost:9200/_cat/indices?v’</p><p>结果如下：</p><p><img src="http://cos.leiyawu.com/img/elk_index_check_2.png" alt="图2"></p><p><img src="http://cos.leiyawu.com/img/elk_index_check_3.png" alt="图3"></p><p>上图中红框所表示的是：我们有一个叫customer的索引，它有五个私有的分片以及一个副本，在它里面有0个文档。<br><a id="more"></a></p><p>5.插入和获取<br>现在我么插入一些数据到集群索引。我们必须给ES指定所以的类型。如下语句：”external” type, ID：1:<br>主体为JSON格式的语句： { “name”: “John Doe” }</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT <span class="string">‘localhost:9200/customer/external/1?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">     　　  “</span>name<span class="string">“: “</span>John Doe<span class="string">“</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>返回结果为：create：true 表示插入成功。<br><img src="http://cos.leiyawu.com/img/elk_index_check_4.png" alt="图4"></p><p>获取GET，语句如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET ‘localhost:<span class="number">9200</span>/customer/external/1?pretty’</span><br></pre></td></tr></table></figure><p>其中含义为：获取customer索引下类型为external，id为1的数据，pretty参数表示返回结果格式美观。</p><p><img src="http://cos.leiyawu.com/img/elk_index_check_5.png" alt="图5"></p><p>6.删除索引 DELETE</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE ‘localhost:<span class="number">9200</span>/customer?pretty’</span><br><span class="line">curl ‘localhost:<span class="number">9200</span>/_cat/indices?v’</span><br></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_6.png" alt="图6"></p><p>表示索引删除成功。</p><p>7.通过以上命令语句的学习，我们发现索引的增删改查有一个类似的格式，总结如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -X&lt;REST Verb&gt; &lt;Node&gt;<span class="symbol">:&lt;Port&gt;/&lt;Index&gt;/&lt;Type&gt;/&lt;ID&gt;</span></span><br><span class="line">&lt;REST Verb&gt;：REST风格的语法谓词</span><br><span class="line">&lt;Node&gt;<span class="symbol">:</span>节点ip</span><br><span class="line">&lt;port&gt;<span class="symbol">:</span>节点端口号，默认<span class="number">9200</span></span><br><span class="line">&lt;Index&gt;<span class="symbol">:</span>索引名</span><br><span class="line">&lt;Type&gt;<span class="symbol">:</span>索引类型</span><br><span class="line">&lt;ID&gt;<span class="symbol">:</span>操作对象的ID号</span><br></pre></td></tr></table></figure><p>8 修改数据</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT <span class="string">‘localhost:9200/customer/external/1?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>name<span class="string">“: “</span>John Doe<span class="string">“</span></span><br><span class="line"><span class="string">&#125;’</span></span><br><span class="line">curl -XPUT <span class="string">‘localhost:9200/customer/external/1?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>name<span class="string">“: “</span>Jane Doe<span class="string">“</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>上述命令语句是：先新增id为1，name为John Doe的数据，然后将id为1的name修改为Jane Doe。</p><p>9.更新数据<br>9.1 这个例子展示如何将id为1文档的name字段更新为Jane Doe：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/customer/external/1/_update?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>doc<span class="string">“: &#123; “</span>name<span class="string">“: “</span>Jane Doe<span class="string">“ &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>9.2 这个例子展示如何将id为1数据的name字段更新为Jane Doe同时增加字段age为20:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/customer/external/1/_update?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>doc<span class="string">“: &#123; “</span>name<span class="string">“: “</span>Jane Doe<span class="string">“, “</span>age<span class="string">“: 20 &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>9.3  也可以通过一些简单的scripts来执行更新。一下语句通过使用script将年龄增加5:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/customer/external/1/_update?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>script<span class="string">“ : “</span>ctx._source.age += <span class="number">5</span><span class="string">“</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>10 删除数据<br>删除数据那是相当的直接. 下面的语句将执行删除Customer中ID为2的数据：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE ‘localhost:<span class="number">9200</span>/customer/external/2?pretty’</span><br></pre></td></tr></table></figure><p>11 批处理<br>举例:<br>下面语句将在一个批量操作中执行创建索引：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/customer/external/_bulk?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;”</span>index<span class="string">“:&#123;”</span>_id<span class="string">“:”</span><span class="number">1</span><span class="string">“&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;”</span>name<span class="string">“: “</span>John Doe<span class="string">“ &#125;</span></span><br><span class="line"><span class="string">&#123;”</span>index<span class="string">“:&#123;”</span>_id<span class="string">“:”</span><span class="number">2</span><span class="string">“&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;”</span>name<span class="string">“: “</span>Jane Doe<span class="string">“ &#125;</span></span><br><span class="line"><span class="string">‘</span></span><br></pre></td></tr></table></figure><p>下面语句批处理执行更新id为1的数据然后执行删除id为2的数据</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/customer/external/_bulk?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;”</span>update<span class="string">“:&#123;”</span>_id<span class="string">“:”</span><span class="number">1</span><span class="string">“&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;”</span>doc<span class="string">“: &#123; “</span>name<span class="string">“: “</span>John Doe becomes Jane Doe<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">&#123;”</span>delete<span class="string">“:&#123;”</span>_id<span class="string">“:”</span><span class="number">2</span><span class="string">“&#125;&#125;</span></span><br><span class="line"><span class="string">‘</span></span><br></pre></td></tr></table></figure><p>12.导入数据集<br>你可以点击这里下载示例数据集:accounts.json<br>其中每个数据都是如下格式:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   　　  <span class="attr">“index”</span>:&#123;<span class="attr">“_id”</span>:<span class="string">“1”</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">“account_number”</span>: <span class="number">0</span>,</span><br><span class="line">  　 <span class="attr">“balance”</span>: <span class="number">16623</span>,</span><br><span class="line"> 　  <span class="attr">“firstname”</span>: <span class="string">“Bradshaw”</span>,</span><br><span class="line">  　 <span class="attr">“lastname”</span>: <span class="string">“Mckenzie”</span>,</span><br><span class="line">  　 <span class="attr">“age”</span>: <span class="number">29</span>,</span><br><span class="line">  　 <span class="attr">“gender”</span>: <span class="string">“F”</span>,</span><br><span class="line">    <span class="attr">“address”</span>: <span class="string">“244 Columbus Place”</span>,</span><br><span class="line"> 　  <span class="attr">“employer”</span>: <span class="string">“Euron”</span>,</span><br><span class="line">  　 <span class="attr">“email”</span>: <span class="string">“<a href="mailto:bradshawmckenzie@euron.com" target="_blank" rel="noopener">bradshawmckenzie@euron.com</a>“</span>,</span><br><span class="line">  　 <span class="attr">“city”</span>: <span class="string">“Hobucken”</span>,</span><br><span class="line">  　 <span class="attr">“state”</span>: <span class="string">“CO”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入示例数据集:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST ‘localhost:<span class="number">9200</span>/bank/account/_bulk?pretty’ –data-binary <span class="string">“@accounts.json”</span></span><br><span class="line">curl ‘localhost:<span class="number">9200</span>/_cat/indices?v’</span><br></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_7.png" alt="图7"></p><p>上图红框表示我们已经成功批量导入1000条数据索引到bank索引中。</p><p>13.查询<br>Sample:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="symbol">‘localhost</span>:<span class="number">9200</span>/bank/_search?q=*&amp;pretty’</span><br><span class="line">&#123;</span><br><span class="line">　　  <span class="string">“took”</span> : 63,</span><br><span class="line"> 　　 <span class="string">“timed_out”</span> : <span class="type">false</span>,</span><br><span class="line"> 　　 <span class="string">“_shards”</span> : &#123;</span><br><span class="line">    <span class="string">“total”</span> : 5,</span><br><span class="line">    <span class="string">“successful”</span> : 5,</span><br><span class="line">    <span class="string">“failed”</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“hits”</span> : &#123;</span><br><span class="line">  <span class="string">“total”</span> : 1000,</span><br><span class="line">  <span class="string">“max_score”</span> : 1.0,</span><br><span class="line">  <span class="string">“hits”</span> : [ &#123;</span><br><span class="line">    <span class="string">“_index”</span> : “<span class="type">bank</span><span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>_type<span class="string">“ : “</span>account<span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>_id<span class="string">“ : “</span><span class="number">1</span><span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>_score<span class="string">“ : 1.0, “</span>_source<span class="string">“ : &#123;”</span>account_number<span class="string">“:1,”</span>balance<span class="string">“:39225,”</span>firstname<span class="string">“:”</span>Amber<span class="string">“,”</span>lastname<span class="string">“:”</span>Duke<span class="string">“,”</span>age<span class="string">“:32,”</span>gender<span class="string">“:”</span>M<span class="string">“,”</span>address<span class="string">“:”</span><span class="number">880</span> Holmes Lane<span class="string">“,”</span>employer<span class="string">“:”</span>Pyrami<span class="string">“,”</span>email<span class="string">“:”</span><a href="mailto:amberduke@pyrami.com" target="_blank" rel="noopener">amberduke@pyrami.com</a><span class="string">“,”</span>city<span class="string">“:”</span>Brogan<span class="string">“,”</span>state<span class="string">“:”</span>IL<span class="string">“&#125;</span></span><br><span class="line"><span class="string">  &#125;, &#123;</span></span><br><span class="line"><span class="string">    “</span>_index<span class="string">“ : “</span>bank<span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>_type<span class="string">“ : “</span>account<span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>_id<span class="string">“ : “</span><span class="number">6</span><span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>_score<span class="string">“ : 1.0, “</span>_source<span class="string">“ : &#123;”</span>account_number<span class="string">“:6,”</span>balance<span class="string">“:5686,”</span>firstname<span class="string">“:”</span>Hattie<span class="string">“,”</span>lastname<span class="string">“:”</span>Bond<span class="string">“,”</span>age<span class="string">“:36,”</span>gender<span class="string">“:”</span>M<span class="string">“,”</span>address<span class="string">“:”</span><span class="number">671</span> Bristol Street<span class="string">“,”</span>employer<span class="string">“:”</span>Netagy<span class="string">“,”</span>email<span class="string">“:”</span><a href="mailto:hattiebond@netagy.com" target="_blank" rel="noopener">hattiebond@netagy.com</a><span class="string">“,”</span>city<span class="string">“:”</span>Dante<span class="string">“,”</span>state<span class="string">“:”</span>TN<span class="string">“&#125;</span></span><br><span class="line"><span class="string">  &#125;, &#123;</span></span><br><span class="line"><span class="string">    “</span>_index<span class="string">“ : “</span>bank<span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>_type<span class="string">“ : “</span>account<span class="string">“,</span></span><br></pre></td></tr></table></figure><p>上面示例返回所有bank中的索引数据。其中 q=*  表示匹配索引中所有的数据。</p><p>等价于:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123; “</span>match_all<span class="string">“: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>14 查询语言</p><p>匹配所有数据，但只返回1个:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> 　“</span>query<span class="string">“: &#123; “</span>match_all<span class="string">“: &#123;&#125; &#125;,</span></span><br><span class="line"><span class="string">  “</span><span class="built_in">size</span><span class="string">“: 1</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>注意：如果siez不指定，则默认返回10条数据。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> 　“</span>query<span class="string">“: &#123; “</span>match_all<span class="string">“: &#123;&#125; &#125;,</span></span><br><span class="line"><span class="string">  “</span>from<span class="string">“: 10,</span></span><br><span class="line"><span class="string">  “</span><span class="built_in">size</span><span class="string">“: 10</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>返回从11到20的数据。（索引下标从0开始）</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123; “</span>match_all<span class="string">“: &#123;&#125; &#125;,</span></span><br><span class="line"><span class="string"> 　“</span>sort<span class="string">“: &#123; “</span>balance<span class="string">“: &#123; “</span>order<span class="string">“: “</span>desc<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>上述示例匹配所有的索引中的数据，按照balance字段降序排序，并且返回前10条（如果不指定size，默认最多返回10条）。</p><p>15.执行搜索</p><p>下面例子展示如何返回两个字段（account_number balance）</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123; “</span>match_all<span class="string">“: &#123;&#125; &#125;,</span></span><br><span class="line"><span class="string">  “</span>_source<span class="string">“: [“</span>account_number<span class="string">“, “</span>balance<span class="string">“]</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_8.png" alt="图8"></p><p>返回account_number 为20 的数据:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123; “</span>match<span class="string">“: &#123; “</span>account_number<span class="string">“: 20 &#125; &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>返回address中包含mill的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>mill<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>返回地址中包含mill或者lane的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> 　“</span>query<span class="string">“: &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>mill lane<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>和上面匹配单个词语不同，下面这个例子是多匹配（match_phrase短语匹配），返回地址中包含短语 “mill lane”的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123; “</span>match_phrase<span class="string">“: &#123; “</span>address<span class="string">“: “</span>mill lane<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>以下是布尔查询，布尔查询允许我们将多个简单的查询组合成一个更复杂的布尔逻辑查询。<br>这个例子将两个查询组合，返回地址中含有mill和lane的所有记录数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">    “</span>bool<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　　  “</span>must<span class="string">“: [</span></span><br><span class="line"><span class="string">   　　   &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>mill<span class="string">“ &#125; &#125;,</span></span><br><span class="line"><span class="string">   　　   &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>lane<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">  　　  ]</span></span><br><span class="line"><span class="string">  　　&#125;</span></span><br><span class="line"><span class="string"> 　&#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>上述例子中，must表示所有查询必须都为真才被认为匹配。</p><p>相反, 这个例子组合两个查询，返回地址中含有mill或者lane的所有记录数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> 　“</span>query<span class="string">“: &#123;</span></span><br><span class="line"><span class="string"> 　  “</span>bool<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　　  “</span>should<span class="string">“: [</span></span><br><span class="line"><span class="string">   　　   &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>mill<span class="string">“ &#125; &#125;,</span></span><br><span class="line"><span class="string">    　　  &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>lane<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">   　　 ]</span></span><br><span class="line"><span class="string">  　 &#125;</span></span><br><span class="line"><span class="string"> 　&#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>上述例子中，bool表示查询列表中只要有任何一个为真则认为匹配。</p><p>下面例子组合两个查询，返回地址中既没有mill也没有lane的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123;</span></span><br><span class="line"><span class="string"> 　  “</span>bool<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　　  “</span>must_not<span class="string">“: [</span></span><br><span class="line"><span class="string">    　　  &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>mill<span class="string">“ &#125; &#125;,</span></span><br><span class="line"><span class="string">     　　 &#123; “</span>match<span class="string">“: &#123; “</span>address<span class="string">“: “</span>lane<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">    　　]</span></span><br><span class="line"><span class="string">  　　&#125;</span></span><br><span class="line"><span class="string"> 　&#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>上述例子中,must_not表示查询列表中没有为真的（也就是全为假）时则认为匹配。</p><p>我们可以组合must、should、must_not来实现更加复杂的多级逻辑查询。</p><p>下面这个例子返回年龄大于40岁、不居住在ID的所有数据：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  “</span>query<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　 “</span>bool<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　　  “</span>must<span class="string">“: [</span></span><br><span class="line"><span class="string">     　　 &#123; “</span>match<span class="string">“: &#123; “</span>age<span class="string">“: “</span><span class="number">40</span><span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">   　　 ],</span></span><br><span class="line"><span class="string">   　　 “</span>must_not<span class="string">“: [</span></span><br><span class="line"><span class="string">     　　 &#123; “</span>match<span class="string">“: &#123; “</span>state<span class="string">“: “</span>ID<span class="string">“ &#125; &#125;</span></span><br><span class="line"><span class="string">    　　]</span></span><br><span class="line"><span class="string">  　　&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>16.过滤filter(查询条件设置)</p><p>下面这个例子使用了布尔查询返回balance在20000到30000之间的所有数据。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">　　  “</span>query<span class="string">“: &#123;</span></span><br><span class="line"><span class="string"> 　　　  “</span>bool<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　　　　  “</span>must<span class="string">“: &#123; “</span>match_all<span class="string">“: &#123;&#125; &#125;,</span></span><br><span class="line"><span class="string">   　　　　 “</span>filter<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">      　　　　“</span>range<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">        　　“</span>balance<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">        　　  “</span>gte<span class="string">“: 20000,</span></span><br><span class="line"><span class="string">         　　 “</span>lte<span class="string">“: 30000</span></span><br><span class="line"><span class="string">       　　 &#125;</span></span><br><span class="line"><span class="string">     　　 &#125;</span></span><br><span class="line"><span class="string">   　　 &#125;</span></span><br><span class="line"><span class="string">  　 &#125;</span></span><br><span class="line"><span class="string"> 　&#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>17 聚合 Aggregations<br>下面这个例子： 将所有的数据按照state分组（group），然后按照分组记录数从大到小排序，返回前十条（默认）：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> 　“</span><span class="built_in">size</span><span class="string">“: 0,</span></span><br><span class="line"><span class="string">  “</span>aggs<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　 “</span>group_by_state<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　　  “</span>terms<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">   　　　   “</span>field<span class="string">“: “</span>state<span class="string">“</span></span><br><span class="line"><span class="string">  　　  &#125;</span></span><br><span class="line"><span class="string">  　 &#125;</span></span><br><span class="line"><span class="string"> 　&#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p>注意：我们设置size=0，不显示查询hits，因为我们只想看返回的聚合结果。<br><img src="http://cos.leiyawu.com/img/elk_index_check_9.png" alt="图9"></p><p><img src="http://cos.leiyawu.com/img/elk_index_check_10.png" alt="图10"></p><p>上述语句类似于以下SQL语句：<br>SELECT state, COUNT(<em>) FROM bank GROUP BY state ORDER BY COUNT(</em>) DESC</p><p>下面这个实例按照state分组，降序排序，返回balance的平均值：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">‘localhost:9200/bank/_search?pretty’</span> -d <span class="string">‘</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> 　“</span><span class="built_in">size</span><span class="string">“: 0,</span></span><br><span class="line"><span class="string"> 　“</span>aggs<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　 “</span>group_by_state<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">  　　  “</span>terms<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">     　　 “</span>field<span class="string">“: “</span>state<span class="string">“</span></span><br><span class="line"><span class="string">   　　 &#125;,</span></span><br><span class="line"><span class="string">  　　  “</span>aggs<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">     　　 “</span>average_balance<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">      　　  “</span>avg<span class="string">“: &#123;</span></span><br><span class="line"><span class="string">       　　   “</span>field<span class="string">“: “</span>balance<span class="string">“</span></span><br><span class="line"><span class="string">       　　 &#125;</span></span><br><span class="line"><span class="string">     　　 &#125;</span></span><br><span class="line"><span class="string">   　　 &#125;</span></span><br><span class="line"><span class="string">  　　&#125;</span></span><br><span class="line"><span class="string"> 　&#125;</span></span><br><span class="line"><span class="string">&#125;’</span></span><br></pre></td></tr></table></figure><p><img src="http://cos.leiyawu.com/img/elk_index_check_11.png" alt="图11"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.我们通常用用&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;_cat API&lt;/a&gt;检测集
      
    
    </summary>
    
    
      <category term="ELK" scheme="http://chucz.club/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>ES内置账号密码修改、自定义角色自定义账号、ldap及AD认证</title>
    <link href="http://chucz.club/2018/08/19/ES%E5%86%85%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%92%E8%89%B2%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%A6%E5%8F%B7%E3%80%81ldap%E5%8F%8AAD%E8%AE%A4%E8%AF%81/"/>
    <id>http://chucz.club/2018/08/19/ES内置账号密码修改、自定义角色自定义账号、ldap及AD认证/</id>
    <published>2018-08-19T01:55:58.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义内置账号"><a href="#自定义内置账号" class="headerlink" title="自定义内置账号"></a><a href="#自定义内置账号" title="自定义内置账号"></a>自定义内置账号</h2><ul><li>账户elastic为elasticsearch超级管理员，拥有所有权限</li><li>账户kibana用于kibana组件获取相关信息用于web展示</li><li>账户logstash_system用于logstash服务获取elasticsearch的监控数据</li><li>注意：此步骤需先启动elasticsearch服务</li></ul><p><img src="https://cos.leiyawu.com/img/elk/es_user.png" alt="es_user"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-6.0.0]$ ./bin/x-pack/setup-passwords interactive</span><br><span class="line">Initiating the setup of reserved<span class="built_in"> user </span>elastic,kibana,logstash_system passwords.</span><br><span class="line">You will be prompted <span class="keyword">to</span> enter passwords as the process progresses.</span><br><span class="line">Please confirm that you would like <span class="keyword">to</span> continue [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enter password <span class="keyword">for</span> [elastic]: </span><br><span class="line">Reenter password <span class="keyword">for</span> [elastic]: </span><br><span class="line">Enter password <span class="keyword">for</span> [kibana]: </span><br><span class="line">Reenter password <span class="keyword">for</span> [kibana]: </span><br><span class="line">Enter password <span class="keyword">for</span> [logstash_system]: </span><br><span class="line">Reenter password <span class="keyword">for</span> [logstash_system]: </span><br><span class="line">Changed password <span class="keyword">for</span><span class="built_in"> user </span>[kibana]</span><br><span class="line">Changed password <span class="keyword">for</span><span class="built_in"> user </span>[logstash_system]</span><br><span class="line">Changed password <span class="keyword">for</span><span class="built_in"> user </span>[elastic]</span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-6.0.0]$</span><br></pre></td></tr></table></figure><h2 id="验证内置账户访问"><a href="#验证内置账户访问" class="headerlink" title="验证内置账户访问"></a><a href="#验证内置账户访问" title="验证内置账户访问"></a>验证内置账户访问</h2><ul><li><p>若不提供用户名密码则返回401<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ curl <span class="string">‘<a href="http://10.59.30.96:9200/_cat/indices?pretty&#39;" target="_blank" rel="noopener">http://10.59.30.96:9200/_cat/indices?pretty&#39;</a></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“error”</span> : &#123;</span><br><span class="line">    <span class="string">“root_cause”</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">“type”</span> : <span class="string">“security_exception”</span>,</span><br><span class="line">        <span class="string">“reason”</span> : <span class="string">“missing authentication token for REST request [/_cat/indices?pretty]”</span>,</span><br><span class="line">        <span class="string">“header”</span> : &#123;</span><br><span class="line">          <span class="string">“WWW-Authenticate”</span> : <span class="string">“Basic realm=\”</span>security\<span class="string">“ charset=\”</span>UTF-<span class="number">8</span>\<span class="string">“”</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“type”</span> : <span class="string">“security_exception”</span>,</span><br><span class="line">    <span class="string">“reason”</span> : <span class="string">“missing authentication token for REST request [/_cat/indices?pretty]”</span>,</span><br><span class="line">    <span class="string">“header”</span> : &#123;</span><br><span class="line">      <span class="string">“WWW-Authenticate”</span> : <span class="string">“Basic realm=\”</span>security\<span class="string">“ charset=\”</span>UTF-<span class="number">8</span>\<span class="string">“”</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“status”</span> : <span class="number">401</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>提供相应用户信息后可访问，若用户权限不足则返回403</p></li></ul><p>使用logstash_system用户访问<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ curl <span class="symbol">‘http</span>://<span class="number">10.59</span>.<span class="number">30.96</span>:<span class="number">9200</span>/_cat/indices?pretty’ -u logstash_system:logstash_system</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“error”</span> : &#123;</span><br><span class="line">    <span class="string">“root_cause”</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">“type”</span> : “<span class="type">security_exception</span><span class="string">“,</span></span><br><span class="line"><span class="string">        “</span>reason<span class="string">“ : “</span>action [indices:monitor/stats] <span class="keyword">is</span> unauthorized <span class="keyword">for</span> user [logstash_system]<span class="string">“</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    “</span><span class="keyword">type</span><span class="string">“ : “</span>security_exception<span class="string">“,</span></span><br><span class="line"><span class="string">    “</span>reason<span class="string">“ : “</span>action [indices:monitor/stats] <span class="keyword">is</span> unauthorized <span class="keyword">for</span> user [logstash_system]<span class="string">“</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  “</span>status<span class="string">“ : 403</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">[elasticsearch@elasticsearch elasticsearch-6.0.0]$</span></span><br></pre></td></tr></table></figure></p><ul><li>使用kibana用户访问<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ curl <span class="string">‘<a href="http://10.59.30.96:9200/_cat/indices?pretty&#39;" target="_blank" rel="noopener">http://10.59.30.96:9200/_cat/indices?pretty&#39;</a></span> -u kibana:kibana</span><br><span class="line">yellow open <span class="selector-class">.monitoring-es-6-2018</span>.<span class="number">01.10</span>   nND6-i_rR5iLEYVccBGj8w <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">yellow open <span class="selector-class">.triggered_watches</span>            BtygGZisSDqiL3Y2TaQGqQ <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">green  open <span class="selector-class">.security-6</span>                   QVRL1mcFSAilryHGEhen7Q <span class="number">1</span> <span class="number">0</span>    </span><br><span class="line">yellow open <span class="selector-class">.watcher-history-6-2018</span>.<span class="number">01.10</span> SBGiHDAnTPiXFoHU65VY_g <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">yellow open <span class="selector-class">.watches</span>                      kMzN4j5cQySZQQSDVPww8w <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">yellow open <span class="selector-class">.monitoring-alerts-6</span>          VygY6VN9R3S0PR_jrGy50Q <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><h2 id="添加自定义角色"><a href="#添加自定义角色" class="headerlink" title="添加自定义角色"></a><a href="#添加自定义角色" title="添加自定义角色"></a>添加自定义角色</h2><ul><li>添加角色接口为 POST /_xpack/security/role/<rolename></rolename></li></ul><p>下述示例为添加超级管理员角色的方法<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ curl -XPOST -H <span class="symbol">‘Content</span>-<span class="keyword">type</span>: application/json’ -u elastic:elastic <span class="symbol">‘http</span>://<span class="number">10.59</span>.<span class="number">30.96</span>:<span class="number">9200</span>/_xpack/security/role/admin?pretty’ -d ‘&#123;</span><br><span class="line">&gt;   <span class="string">“run_as”</span>: [ <span class="string">“elastic”</span> ],</span><br><span class="line">&gt;   <span class="string">“cluster”</span>: [ <span class="string">“all”</span> ],</span><br><span class="line">&gt;   <span class="string">“indices”</span>: [</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;       <span class="string">“names”</span>: [ <span class="string">“<em>“</em></span> ],</span><br><span class="line">&gt;       <span class="string">“privileges”</span>: [ <span class="string">“all”</span> ]</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   ]</span><br><span class="line">&gt; &#125;’</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“role”</span> : &#123;</span><br><span class="line">    <span class="string">“created”</span> : <span class="type">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ curl -XGET -H <span class="symbol">‘Content</span>-<span class="keyword">type</span>: application/json’ -u elastic:elastic <span class="symbol">‘http</span>://<span class="number">10.59</span>.<span class="number">30.96</span>:<span class="number">9200</span>/_xpack/security/role/admin?pretty’</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“admin”</span> : &#123;</span><br><span class="line">    <span class="string">“cluster”</span> : [</span><br><span class="line">      <span class="string">“all”</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“indices”</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">“names”</span> : [</span><br><span class="line">          <span class="string">““</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">“privileges”</span> : [</span><br><span class="line">          <span class="string">“all”</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“run_as”</span> : [</span><br><span class="line">      <span class="string">“elastic”</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“metadata”</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">“transient_metadata”</span> : &#123;</span><br><span class="line">      <span class="string">“enabled”</span> : <span class="type">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$</span><br></pre></td></tr></table></figure></p><h2 id="添加自定义账户"><a href="#添加自定义账户" class="headerlink" title="添加自定义账户"></a><a href="#添加自定义账户" title="添加自定义账户"></a>添加自定义账户</h2><ul><li>添加用户接口为 POST /_xpack/security/user/<username></username></li></ul><p>下述为添加martin账户并添加至admin角色操作方法<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl -<span class="type">XPOST</span> -<span class="type">H</span> <span class="symbol">‘Content</span>-<span class="class"><span class="keyword">type</span></span>: application/json’ -u elastic:elastic <span class="symbol">‘http</span>:<span class="comment">//10.59.30.96:9200/_xpack/security/user/martin?pretty’ -d ‘&#123;</span></span><br><span class="line">&gt;   <span class="string">“password”</span> : <span class="string">“123456”</span>,</span><br><span class="line">&gt;   <span class="string">“full_name”</span> : <span class="string">“Martin Lei”</span>,</span><br><span class="line">&gt;   <span class="string">“roles”</span> : [<span class="string">“admin”</span>],</span><br><span class="line">&gt;   <span class="string">“email”</span> : <span class="string">“<a href="mailto:martin@martin.com" target="_blank" rel="noopener">martin@martin.com</a>“</span></span><br><span class="line">&gt; &#125;’</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“user”</span> : &#123;</span><br><span class="line">    <span class="string">“created”</span> : <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl -<span class="type">XGET</span> -<span class="type">H</span> <span class="symbol">‘Content</span>-<span class="class"><span class="keyword">type</span></span>: application/json’ -u elastic:elastic <span class="symbol">‘http</span>:<span class="comment">//10.59.30.96:9200/_xpack/security/user/martin?pretty’</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“rocshen”</span> : &#123;</span><br><span class="line">    <span class="string">“username”</span> : <span class="string">“martin”</span>,</span><br><span class="line">    <span class="string">“roles”</span> : [</span><br><span class="line">      <span class="string">“admin”</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“full_name”</span> : <span class="string">“Martin Lei”</span>,</span><br><span class="line">    <span class="string">“email”</span> : <span class="string">“<a href="mailto:martin@martin.com" target="_blank" rel="noopener">martin@martin.com</a>“</span>,</span><br><span class="line">    <span class="string">“metadata”</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">“enabled”</span> : <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl -<span class="type">XGET</span> -<span class="type">H</span> <span class="symbol">‘Content</span>-<span class="class"><span class="keyword">type</span></span>: application/json’ -u martin:<span class="number">123456</span> <span class="symbol">‘http</span>:<span class="comment">//10.59.30.96:9200/_cat/indices?pretty’</span></span><br><span class="line">yellow open .monitoring-es<span class="number">-6</span><span class="number">-2018.01</span><span class="number">.10</span>   nND6-i_rR5iLEYVccBGj8w <span class="number">1</span> <span class="number">1</span> <span class="number">4883</span> <span class="number">88</span>   <span class="number">2.5</span>mb   <span class="number">2.5</span>mb</span><br><span class="line">yellow open .triggered_watches            <span class="type">BtygGZisSDqiL3Y2TaQGqQ</span> <span class="number">1</span> <span class="number">1</span>    <span class="number">0</span>  <span class="number">0</span>  <span class="number">24.2</span>kb  <span class="number">24.2</span>kb</span><br><span class="line">green  open .security<span class="number">-6</span>                   <span class="type">QVRL1mcFSAilryHGEhen7Q</span> <span class="number">1</span> <span class="number">0</span>                        </span><br><span class="line">yellow open .watcher-history<span class="number">-6</span><span class="number">-2018.01</span><span class="number">.10</span> <span class="type">SBGiHDAnTPiXFoHU65VY_g</span> <span class="number">1</span> <span class="number">1</span>  <span class="number">630</span>  <span class="number">0</span> <span class="number">703.3</span>kb <span class="number">703.3</span>kb</span><br><span class="line">yellow open .watches                      kMzN4j5cQySZQQSDVPww8w <span class="number">1</span> <span class="number">1</span>    <span class="number">5</span>  <span class="number">0</span>  <span class="number">33.3</span>kb  <span class="number">33.3</span>kb</span><br><span class="line">yellow open .monitoring-alerts<span class="number">-6</span>          <span class="type">VygY6VN9R3S0PR_jrGy50Q</span> <span class="number">1</span> <span class="number">1</span>    <span class="number">1</span>  <span class="number">0</span>   <span class="number">6.5</span>kb   <span class="number">6.5</span>kb</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$</span><br></pre></td></tr></table></figure></p><h2 id="修改账户密码"><a href="#修改账户密码" class="headerlink" title="修改账户密码"></a><a href="#修改账户密码" title="修改账户密码"></a>修改账户密码</h2><ol><li>修改密码需使用超级管理员权限即elastic账户，接口为POST _xpack/security/user/<username>/_password</username></li></ol><p>curl参数含义如下</p><ul><li>-XPOST 使用post方法传递参数</li><li>-H 指定http协议的header信息</li><li>-u 指定用于认证的用户信息用户名与密码使用冒号分隔</li><li>-d 指定具体要传递的参数信息<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl -<span class="type">XPOST</span> -<span class="type">H</span> <span class="symbol">‘Content</span>-<span class="class"><span class="keyword">type</span></span>: application/json’ -u elastic:elastic <span class="symbol">‘http</span>:<span class="comment">//10.59.30.96:9200/_xpack/security/user/kibana/_password?pretty’ -d ‘&#123;”password”: “123456”&#125;’</span></span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>密码修改后使用老密码访问则返回401，使用更新后的密码则正常<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.0]$ curl ‘http:<span class="comment">//10.59.30.96:9200/_cat/indices?pretty’ -u kibana:kibana</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“error”</span> : &#123;</span><br><span class="line">    <span class="string">“root_cause”</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">“type”</span> : <span class="string">“security_exception”</span>,</span><br><span class="line">        <span class="string">“reason”</span> : <span class="string">“failed to authenticate user [kibana]”</span>,</span><br><span class="line">        <span class="string">“header”</span> : &#123;</span><br><span class="line">          <span class="string">“WWW-Authenticate”</span> : <span class="string">“Basic realm=\”</span>security\<span class="string">“ charset=\”</span>UTF-<span class="number">8</span>\<span class="string">“”</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“type”</span> : <span class="string">“security_exception”</span>,</span><br><span class="line">    <span class="string">“reason”</span> : <span class="string">“failed to authenticate user [kibana]”</span>,</span><br><span class="line">    <span class="string">“header”</span> : &#123;</span><br><span class="line">      <span class="string">“WWW-Authenticate”</span> : <span class="string">“Basic realm=\”</span>security\<span class="string">“ charset=\”</span>UTF-<span class="number">8</span>\<span class="string">“”</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“status”</span> : <span class="number">401</span></span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.0]$ curl ‘http:<span class="comment">//10.59.30.96:9200/_cat/indices?pretty’ -u kibana:123456</span></span><br><span class="line">yellow <span class="keyword">open</span> .monitoring-es-<span class="number">6</span>-<span class="number">2018.01</span>.10   nND6-i_rR5iLEYVccBGj8w <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">yellow <span class="keyword">open</span> .triggered_watches            BtygGZisSDqiL3Y2TaQGqQ <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">green  <span class="keyword">open</span> .security-<span class="number">6</span>                   QVRL1mcFSAilryHGEhen7Q <span class="number">1</span> <span class="number">0</span>    </span><br><span class="line">yellow <span class="keyword">open</span> .watcher-history-<span class="number">6</span>-<span class="number">2018.01</span>.10 SBGiHDAnTPiXFoHU65VY_g <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">yellow <span class="keyword">open</span> .watches                      kMzN4j5cQySZQQSDVPww8w <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">yellow <span class="keyword">open</span> .monitoring-alerts-<span class="number">6</span>          VygY6VN9R3S0PR_jrGy50Q <span class="number">1</span> <span class="number">1</span>    </span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.0]$</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置ldap帐号认证"><a href="#配置ldap帐号认证" class="headerlink" title="配置ldap帐号认证"></a><a href="#配置ldap帐号认证" title="配置ldap帐号认证"></a>配置ldap帐号认证</h2><p>ldap服务安装可参考：<a href="https://segmentfault.com/a/11.." target="_blank" rel="noopener">https://segmentfault.com/a/11..</a>.</p><p>添加下述ldap相关述配置 bind_dn为ldap的管理DN</p><ul><li>bind_password为管理dn的密码</li><li>user_search.base_dn为linux系统账户信息导入ldap的信息</li><li>user_search.attribute为账户在ldap中的标识信息</li><li>group_search.base_dn为linux系统组信息导入ldap的信息<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ vim config/elasticsearch<span class="selector-class">.yml</span> </span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">network<span class="selector-class">.host</span>: <span class="number">10.59</span>.<span class="number">30.96</span></span><br><span class="line">bootstrap<span class="selector-class">.system_call_filter</span>: false</span><br><span class="line"></span><br><span class="line">xpack<span class="selector-class">.ssl</span><span class="selector-class">.key</span>: elasticsearch/elasticsearch.key</span><br><span class="line">xpack<span class="selector-class">.ssl</span><span class="selector-class">.certificate</span>: elasticsearch/elasticsearch.crt</span><br><span class="line">xpack<span class="selector-class">.ssl</span><span class="selector-class">.certificate_authorities</span>: ca/ca.crt</span><br><span class="line">xpack<span class="selector-class">.security</span><span class="selector-class">.transport</span><span class="selector-class">.ssl</span><span class="selector-class">.enabled</span>: true</span><br><span class="line"></span><br><span class="line">xpack:</span><br><span class="line">  security:</span><br><span class="line">    authc:</span><br><span class="line">      realms:</span><br><span class="line">        ldap1:</span><br><span class="line">          type: ldap</span><br><span class="line">          <span class="attribute">order</span>: <span class="number">0</span></span><br><span class="line">          url: <span class="string">“ldap://10.59.30.95”</span></span><br><span class="line">          bind_dn: <span class="string">“cn=Manager, dc=martin, dc=com”</span></span><br><span class="line">          bind_password: <span class="number">123456</span></span><br><span class="line">          user_search:</span><br><span class="line">            base_dn: <span class="string">“ou=People,dc=martin,dc=com”</span></span><br><span class="line">            attribute: uid</span><br><span class="line">          group_search:</span><br><span class="line">            base_dn: <span class="string">“ou=Group,dc=martin,dc=com”</span></span><br><span class="line">          unmapped_groups_as_roles: false</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置AD域帐号认证"><a href="#配置AD域帐号认证" class="headerlink" title="配置AD域帐号认证"></a><a href="#配置AD域帐号认证" title="配置AD域帐号认证"></a>配置AD域帐号认证</h2><p>添加下ldap相关述配置至elasticsearch.yml，此处为接着上述LDAP配置添加，如果只需配置AD认证请将ldap相关配置删除即可；</p><ul><li>domain_name为AD域的域名</li><li>url为AD域的地址</li><li>bind_dnw为随意的域账户名称（格式为user@domain）</li><li>bind_password为上述账户的密码<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">xpack</span>:</span><br><span class="line">  <span class="attribute">security</span>:</span><br><span class="line">    <span class="attribute">authc</span>:</span><br><span class="line">      <span class="attribute">realms</span>:</span><br><span class="line">        <span class="attribute">ldap1</span>:</span><br><span class="line">          <span class="attribute">type</span>: ldap</span><br><span class="line">          <span class="attribute">order</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">url</span>: <span class="string">“ldap://10.59.30.94”</span></span><br><span class="line">          <span class="attribute">bind_dn</span>: <span class="string">“cn=Manager, dc=martin, dc=com”</span></span><br><span class="line">          <span class="attribute">bind_password</span>: <span class="number">123456</span></span><br><span class="line">          <span class="attribute">user_search</span>:</span><br><span class="line">            <span class="attribute">base_dn</span>: <span class="string">“ou=People,dc=martin,dc=com”</span></span><br><span class="line">            <span class="attribute">attribute</span>: uid</span><br><span class="line">          <span class="attribute">group_search</span>:</span><br><span class="line">            <span class="attribute">base_dn</span>: <span class="string">“ou=Group,dc=martin,dc=com”</span></span><br><span class="line">          <span class="attribute">unmapped_groups_as_roles</span>: false</span><br><span class="line">        <span class="attribute">active_directory</span>:</span><br><span class="line">          <span class="attribute">type</span>: active_directory</span><br><span class="line">          <span class="attribute">order</span>: <span class="number">1</span></span><br><span class="line">          <span class="attribute">domain_name</span>: martin.com</span><br><span class="line">          <span class="attribute">url</span>: <span class="attribute">ldap</span>:<span class="comment">//ad.martin.com</span></span><br><span class="line">          <span class="attribute">bind_dn</span>: martin<span class="variable">@martin</span>.com</span><br><span class="line">          <span class="attribute">bind_password</span>: AD.<span class="number">123456</span></span><br></pre></td></tr></table></figure></li></ul><p>重启elasticsearch服务并使用ldap域账户user01登录</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ killall java</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ .<span class="regexp">/bin/</span>elasticsearch -d</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl -XGET -u <span class="string">user01:</span>user01 <span class="string">‘<a href="http://10.59.30.96:9200/_cat?pretty&#39;" target="_blank" rel="noopener">http://10.59.30.96:9200/_cat?pretty&#39;</a></span></span><br><span class="line">=^.^=</span><br><span class="line"><span class="regexp">/_cat/</span>allocation</span><br><span class="line"><span class="regexp">/_cat/</span>shards</span><br><span class="line"><span class="regexp">/_cat/</span>shards/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>master</span><br><span class="line"><span class="regexp">/_cat/</span>nodes</span><br><span class="line"><span class="regexp">/_cat/</span>tasks</span><br><span class="line"><span class="regexp">/_cat/</span>indices</span><br><span class="line"><span class="regexp">/_cat/</span>indices/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>segments</span><br><span class="line"><span class="regexp">/_cat/</span>segments/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>count</span><br><span class="line"><span class="regexp">/_cat/</span>count/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>recovery</span><br><span class="line"><span class="regexp">/_cat/</span>recovery/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>health</span><br><span class="line"><span class="regexp">/_cat/</span>pending_tasks</span><br><span class="line"><span class="regexp">/_cat/</span>aliases</span><br><span class="line"><span class="regexp">/_cat/</span>aliases/&#123;alias&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>thread_pool</span><br><span class="line"><span class="regexp">/_cat/</span>thread_pool/&#123;thread_pools&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>plugins</span><br><span class="line"><span class="regexp">/_cat/</span>fielddata</span><br><span class="line"><span class="regexp">/_cat/</span>fielddata/&#123;fields&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>nodeattrs</span><br><span class="line"><span class="regexp">/_cat/</span>repositories</span><br><span class="line"><span class="regexp">/_cat/</span>snapshots/&#123;repository&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>templates</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$</span><br></pre></td></tr></table></figure><p>使用AD域账户martin登录</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl <span class="string">http:</span><span class="comment">//10.59.30.96:9200/_cat?pretty -u martin:AD.123456</span></span><br><span class="line">=^.^=</span><br><span class="line"><span class="regexp">/_cat/</span>allocation</span><br><span class="line"><span class="regexp">/_cat/</span>shards</span><br><span class="line"><span class="regexp">/_cat/</span>shards/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>master</span><br><span class="line"><span class="regexp">/_cat/</span>nodes</span><br><span class="line"><span class="regexp">/_cat/</span>tasks</span><br><span class="line"><span class="regexp">/_cat/</span>indices</span><br><span class="line"><span class="regexp">/_cat/</span>indices/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>segments</span><br><span class="line"><span class="regexp">/_cat/</span>segments/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>count</span><br><span class="line"><span class="regexp">/_cat/</span>count/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>recovery</span><br><span class="line"><span class="regexp">/_cat/</span>recovery/&#123;index&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>health</span><br><span class="line"><span class="regexp">/_cat/</span>pending_tasks</span><br><span class="line"><span class="regexp">/_cat/</span>aliases</span><br><span class="line"><span class="regexp">/_cat/</span>aliases/&#123;alias&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>thread_pool</span><br><span class="line"><span class="regexp">/_cat/</span>thread_pool/&#123;thread_pools&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>plugins</span><br><span class="line"><span class="regexp">/_cat/</span>fielddata</span><br><span class="line"><span class="regexp">/_cat/</span>fielddata/&#123;fields&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>nodeattrs</span><br><span class="line"><span class="regexp">/_cat/</span>repositories</span><br><span class="line"><span class="regexp">/_cat/</span>snapshots/&#123;repository&#125;</span><br><span class="line"><span class="regexp">/_cat/</span>templates</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$</span><br></pre></td></tr></table></figure><h2 id="为域账户信息映射角色"><a href="#为域账户信息映射角色" class="headerlink" title="为域账户信息映射角色"></a><a href="#为域账户信息映射角色" title="为域账户信息映射角色"></a>为域账户信息映射角色</h2><p>接口为：POST /_xpack/security/role_mapping/<name></name></p><p>下述为映射user1*账户为管理员角色的操作步骤</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl -<span class="type">XPOST</span> -<span class="type">H</span> <span class="symbol">‘Content</span>-<span class="class"><span class="keyword">type</span></span>: application/json’ -u elastic:elastic <span class="symbol">‘http</span>:<span class="comment">//10.59.30.96:9200/_xpack/security/role_mapping/ldap_user_admin?pretty’ -d ‘&#123;</span></span><br><span class="line">&gt;   <span class="string">“roles”</span>: [ <span class="string">“admin”</span> ],</span><br><span class="line">&gt;   <span class="string">“enabled”</span>: <span class="literal">true</span>,</span><br><span class="line">&gt;   <span class="string">“rules”</span>: &#123;</span><br><span class="line">&gt;     <span class="string">“any”</span>: [</span><br><span class="line">&gt;       &#123;</span><br><span class="line">&gt;         <span class="string">“field”</span>: &#123;</span><br><span class="line">&gt;           <span class="string">“username”</span>: <span class="string">“/user1<em>/“</em></span></span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;     ]</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;’</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“role_mapping”</span> : &#123;</span><br><span class="line">    <span class="string">“created”</span> : <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$ curl -<span class="type">XGET</span> -<span class="type">H</span> <span class="symbol">‘Content</span>-<span class="class"><span class="keyword">type</span></span>: application/json’ -u elastic:elastic <span class="symbol">‘http</span>:<span class="comment">//10.59.30.96:9200/_xpack/security/role_mapping/ldap_user_admin?pretty’</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“ldap_user_admin”</span> : &#123;</span><br><span class="line">    <span class="string">“enabled”</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">“roles”</span> : [</span><br><span class="line">      <span class="string">“admin”</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“rules”</span> : &#123;</span><br><span class="line">      <span class="string">“any”</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">“field”</span> : &#123;</span><br><span class="line">            <span class="string">“username”</span> : <span class="string">“/user1/“</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">“metadata”</span> : &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch<span class="meta">@elasticsearch</span> elasticsearch<span class="number">-6.0</span><span class="number">.0</span>]$</span><br></pre></td></tr></table></figure><p>验证域账户权限，使用user01无权访问indices接口，使用user11可以访问；</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ curl -XGET -u user01:user01 <span class="string">‘<a href="http://10.59.30.96:9200/_cat/indices?pretty&#39;" target="_blank" rel="noopener">http://10.59.30.96:9200/_cat/indices?pretty&#39;</a></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“error”</span> : &#123;</span><br><span class="line">    <span class="string">“root_cause”</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">“type”</span> : <span class="string">“security_exception”</span>,</span><br><span class="line">        <span class="string">“reason”</span> : <span class="string">“action [cluster:monitor/state] is unauthorized for user [user01]”</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">“type”</span> : <span class="string">“security_exception”</span>,</span><br><span class="line">    <span class="string">“reason”</span> : <span class="string">“action [cluster:monitor/state] is unauthorized for user [user01]”</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“status”</span> : <span class="number">403</span></span><br><span class="line">&#125;</span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$ curl -XGET -u user11:user11 <span class="string">‘<a href="http://10.59.30.96:9200/_cat/indices?pretty&#39;" target="_blank" rel="noopener">http://10.59.30.96:9200/_cat/indices?pretty&#39;</a></span></span><br><span class="line">yellow open <span class="selector-class">.monitoring-es-6-2018</span>.<span class="number">01.10</span>   nND6-i_rR5iLEYVccBGj8w <span class="number">1</span> <span class="number">1</span> <span class="number">6178</span> <span class="number">44</span>  <span class="number">5.9</span>mb  <span class="number">5.9</span>mb</span><br><span class="line">yellow open <span class="selector-class">.triggered_watches</span>            BtygGZisSDqiL3Y2TaQGqQ <span class="number">1</span> <span class="number">1</span>    <span class="number">0</span>  <span class="number">0</span> <span class="number">11.7</span>kb <span class="number">11.7</span>kb</span><br><span class="line">green  open <span class="selector-class">.security-6</span>                   QVRL1mcFSAilryHGEhen7Q <span class="number">1</span> <span class="number">0</span>                      </span><br><span class="line">yellow open <span class="selector-class">.watcher-history-6-2018</span>.<span class="number">01.10</span> SBGiHDAnTPiXFoHU65VY_g <span class="number">1</span> <span class="number">1</span>  <span class="number">777</span>  <span class="number">0</span>  <span class="number">1.1</span>mb  <span class="number">1.1</span>mb</span><br><span class="line">yellow open <span class="selector-class">.watches</span>                      kMzN4j5cQySZQQSDVPww8w <span class="number">1</span> <span class="number">1</span>    <span class="number">5</span>  <span class="number">0</span> <span class="number">40.2</span>kb <span class="number">40.2</span>kb</span><br><span class="line">yellow open <span class="selector-class">.monitoring-alerts-6</span>          VygY6VN9R3S0PR_jrGy50Q <span class="number">1</span> <span class="number">1</span>    <span class="number">1</span>  <span class="number">0</span> <span class="number">12.8</span>kb <span class="number">12.8</span>kb</span><br><span class="line">[elasticsearch@elasticsearch elasticsearch-<span class="number">6.0</span>.<span class="number">0</span>]$</span><br></pre></td></tr></table></figure><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a><a href="#常见报错" title="常见报错"></a>常见报错</h2><p>No subject alternative names matching IP address</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2018-01-10T19:19:35,483][WARN ][o.e.x.s.t.n.SecurityNetty4Transport] [fzP4t-4] exception caught on transport layer [[id: 0x5d97fe48, L:/0:0:0:0:0:0:0:1:49121 ! R:/0:0:0:0:0:0:0:1:9300]], closing connection</span><br><span class="line">    io.netty.handler.codec.DecoderException: javax.net.ssl.SSLHandshakeException: General SSLEngine problem</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">Caused by: java.security.cert.CertificateException: <span class="literal">No</span> subject alternative names matching<span class="built_in"> IP address </span>0:0:0:0:0:0:0:1 found</span><br></pre></td></tr></table></figure><p>解决方案为一种是关闭IPv6地址，另一种是修改ES_HOME/config/elasticsearch.yml中的network.host值为本机eth0的IP</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#参考文档" title="参考文档"></a>参考文档</h2><ul><li>官方安装步骤：<a href="https://www.elastic.co/guide/.." target="_blank" rel="noopener">https://www.elastic.co/guide/..</a>.</li><li>配置内置账户密码：<br><a href="https://www.elastic.co/guide/.." target="_blank" rel="noopener">https://www.elastic.co/guide/..</a>.</li><li>修改账户密码：<br><a href="https://www.elastic.co/guide/.." target="_blank" rel="noopener">https://www.elastic.co/guide/..</a>.</li><li>用户相关操作：<br><a href="https://www.elastic.co/guide/.." target="_blank" rel="noopener">https://www.elastic.co/guide/..</a>.</li><li>使用LDAP认证： <a href="https://www.elastic.co/guide/.." target="_blank" rel="noopener">https://www.elastic.co/guide/..</a>.</li><li>用户角色映射： <a href="https://www.elastic.co/guide/.." target="_blank" rel="noopener">https://www.elastic.co/guide/..</a>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自定义内置账号&quot;&gt;&lt;a href=&quot;#自定义内置账号&quot; class=&quot;headerlink&quot; title=&quot;自定义内置账号&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#自定义内置账号&quot; title=&quot;自定义内置账号&quot;&gt;&lt;/a&gt;自定义内置账号&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;账户ela
      
    
    </summary>
    
    
      <category term="ELK" scheme="http://chucz.club/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>crontab、anacron、logrotate relationship</title>
    <link href="http://chucz.club/2018/08/19/crontab%E3%80%81anacron%E3%80%81logrotate-relationship/"/>
    <id>http://chucz.club/2018/08/19/crontab、anacron、logrotate-relationship/</id>
    <published>2018-08-19T01:55:15.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<p>服务器上的nginx使用logrotate来分割日志，设置为每天分割。但是logrotate似乎没有工作，日志并没有分割。服务器是CentOS 6。</p><p>为了找到原因，分析可能出错的地方。<br>如果是logrotate未执行，可能是crond没有启动，因为logrotate被/etc/cron.daily/logrotate脚本所启动，可以查看其中代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/cron.daily/logrotate</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">/usr/sbin/logrotate /etc/logrotate.conf</span><br><span class="line">EXITVALUE=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$EXITVALUE</span> != 0 ]; <span class="keyword">then</span></span><br><span class="line">    /usr/bin/logger -t logrotate <span class="string">“ALERT exited abnormally with [<span class="variable">$EXITVALUE</span>]”</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>可以看到logrotate运行时加载配置文件logrotate.conf，而这个配置文件除了设定一些分割日志相关的选项，还包含分割日志的配置文件目录/etc/logrotate.d。</p><p>nginx的日志分割配置文件就保存在logrotate.d目录：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]<span class="meta"># cat !$</span></span><br><span class="line">cat <span class="meta-keyword">/etc/</span>logrotate.d/nginx</span><br><span class="line"><span class="meta-keyword">/root/</span>*.<span class="class">log </span>&#123;</span><br><span class="line">    Daily</span><br><span class="line">    Missingok</span><br><span class="line">    rotate <span class="number">52</span></span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    notifempty</span><br><span class="line">    dateext</span><br><span class="line">    create <span class="number">644</span> nobody nobody</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">    [ -f <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>logs/nginx.pid ] &amp;&amp; kill -USR1 <code>cat &lt;span class=&quot;meta-keyword&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;meta-keyword&quot;&gt;/nginx/&lt;/span&gt;logs/nginx.pid</code></span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/root/<em>.log就是需要被分割的日志的目录，通配符</em>表示目录内的所有log文件都被分割，分割的规则就是{…}中的内容。这里把/root/*.log当做nginx日志只是为了测试。<br>在启动crond服务后，发现日志还是没有分割，于是想到会不会是/etc/logrotate.d/nginx配置文件的语法有问题，使用以下命令调试这个文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logrotate -vfd <span class="meta-keyword">/etc/</span>logrotate.d/nginx  <span class="meta"># -vfd 三个选项分别表示显示详情，强制分割日志，只是调试配置文件而不是真的分割日志</span></span><br></pre></td></tr></table></figure><p>输出结果表明有语法错误，Daily，Missingok 都应该是小写。改成daily，missingok。再次调试配置文件，可以正确分割日志：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# ls <span class="number">-1</span> /root/</span><br><span class="line">install<span class="number">-2017</span><span class="number">-5</span><span class="number">-14.</span>log</span><br><span class="line">install<span class="number">-2017</span><span class="number">-5</span><span class="number">-14.</span>log<span class="number">-20170521</span>  #logrotate归档的日志</span><br></pre></td></tr></table></figure><p>上面猜测是crond执行/etc/cron.daily/内的脚本，实现定时执行计划任务，包括执行logrotate日志分割。<br>为了验证是否正确，网上搜索一番后找到了答案。如果没有crontab命令，先安装：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install crontabs  <span class="comment">#安装crond，crond实际上来自cronie包，这个包作为crontabs包的依赖被安装</span></span><br><span class="line">chkconfig –<span class="keyword">add</span><span class="bash"> crond <span class="comment">#添加到开机启动列表</span></span></span><br><span class="line"><span class="bash">chkconfig crond on    <span class="comment">#开机启动crond服务</span></span></span><br><span class="line"><span class="bash">/etc/init.d/crond     <span class="comment">#立即启动crond</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><br><br>以下文件或目录的作用：<br>cron计划任务有两种类型：<br><br><em>   1）系统cron任务：由crond服务执行，/etc/crontab配置系统级别的任务</em>   2）用户cron任务：由crond服务执行，用crontab命令编辑用户级别的任务<font color="#DC143C" size="3">属于系统cron任务的文件或目录：</font><br><br><em>   /etc/cron.d             #系统的任务脚本。执行 rpm -ql cronie 可以看到该目录被cronie包安装</em>   /etc/cron.hourly     #每小时执行其内脚本。其中的0anacron文件调用anacron来执行任务，它被包cronie-anacron安装<br><em>   /etc/cron.daily        #每天执行其内脚本。也被anacron执行其内脚本，logrotate调用脚本就在该目录内</em>   /etc/cron.weekly     #每周执行其内脚本。<br><em>   /etc/cron.monthly   #每月执行其内脚本。<br><br><font color="#DC143C" size="3">控制用户cron任务的执行：</font></em>   /etc/cron.allow   #默认不存在，如果这个文件存在，只有用户在这个文件中才能使用crontab命令<br><em>   /etc/cron.deny    #将不可以使用crontab命令的用户写入其中<br><br>注意：cron.allow和cron.deny就是用户名的列表，每行一个用户名。比如 cron.deny中有一行jason，效果是如果当前登录用户是jason，执行 crontab -e会提示不允许使用crontab命令。<br><br>以下三个目录的作用：<br><br>/var/spool/cron/USER_NAME<br><br>#这个文件才是跟crontab -e/-l 关联的，这个文件保存了crontab -e编辑的任务内容<br><br>#比如执行 crontab -u root -e，编辑保存后，就会有/var/spool/cron/root 这个文件<br><br>/var/spool/anacron/{cron.daily,cron.monthly,cron.weekly}<br><br>#这三个文件记录了anacron上一次执行的时间（上一天，上一周或上一月）<br><br>#anacron任务执行时，对照这里的时间，决定是否执行anacron任务<br><br>/var/lib/logrotate.status<br><br>#这个文件记录logrotate执行情况，logrotate参考这个文件来决定是否需要rotate日志<br><br>crontab和anacron和logrotate的关系：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]<span class="comment"># cat /etc/cron.d/0hourly     #这个文件指定每小时的01分执行/etc/cron.hourly内的所有脚本</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line">HOME=/</span><br><span class="line">01 </span></pre></td></tr></table></figure></em> <em> </em> * root run-parts /etc/cron.hourly  <span class="comment">#这里的root指定执行任务的用户，run-parts其实是一个可执行脚本，在/usr/bin/run-parts，用来执行cron.hourly目录内的所有脚本</span><br><p>说明：用crontab -e命令每次编辑完某个用户的cron设置后，cron自动在/var/spool/cron下生成一个与此用户同名的文件，此用户的cron信息都记录在这个文件中。cron启动后每过一份钟读一次这个文件，检查是否要执行里面的命令。因此此文件修改后不需要重新启动cron服务。cron服务每分钟不仅要读一次/var/spool/cron内的所有文件，还需要读一次/etc/crontab，因此我们配置这个文件也能运用cron服务做一些事情。用crontab命令配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务。此文件的文件格式是：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHELL=<span class="regexp">/bin/bash</span></span><br><span class="line">PATH=<span class="regexp">/sbin:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span>     <span class="comment">#可执行文件查找路径</span></span><br><span class="line">MAILTO=root      <span class="comment">#如果出现错误，或者有数据输出，数据作为邮件发给这个帐号</span></span><br><span class="line">HOME=<span class="regexp">/           #使用者运行的路径，这里是根目录</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/cron.hourly/0anacron   #cron.hourly目录下的脚本，根据条件执行anacron命令</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Skip excecution unless the date has changed from the previous run</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -r /var/spool/anacron/cron.daily; <span class="keyword">then</span></span><br><span class="line">    day=<code>cat /var/spool/anacron/cron.daily</code></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <code>date +%Y%m%d</code> = <span class="string">“<span class="variable">$day</span>“</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Skip excecution unless AC powered</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -x /usr/bin/on_ac_power; <span class="keyword">then</span></span><br><span class="line">    /usr/bin/on_ac_power &amp;&gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">test</span> $? -eq 1; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">/usr/sbin/anacron -s</span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@test</span> ~]<span class="comment"># cat /etc/anacrontab   #如果执行anacron命令，那么接着查看anacron的配置文件</span></span><br><span class="line"><span class="comment"># /etc/anacrontab: configuration file for anacron</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See anacron(8) and anacrontab(5) for details.</span></span><br><span class="line"></span><br><span class="line">SHELL=<span class="regexp">/bin/sh</span></span><br><span class="line">PATH=<span class="regexp">/sbin:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span></span><br><span class="line">MAILTO=root</span><br><span class="line"><span class="comment"># the maximal random delay added to the base delay of the jobs</span></span><br><span class="line">RANDOM_DELAY=<span class="number">45</span>     <span class="comment">#最大延迟时间</span></span><br><span class="line"><span class="comment"># the jobs will be started during the following hours only</span></span><br><span class="line">START_HOURS_RANGE=<span class="number">3</span>-<span class="number">22</span>     <span class="comment">#只有在3-22点之间执行任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#period in days   delay in minutes   job-identifier   command</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5</span>    cron.daily        nice run-parts /etc/cron.daily</span><br><span class="line"><span class="number">7</span>    <span class="number">25</span>    cron.weekly        nice run-parts /etc/cron.weekly</span><br><span class="line"><span class="variable">@monthly</span> <span class="number">45</span>    cron.monthly        nice run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure><p>以上anacrontab配置文件最重要的是最后一部分，以这行为例：</p><p>1    5    cron.daily        nice run-parts /etc/cron.daily</p><p>表示每天都执行/etc/cront.daily/目录下的脚本文件，真实的延迟是RANDOM_DELAY+delay。这里的延迟是5分钟，加上上面的RANDOM_DELAY，所以实际的延迟时间是5-50之间，开始时间为03-22点，如果机器没关，那么一般就是在03:05-03:50之间执行。<font color="#DC143C" size="3">nice命令将该进程设置为nice=10，默认为0，即低优先级进程。</font>如果RANDOM_DELAY=0，那么表示准确延迟5min，即03:05执行cron.daily内的脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/cron.daily/logrotate  #最后在cron.daily内有logrotate的调用脚本</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">/usr/sbin/logrotate /etc/logrotate.conf       <span class="comment">#logrotate将会读取配置文件，最终会读取到/etc/logrotate.d/nginx</span></span><br><span class="line">EXITVALUE=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$EXITVALUE</span> != 0 ]; <span class="keyword">then</span></span><br><span class="line">    /usr/bin/logger -t logrotate <span class="string">“ALERT exited abnormally with [<span class="variable">$EXITVALUE</span>]”</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>当logrotate命令加载了/etc/logrotate.d/nginx配置文件时，还要比较nginx日志的归档日期：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# cat /var/lib/logrotate.status | grep /root</span><br><span class="line"><span class="string">“/root/install-2017-5-14.log”</span> <span class="number">2017</span><span class="number">-5</span><span class="number">-21</span>   #如果今天是<span class="number">2017</span><span class="number">-5</span><span class="number">-21</span>，这个文件里也是<span class="number">2017</span><span class="number">-5</span><span class="number">-21</span>，说明今天已经归档过了，否则就会归档（分割）nginx日志</span><br></pre></td></tr></table></figure><p>综上，整个逻辑流程为：</p><p>crond服务加载/etc/cron.d/0hourly —&gt;在每小时的01分执行/etc/cront.hourly/0anacron —&gt;执行anacron —&gt;根据/etc/anacrontab的配置执行/etc/cron.daily，/etc/cron.weekly，/etc/cron.monthly —&gt;执行/etc/cron.daily/下的logrotate脚本 —&gt;执行logrotate —&gt;根据/etc/logrotate.conf配置执行脚本/etc/logrotate.d/nginx —&gt;分割nginx日志成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务器上的nginx使用logrotate来分割日志，设置为每天分割。但是logrotate似乎没有工作，日志并没有分割。服务器是CentOS 6。&lt;/p&gt;
&lt;p&gt;为了找到原因，分析可能出错的地方。&lt;br&gt;如果是logrotate未执行，可能是crond没有启动，因为log
      
    
    </summary>
    
    
      <category term="Logrotate" scheme="http://chucz.club/tags/Logrotate/"/>
    
  </entry>
  
  <entry>
    <title>基于k8s 动态配置及扩容maven nexus私服</title>
    <link href="http://chucz.club/2018/08/19/%E5%9F%BA%E4%BA%8Ek8s-%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%A9%E5%AE%B9maven-nexus%E7%A7%81%E6%9C%8D/"/>
    <id>http://chucz.club/2018/08/19/基于k8s-动态配置及扩容maven-nexus私服/</id>
    <published>2018-08-19T01:53:31.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置nexus"><a href="#配置nexus" class="headerlink" title="配置nexus"></a><a href="#配置nexus" title="配置nexus"></a>配置nexus</h3><p>从官网下载了nexus之后还需要进行一些配置。<br>编辑bin/nexus.vmoptions 调整后的如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">Xms600M</span></span><br><span class="line"><span class="ruby">-Xmx600M</span></span><br><span class="line"><span class="ruby">-<span class="symbol">XX:</span>MaxDirectMemorySize=<span class="number">1</span>G</span></span><br><span class="line"><span class="ruby">-<span class="symbol">XX:</span>+UnlockDiagnosticVMOptions</span></span><br><span class="line"><span class="ruby">-<span class="symbol">XX:</span>+UnsyncloadClass</span></span><br><span class="line"><span class="ruby">-<span class="symbol">XX:</span>+LogVMOutput</span></span><br><span class="line"><span class="ruby">-<span class="symbol">XX:</span>LogFile=<span class="regexp">/data/docker</span><span class="regexp">/soft/nexus</span><span class="regexp">/log/jvm</span>.log</span></span><br><span class="line"><span class="ruby">-<span class="symbol">XX:</span>-OmitStackTraceInFastThrow</span></span><br><span class="line"><span class="ruby">-Djava.net.preferIPv4Stack=<span class="literal">true</span></span></span><br><span class="line"><span class="ruby">-Dkaraf.home=.</span></span><br><span class="line"><span class="ruby">-Dkaraf.base=.</span></span><br><span class="line"><span class="ruby">-Dkaraf.etc=etc/karaf</span></span><br><span class="line"><span class="ruby">-Djava.util.logging.config.file=etc/karaf/java.util.logging.properties</span></span><br><span class="line"><span class="ruby">-Dkaraf.data=<span class="regexp">/data/docker</span><span class="regexp">/soft/nexus</span><span class="regexp">/data</span></span></span><br><span class="line"><span class="ruby">-Djava.io.tmpdir=<span class="regexp">/data/docker</span><span class="regexp">/soft/nexus</span><span class="regexp">/tmp</span></span></span><br><span class="line"><span class="ruby">-Dkaraf.startLocalConsole=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><p>其中除了1，2行的jvm内存配置之外，最关键的就是，以下几个属性配置：</p><ul><li>-XX:LogFile=/data/docker/soft/nexus/log/jvm.log       # 日志文件生成位置</li><li>-Dkaraf.data=/data/docker/soft/nexus/data             # 仓库数据存放位置(上传的jar包)</li><li>-Djava.io.tmpdir=/data/docker/soft/nexus/tmp          # 临时文件存放位置</li></ul><h3 id="制作Docker镜像"><a href="#制作Docker镜像" class="headerlink" title="制作Docker镜像"></a><a href="#制作Docker镜像" title="制作Docker镜像"></a>制作Docker镜像</h3><p>配置好nexus之后，需要再制作自己的docker镜像，因为k8s就是调度镜像容器的。 </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master nexus]<span class="comment"># pwd</span></span><br><span class="line">/data/docker/dockerfile/nexus</span><br><span class="line">[root@master nexus]<span class="comment"># ls -lth </span></span><br><span class="line">total 223M</span><br><span class="line">-rw-r–r–<span class="number"> 1 </span>root root <span class="number"> 146 </span>Jun<span class="number"> 21 </span>16:06 Dockerfile</span><br><span class="line">-rw-r–r–<span class="number"> 1 </span>root root 108M Jun<span class="number"> 21 </span>16:02 nexus3.tar.gz</span><br><span class="line">drwxr-xr-x<span class="number"> 3 </span>root root 4.0K Jun<span class="number"> 21 </span>15:53 sonatype-work</span><br><span class="line">drwxr-xr-x<span class="number"> 9 </span>root root 4.0K Jun<span class="number"> 21 </span>15:53 nexus-3.12.1-01</span><br><span class="line">-rw-r–r–<span class="number"> 1 </span>root root 115M Jun<span class="number"> 21 </span>15:36 nexus-3.12.1-01-unix.tar.gz.org</span><br></pre></td></tr></table></figure><p>docker镜像的制作很简单，新建一个Dockerfile文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master nexus]<span class="comment"># cat Dockerfile </span></span><br><span class="line"><span class="keyword">FROM</span> registry.cn-hangzhou.aliyuncs.com/luhaoyuan/oracle-jdk8:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nexus3.tar.gz /opt</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">“/opt/nexus-3.12.1-01/bin/nexus”</span>, <span class="string">“run”</span>]</span></span><br></pre></td></tr></table></figure><ul><li>第一行：nexus的运行是依赖JDK环境的，所以我们这里就使用jdk作为基础镜像；(镜像是基于centos7，比较大，后续可以考虑修改为alpine_3.6)</li><li>第二行：将我们配置过后的nexus(nexus-3.12.1-01)再重新打包一下，添加到容器中；*   第三行：启动容器时，执行的命令，nexus的启动命令有start和run，由于start默认是启动在后台进程的，这样容器一启动就退出了。所以这里必须要使用run命令启动了。</li></ul><p>最后构建Docker镜像：<br>docker build -t registry.martin.com:5000/tools/nexus:3.12.1 .<br>registry.martin.com:5000为我registry地址,构建之后将改image push到私库,当然也可以用harbor<br>如果有做ca校验，需要将证书拷贝到指定的:/etc/docker/certs.d/xxx/ca.crt,然后docker login校验<br>再docker push registry.martin.com:5000/tools/nexus:3.12.1，不然会提示x509认证失败<br><a id="more"></a></p><h3 id="配置k8s-PV-PVC"><a href="#配置k8s-PV-PVC" class="headerlink" title="配置k8s PV-PVC"></a><a href="#配置k8s-PV-PVC" title="配置k8s PV-PVC"></a>配置k8s PV-PVC</h3><p>为了避免容器重启数据丢失，需要挂载主机的卷空间。<br>在k8s中，pod挂载主机的存储卷，就需要使用到了PV（PersistentVolume）和PVC（PersistentVolumeClaim）。<br>新建nexus3-pv-pvc.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master</span> <span class="string">nexus]#</span> <span class="string">pwd</span></span><br><span class="line"><span class="string">/data/k8s/nexus</span></span><br><span class="line"><span class="string">[root@master</span>  <span class="string">nexus]#</span> <span class="string">ls</span> <span class="bullet">-lth</span></span><br><span class="line"><span class="string">total</span> <span class="number">12</span><span class="string">K</span></span><br><span class="line"><span class="bullet">-</span><span class="string">rw-r–r–</span> <span class="number">1</span> <span class="string">root</span> <span class="string">root</span> <span class="number">777</span> <span class="string">Jun</span> <span class="number">21</span> <span class="number">18</span><span class="string">:49</span> <span class="string">nexus3-deployment.yaml</span></span><br><span class="line"><span class="bullet">-</span><span class="string">rw-r–r–</span> <span class="number">1</span> <span class="string">root</span> <span class="string">root</span> <span class="number">370</span> <span class="string">Jun</span> <span class="number">21</span> <span class="number">17</span><span class="string">:12</span> <span class="string">nexus3-service.yaml</span></span><br><span class="line"><span class="bullet">-</span><span class="string">rw-r–r–</span> <span class="number">1</span> <span class="string">root</span> <span class="string">root</span> <span class="number">525</span> <span class="string">Jun</span> <span class="number">21</span> <span class="number">16</span><span class="string">:49</span> <span class="string">nexus3-pv-pvc.yaml</span></span><br><span class="line"><span class="string">[root@master</span>  <span class="string">nexus]#</span> <span class="string">cat</span> <span class="string">nexus3-pv-pvc.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nexus3-data-pv</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nexus3-data-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">500</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line"><span class="attr">  hostPath:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/data/docker/soft/nexus</span></span><br><span class="line"></span><br><span class="line"><span class="meta">—</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nexus3-data-pvc</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nexus3-data-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">500</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nexus3-data-pv</span></span><br><span class="line"><span class="string">[root@master</span>  <span class="string">nexus]#</span></span><br></pre></td></tr></table></figure><p>==注意：PV中的hostPath，指定了宿主主机上的挂载路径(node节点最好全部先创建好)==</p><h3 id="配置k8s-Deployment"><a href="#配置k8s-Deployment" class="headerlink" title="配置k8s Deployment"></a><a href="#配置k8s-Deployment" title="配置k8s Deployment"></a>配置k8s Deployment</h3><p>在k8s早期更多的是使用ReplicationController (RC)来控制保障pod，不过后来又出现了Deployment。<br>Deployment不仅包含了RC的所有功能，还具有：版本记录、回滚、暂停和启动等多种额外的强大功能。<br>所以可以尽量都使用Deployment,新建nexus3-deployment.yaml文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@master nexus]<span class="meta"># cat nexus3-deployment.yaml </span></span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    app:</span> nexus3</span><br><span class="line"><span class="symbol">  name:</span> nexus3</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    matchLabels:</span></span><br><span class="line"><span class="symbol">      app:</span> nexus3</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line"><span class="symbol">      labels:</span></span><br><span class="line"><span class="symbol">        app:</span> nexus3</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">        - name: nexus3</span><br><span class="line"><span class="symbol">          image:</span> registry.martin.com:<span class="number">5000</span><span class="meta-keyword">/tools/</span>nexus:<span class="number">3.12</span><span class="number">.1</span></span><br><span class="line"><span class="symbol">          imagePullPolicy:</span> IfNotPresent</span><br><span class="line"><span class="symbol">          ports:</span></span><br><span class="line">          - containerPort: <span class="number">9193</span></span><br><span class="line"><span class="symbol">            protocol:</span> TCP</span><br><span class="line"><span class="symbol">          volumeMounts:</span></span><br><span class="line">          - name: nexus-data</span><br><span class="line"><span class="symbol">            mountPath:</span> <span class="meta-keyword">/data/</span>docker<span class="meta-keyword">/soft/</span>nexus</span><br><span class="line"><span class="symbol">      volumes:</span></span><br><span class="line">        - name: nexus-data</span><br><span class="line"><span class="symbol">          persistentVolumeClaim:</span></span><br><span class="line"><span class="symbol">            claimName:</span> nexus3-data-pvc</span><br><span class="line"><span class="symbol">      nodeSelector:</span></span><br><span class="line">        kubernetes.io/hostname: <span class="number">192.168</span><span class="number">.0</span><span class="number">.15</span></span><br></pre></td></tr></table></figure><p>需要在volumes结点上引用之前创建的PVC：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">volumes</span>:</span><br><span class="line">  - name: nexus-<span class="class"><span class="keyword">data</span></span></span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: nexus3-<span class="class"><span class="keyword">data</span>-pvc</span></span><br></pre></td></tr></table></figure><p>在volumeMounts结点上，配置了挂载到容器中的路径：/data/docker/soft/nexus(node节点最好全部先创建好)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">volumeMounts:</span></span><br><span class="line">  - name: nexus-data</span><br><span class="line"><span class="symbol">    mountPath:</span> <span class="meta-keyword">/data/</span>docker<span class="meta-keyword">/soft/</span>nexus</span><br></pre></td></tr></table></figure><p>最后的nodeSelector表示pod只在某个主机上运行,可以通过在k8s的master上使用:kubectl get nodes查看</p><h3 id="配置k8s-Service"><a href="#配置k8s-Service" class="headerlink" title="配置k8s Service"></a><a href="#配置k8s-Service" title="配置k8s Service"></a>配置k8s Service</h3><p>k8s中的pod的访问是不可靠的，随时可能发生pod停止-漂移-创建的过程。<br>所以要想能够稳定的访问，就必须要创建Service进行服务发现了，在Service中是根据selector来寻找pod的。<br>最后k8s上的Service只能在集群节点上访问，如果我们想要在集群外部进行访问的话，只有三种方式：</p><ul><li>NodePort、</li><li>LoadBalancer、</li><li>Ingress。</li></ul><p>这里使用NodePort，绑定宿主机的端口来进行暴露服务。跟docker run -p 看上去效果相似。<br>新建nexus3-service.yaml文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master nexus]<span class="meta"># cat nexus3-service.yaml </span></span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Service</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    app:</span> nexus3</span><br><span class="line"><span class="symbol">  name:</span> nexus3</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  type:</span> NodePort</span><br><span class="line"><span class="symbol">  ports:</span></span><br><span class="line">  - port: <span class="number">8081</span></span><br><span class="line"><span class="symbol">    targetPort:</span> <span class="number">8081</span></span><br><span class="line"><span class="symbol">    nodePort:</span> <span class="number">30031</span></span><br><span class="line"><span class="symbol">    name:</span> web-ui</span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    app:</span> nexus3</span><br><span class="line">[root@master nexus]<span class="meta">#</span></span><br></pre></td></tr></table></figure><p>其中关键的地方就是spec.type节点配置NodePort类型了。<br>说明下的ports 端口的配置：</p><ul><li>port 属性定义了Service的虚端口；</li><li>targetPort 属性指定了后面pod上提供的端口，如果没有指定则默认与port相同(这里我们显视的指定了)；</li><li>nodePort 属性指定了绑定在宿主机(物理机)上的端口号，我们可以通过宿主机IP + 端口的形式访问到后方pod中的服。</li><li>name 如果有多个port配置的话，必须要为每个port指定一个名称。</li></ul><h3 id="k8s部署访问"><a href="#k8s部署访问" class="headerlink" title="k8s部署访问"></a><a href="#k8s部署访问" title="k8s部署访问"></a>k8s部署访问</h3><h4 id="创建-PV-PVC"><a href="#创建-PV-PVC" class="headerlink" title="创建 PV-PVC"></a><a href="#创建-PV-PVC" title="创建 PV-PVC"></a>创建 PV-PVC</h4><p>根据配置文件，创建PV-PVC：</p><p>kubectl create -f nexus3-pv-pvc.yaml</p><p>创建完成后，查看一下状态，是否正常： </p><p>kubectl get pv</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME             CAPACITY   ACCESS MODES   RECLAIM<span class="built_in"> POLICY </span>  STATUS    CLAIM                     STORAGECLASS   REASON    AGE</span><br><span class="line">nexus3-data-pv   500Gi      RWO            Recycle          Bound     default/nexus3-data-pvc                            17h</span><br></pre></td></tr></table></figure><h4 id="创建Deployment"><a href="#创建Deployment" class="headerlink" title="创建Deployment"></a><a href="#创建Deployment" title="创建Deployment"></a>创建Deployment</h4><p>继续创建Deployment，创建完后会自动创建pod的，并维护pod数量始终为1。 </p><p>kubectl create -f nexus3-deployment.yaml </p><p>稍等几秒钟，查看pod状态： </p><p>kubectl get pod -o wide</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                      READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">nexus3<span class="number">-68</span>f55d9746-vfnf8   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">12</span>h       <span class="number">10.20</span><span class="number">.7</span><span class="number">.12</span>   <span class="number">192.168</span><span class="number">.0</span><span class="number">.15</span></span><br></pre></td></tr></table></figure><p>==注意：默认不用-n指定namespace的都是用的default，-o wide可以看到详细的IP及node信息==</p><h4 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a><a href="#创建Service" title="创建Service"></a>创建Service</h4><p>创建Service，暴露服务：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubectl</span> <span class="selector-tag">create</span> <span class="selector-tag">-f</span> <span class="selector-tag">nexus3-service</span><span class="selector-class">.yaml</span></span><br></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> kubectl <span class="builtin-name">get</span> svc</span><br><span class="line">NAME           <span class="built_in"> TYPE </span>       CLUSTER-IP      EXTERNAL-IP   PORT(S)                                        AGE</span><br><span class="line">kubernetes      ClusterIP   10.10.0.1       &lt;none&gt;        443/TCP                                        13d</span><br><span class="line">nexus3          NodePort    10.10.165.3     &lt;none&gt;        8081:30031/TCP,5000:30032/TCP,8889:30033/TCP   12h</span><br><span class="line">nginx-service   ClusterIP   10.10.147.216   &lt;none&gt;        80/TCP                                         10d</span><br></pre></td></tr></table></figure><p>==注意这里的访问，是访问宿主机的IP+端口，至于CLUSTER-IP这些都是虚拟的IP，无法在外部进行访问的==。</p><h3 id="访问Nexus"><a href="#访问Nexus" class="headerlink" title="访问Nexus"></a><a href="#访问Nexus" title="访问Nexus"></a>访问Nexus</h3><p><a href="http://192.168.1.2:30031" target="_blank" rel="noopener">http://192.168.1.2:30031</a> (pod内container端口为：8081)</p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a><a href="#升级" title="升级"></a>升级</h3><p>借用k8s Deployment的升级方式:</p><ol><li>从官网下载最新的nexus安装包；</li><li>修改nexus配置文件，将上面旧版本的配置覆盖过来就行了；</li><li>修改Dockerfile文件，构建新的Docker镜像，将新打包的nexus放入镜像中。<br>如：docker build -t registry.martin.com:5000/tools/nexus:3.12.2 .<br>Ps: 不要忘记启动命令路径也要调整!</li><li>使用k8s命令升级Deployment：<br>如：kubectl set image deployment/nexus3 nexus3=registry.martin.com:5000/tools/nexus:3.12.2</li><li>回滚升级，如果发现升级了的不好用，或者出现问题，也可以回滚：<br>如：kubectl rollout undo deployment/nexus3</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h3><p>其实这个过程中里复杂了一部分，也简化了一部分。<br>复杂了pv-pvc过程，pv-pvc不用创建直接在Deployment中挂载hostPath也是可以的。<br>简化了Deployment，其实应该还需要加上cpu、内存等资源限制的。<br>这里只是在nexus配置文件中做了限制，如果出现内存泄漏问题，还是没办法解决!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置nexus&quot;&gt;&lt;a href=&quot;#配置nexus&quot; class=&quot;headerlink&quot; title=&quot;配置nexus&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#配置nexus&quot; title=&quot;配置nexus&quot;&gt;&lt;/a&gt;配置nexus&lt;/h3&gt;&lt;p&gt;从官网下载了nexus
      
    
    </summary>
    
    
      <category term="K8s" scheme="http://chucz.club/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes RBAC  Detailed</title>
    <link href="http://chucz.club/2018/08/19/Kubernetes-RBAC-Detailed/"/>
    <id>http://chucz.club/2018/08/19/Kubernetes-RBAC-Detailed/</id>
    <published>2018-08-19T01:51:37.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<p>RBAC - 基于角色的访问控制<br>RBAC使用：rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authorization-mode=RBAC，如果使用的kubeadm安装的集群，1.6 版本以上的都默认开启了RBAC，可以通过查看 Master 节点上 apiserver 的静态Pod定义文件：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">kube</span>-<span class="title">apiserver</span>.<span class="title">service</span></span></span><br><span class="line">或者是：</span><br><span class="line">$ cat /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line">…</span><br><span class="line">    - –authorization-mode=Node,RBAC</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>如果是二进制的方式搭建的集群，添加这个参数过后，记得要重启 apiserver 服务。</p><hr><h3 id="RBAC-API-对象"><a href="#RBAC-API-对象" class="headerlink" title="RBAC API 对象"></a><a href="#RBAC-API-对象" title="RBAC API 对象"></a>RBAC API 对象</h3><p>Kubernetes有一个很基本的特性就是它的所有资源对象都是模型化的 API 对象，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源：</p><ul><li>Pods</li><li>ConfigMaps</li><li>Deployments</li><li>Nodes</li><li>Secrets</li><li>Namespaces</li></ul><p>上面这些资源对象的可能存在的操作有：</p><ul><li>create</li><li>get</li><li>delete</li><li>list</li><li>update</li><li>edit</li><li>watch</li><li>exec</li></ul><p>在更上层，这些资源和API Group 进行关联，比如Pods属于Core API Group，而Deployements属于 apps API Group，要在Kubernetes中进行RBAC的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象：</p><ol><li>Rule：规则，规则是一组属于不同API Group 资源上的一组操作的集合</li><li>Role 和 ClusterRole：角色和集群角色，这两个对象都包含上面的Rules 元素，二者的区别在于，在Role 中，定义的规则只适用于单个命名空间，也就是和namespace 关联的，而ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外Role和 ClusterRole在Kubernetes中都被定义为集群内部的API 资源，和Pod、ConfigMap 这些类似，都是集群的资源对象，所以同样的可以使用kubectl相关的命令来进行操作</li><li><p>Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：</p><pre><code>*   User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用KeyStone或者Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的API 来进行管理</code></pre><ul><li>Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin</li><li>Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和namespace 进行关联的，适用于集群内部运行的应用程序，需要通过API 来完成权限认证，所以在集群内部进行权限操作，都需要使用到 ServiceAccount</li></ul></li><li>RoleBinding和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的Subject和Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding只会影响到当前namespace 下面的资源操作权限，而ClusterRoleBinding会影响到所有的 namespace。<a id="more"></a></li></ol><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><a href="#示例" title="示例"></a>示例</h3><p>通过如下示例来演示RBAC的配置方法：</p><h4 id="创建一个只能访问某个-namespace-的用户"><a href="#创建一个只能访问某个-namespace-的用户" class="headerlink" title="创建一个只能访问某个 namespace 的用户"></a><a href="#创建一个只能访问某个-namespace-的用户" title="创建一个只能访问某个 namespace 的用户"></a>创建一个只能访问某个 namespace 的用户</h4><p>创建一个 User Account，只能访问 kube-system这个命名空间：</p><ul><li>username: martin</li><li>group: op</li></ul><h5 id="第一步：创建用户凭证"><a href="#第一步：创建用户凭证" class="headerlink" title="第一步：创建用户凭证"></a><a href="#第一步：创建用户凭证" title="第一步：创建用户凭证"></a>第一步：创建用户凭证</h5><p>Kubernetes没有User Account的API 对象，不过要创建一个用户帐号的话也是挺简单的，利用管理员分配的一个私钥就可以创建了。<br>创建方法有两种:</p><h6 id="1-使用OpenSSL证书来创建User；"><a href="#1-使用OpenSSL证书来创建User；" class="headerlink" title="1. 使用OpenSSL证书来创建User；"></a><a href="#1-使用OpenSSL证书来创建User；" title="1\. 使用OpenSSL证书来创建User；"></a>1. 使用OpenSSL证书来创建User；</h6><ul><li><p>给用户martin创建一个私钥，命名成：martin.key：<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out martin.<span class="type">key</span> <span class="number">2048</span></span><br></pre></td></tr></table></figure></p></li><li><p>使用刚刚创建的私钥创建一个证书签名请求文件：martin.csr，要注意需要确保在-subj参数中指定用户名和组(CN表示用户名，O表示组)：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -new -key martin<span class="selector-class">.key</span> -out martin<span class="selector-class">.csr</span> -subj <span class="string">“/CN=martin/O=op”</span></span><br></pre></td></tr></table></figure></p></li><li><p>然后找到Kubernetes集群的CA，我们使用的是kubeadm安装的集群，CA相关证书位于/etc/kubernetes/pki/目录下面，如果是二进制方式搭建的，应该在最开始搭建集群的时候就已经指定好了CA的目录(/data/kubernetes/ssl)，然后利用该目录下面的ca.crt和ca.key两个文件来批准上面的证书请求</p></li><li><p>生成最终的证书文件，这里设置证书的有效期为500天<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -<span class="keyword">in</span> martin<span class="selector-class">.csr</span> -CA /data/kubernetes/ssl/ca<span class="selector-class">.crt</span> -CAkey /data/kubernetes/ssl/ca<span class="selector-class">.key</span> -CAcreateserial -out martin<span class="selector-class">.crt</span> -days <span class="number">500</span></span><br><span class="line">现在查看当前文件夹下面是否生成了一个证书文件：</span><br><span class="line">$ ls</span><br><span class="line">martin<span class="selector-class">.csr</span> martin<span class="selector-class">.key</span> martin.crt</span><br></pre></td></tr></table></figure></p></li><li><p>现在可以使用刚刚创建的证书文件和私钥文件在集群中创建新的凭证和上下文(Context):<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl<span class="built_in"> config </span>set-credentials martin <span class="attribute">–client-certificate</span>=martin.crt  <span class="attribute">–client-key</span>=martin.key</span><br></pre></td></tr></table></figure></p></li><li><p>可以看到一个用户martin创建了，然后为这个用户设置新的 Context:<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl<span class="built_in"> config </span>set-context martin-context <span class="attribute">–cluster</span>=kubernetes <span class="attribute">–namespace</span>=kube-system <span class="attribute">–user</span>=martin</span><br></pre></td></tr></table></figure></p></li></ul><p>到这里，用户martin就已经创建成功了，现在使用当前的这个配置文件来操作kubectl命令的时候，应该会出现错误，因为还没有为该用户定义任何操作的权限：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="builtin-name">get</span> pods <span class="attribute">–context</span>=martin-context</span><br><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Forbidden): pods is forbidden:<span class="built_in"> User </span><span class="string">“martin”</span> cannot list pods <span class="keyword">in</span> the namespace <span class="string">“default”</span></span><br></pre></td></tr></table></figure><h6 id="2-使用cfssl工具来创建，也是参考官方文档中的方法。"><a href="#2-使用cfssl工具来创建，也是参考官方文档中的方法。" class="headerlink" title="2. 使用cfssl工具来创建，也是参考官方文档中的方法。"></a><a href="#2-使用cfssl工具来创建，也是参考官方文档中的方法。" title="2\. 使用cfssl工具来创建，也是参考官方文档中的方法。"></a>2. 使用cfssl工具来创建，也是参考官方文档中的方法。</h6><ul><li><p>CFSSL是CloudFlare开源的一款PKI/TLS工具。 CFSSL 包含一个命令行工具和一个用于签名，验证并且捆绑TLS证书的HTTP API服务。使用Go语言编写。</p></li><li><p>CFSSL包括：</p><ul><li>一组用于生成自定义TLS PKI的工具</li><li>cfssl程序，是CFSSL的命令行工具</li><li>multirootca程序是可以使用多个签名密钥的证书颁发机构服务器</li><li>mkbundle程序用于构建证书池</li><li>cfssljson程序，从cfssl和multirootca程序获取JSON输出，并将证书，密钥，CSR和bundle写入磁盘</li></ul></li><li><p>PKI借助数字证书和公钥加密技术提供可信任的网络身份。通常，证书就是一个包含如下身份信息的文件：</p><ul><li>证书所有组织的信息</li><li>公钥</li><li>证书颁发组织的信息</li><li>证书颁发组织授予的权限，如证书有效期、适用的主机名、用途等</li><li>使用证书颁发组织私钥创建的数字签名</li></ul></li><li><p>cfssl工具，子命令介绍：</p><ul><li>bundle: 创建包含客户端证书的证书包</li><li>genkey: 生成一个key(私钥)和CSR(证书签名请求)</li><li>scan: 扫描主机问题</li><li>revoke: 吊销证书</li><li>certinfo: 输出给定证书的证书信息，跟cfssl-certinfo 工具作用一样</li><li>gencrl: 生成新的证书吊销列表</li><li>selfsign: 生成一个新的自签名密钥和签名证书</li><li>print-defaults: 打印默认配置，这个默认配置可以用作模板</li><li>serve: 启动一个HTTP API服务</li><li>gencert: 生成新的key(密钥)和签名证书</li><li>-ca：指明ca的证书</li><li>-ca-key：指明ca的私钥文件</li><li>-config：指明请求证书的json文件</li><li>-profile：与-config中的profile对应，是指根据config中的prof  ile段来生成证书的相关信息</li><li>ocspdump</li><li>ocspsign</li><li>info: 获取有关远程签名者的信息</li><li>sign: 签名一个客户端证书，通过给定的CA和CA密钥，和主机名</li><li>ocsprefresh</li><li>ocspserve</li></ul></li><li><p>创建认证中心(CA)，也就是Kubernetes集群的CA，上面用openssl时已经将其省略了，现cfssl操作说明下详细方法：</p><ol><li><p>CFSSL可以创建一个获取和操作证书的内部认证中心。运行认证中心需要一个CA证书和相应的CA私钥。任何知道私钥的人都可以充当CA颁发证书。因此，私钥的保护至关重要。</p><ol start="2"><li>创建用来生成CA文件的JSON配置文件,配置证书生成策略，让CA软件知道颁发什么样的证书。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ssl]# vim ca-config.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“signing”</span>: &#123;</span><br><span class="line">    <span class="string">“default”</span>: &#123;</span><br><span class="line">      <span class="string">“expiry”</span>: <span class="string">“8760h”</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">“profiles”</span>: &#123;</span><br><span class="line">      <span class="string">“kubernetes”</span>: &#123;</span><br><span class="line">        <span class="string">“usages”</span>: [</span><br><span class="line">            <span class="string">“signing”</span>,</span><br><span class="line">            <span class="string">“key encipherment”</span>,</span><br><span class="line">            <span class="string">“server auth”</span>,</span><br><span class="line">            <span class="string">“client auth”</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">“expiry”</span>: <span class="string">“8760h”</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">这个策略，有一个默认的配置，和一个profile，可以设置多个profile，这里的profile   是kubernetes。</span><br><span class="line">默认策略，指定了证书的有效期是一年(8760h)</span><br><span class="line">kubernetes策略，指定了证书的用途</span><br><span class="line">signing, 表示该证书可用于签名其它证书；生成的ca.pem 证书中   <span class="attribute">CA</span>=<span class="literal">TRUE</span></span><br><span class="line">server auth：表示client可以用该CA对server提供的证书进行验证</span><br><span class="line">client auth：表示server可以用该CA对client提供的证书进行验证</span><br></pre></td></tr></table></figure></li></ol></li><li>创建用来生成CA证书签名请求（CSR）的JSON配置文件<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ssl]<span class="comment"># vim ca-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“CN”</span>: <span class="string">“kubernetes”</span>,</span><br><span class="line">  <span class="string">“key”</span>: &#123;</span><br><span class="line">    <span class="string">“algo”</span>: <span class="string">“rsa”</span>,</span><br><span class="line">    <span class="string">“size”</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“names”</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">“C”</span>: <span class="string">“CN”</span>,</span><br><span class="line">      <span class="string">“ST”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“L”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“O”</span>: <span class="string">“k8s”</span>,</span><br><span class="line">      <span class="string">“OU”</span>: <span class="string">“System”</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">术语介绍:</span></span><br><span class="line"><span class="section">CN: Common Name，浏览器使用该字段验证网站是否合法，一般写的是域名。非常重要。浏览器使用该字段验证网站是否合法</span></span><br><span class="line"><span class="section">C: Country， 国家</span></span><br><span class="line"><span class="section">L: Locality，地区，城市</span></span><br><span class="line"><span class="section">O: Organization Name，组织名称，公司名称</span></span><br><span class="line"><span class="section">OU: Organization Unit Name，组织单位名称，公司部门</span></span><br><span class="line"><span class="section">ST: State，州，省</span></span><br></pre></td></tr></table></figure></li><li>生成CA证书（ca.pem）和私钥（ca-key.pem）<figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ linux-node1 ssl]<span class="comment"># cfssl gencert -initca ca-csr.json |   cfssljson -bare ca  </span></span><br><span class="line"><span class="comment">#初始化ca</span></span><br><span class="line">[root@ linux-node1 ssl]<span class="comment"># ls -l ca*</span></span><br><span class="line">-rw-r–r–<span class="number"> 1 </span>root root <span class="number"> 290 </span>Mar <span class="number"> 4 </span>13:45 ca-config.json</span><br><span class="line">-rw-r–r–<span class="number"> 1 </span>root root<span class="number"> 1001 </span>Mar <span class="number"> 4 </span>14:09 ca.csr</span><br><span class="line">-rw-r–r–<span class="number"> 1 </span>root root <span class="number"> 208 </span>Mar <span class="number"> 4 </span>13:51 ca-csr.json</span><br><span class="line">-rw——-<span class="number"> 1 </span>root root<span class="number"> 1679 </span>Mar <span class="number"> 4 </span>14:09 ca-key.pem</span><br><span class="line">-rw-r–r–<span class="number"> 1 </span>root root<span class="number"> 1359 </span>Mar <span class="number"> 4 </span>14:09 ca.pem</span><br><span class="line">该命令会生成运行CA所必需的文件ca-key.pem（私钥）和ca.pem（证书），还会生成ca.csr（证书签名请求），用于交叉签名或重新签名。</span><br></pre></td></tr></table></figure></li></ol><p>小提示：</p><ul><li>使用现有的CA私钥，重新生成：<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca -<span class="keyword">ca</span>-key key.pem <span class="keyword">ca</span>-csr.json |     cfssljson -bare <span class="keyword">ca</span></span><br></pre></td></tr></table></figure></li><li>使用现有的CA私钥和CA证书，重新生成：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cfssl</span> <span class="selector-tag">gencert</span> <span class="selector-tag">-renewca</span> <span class="selector-tag">-ca</span> <span class="selector-tag">cert</span><span class="selector-class">.pem</span> <span class="selector-tag">-ca-key</span> <span class="selector-tag">key</span><span class="selector-class">.pem</span></span><br></pre></td></tr></table></figure></li><li><p>查看cert(证书信息)：cfssl certinfo -cert ca.pem</p><ul><li>查看CSR(证书签名请求)信息：cfssl certinfo -csr ca.csr</li></ul></li></ul></li><li>创建martin证书签名请求(Kubernetes集群的CA创建好了，再根据该CA证书来创建一个只能访问某个namespace的用户)<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜  martin cat martin-csr.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">“CN”</span>: <span class="string">“martin”</span>,</span><br><span class="line">  <span class="string">“hosts”</span>: [],</span><br><span class="line">  <span class="string">“key”</span>: &#123;</span><br><span class="line">    <span class="string">“algo”</span>: <span class="string">“rsa”</span>,</span><br><span class="line">    <span class="string">“size”</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“names”</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">“C”</span>: <span class="string">“CN”</span>,</span><br><span class="line">      <span class="string">“ST”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“L”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“O”</span>: <span class="string">“op”</span>, <span class="comment">#system:masters</span></span><br><span class="line">      <span class="string">“OU”</span>: <span class="string">“System”</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">➜  martin </span><br><span class="line">后续kube-apiserver使用RBAC对客户端(如kubelet、kube-proxy、Pod)请求进行授权；</span><br><span class="line">kube-apiserver预定义了一些RBAC使用的RoleBindings，如cluster-admin将<span class="keyword">Group</span> <span class="title">op</span>(system:masters)与 <span class="keyword">Role</span> <span class="title">cluster-admin</span> 绑定，该Role授予了调用kube-apiserver的所有API的权限；</span><br><span class="line">OU指定该证书的Group为<span class="keyword">op</span>(system:masters)，kubelet使用该证书访问 kube-apiserver时,由于证书被CA签名，所以认证通过，同时由于证书用户组为经过预授权的<span class="keyword">op</span>(system:masters)，所以被授予访问所有 API 的权限；</span><br></pre></td></tr></table></figure></li><li>生成martin证书和私钥<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="keyword">martin </span>ls -lth</span><br><span class="line"><span class="symbol">total</span> <span class="number">4</span>.<span class="number">0</span>K</span><br><span class="line">-rw-r–r– <span class="number">1</span> root root <span class="number">218</span> Jun <span class="number">26</span> <span class="number">11</span>:<span class="number">59</span> <span class="keyword">martin-csr.json</span></span><br><span class="line"><span class="keyword">➜ </span> <span class="keyword">martin </span>cfssl gencert -ca=/<span class="meta">data</span>/kubernetes/ssl/ca.pem -ca-key=/<span class="meta">data</span>/kubernetes/ssl/ca-key.pem -config=/<span class="meta">data</span>/kubernetes/ssl/ca-config.json -profile<span class="symbol">=kubernetes</span> <span class="keyword">martin-csr.json|cfssljson </span>-<span class="keyword">bare </span><span class="keyword">martin</span></span><br><span class="line"><span class="keyword">2018/06/26 </span><span class="number">16</span>:<span class="number">20</span>:<span class="number">37</span> [<span class="meta">INFO</span>] generate received request</span><br><span class="line"><span class="number">2018</span>/<span class="number">06</span>/<span class="number">26</span> <span class="number">16</span>:<span class="number">20</span>:<span class="number">37</span> [<span class="meta">INFO</span>] received CSR</span><br><span class="line"><span class="number">2018</span>/<span class="number">06</span>/<span class="number">26</span> <span class="number">16</span>:<span class="number">20</span>:<span class="number">37</span> [<span class="meta">INFO</span>] generating key: rsa-<span class="number">2048</span></span><br><span class="line"><span class="number">2018</span>/<span class="number">06</span>/<span class="number">26</span> <span class="number">16</span>:<span class="number">20</span>:<span class="number">38</span> [<span class="meta">INFO</span>] encoded CSR</span><br><span class="line"><span class="number">2018</span>/<span class="number">06</span>/<span class="number">26</span> <span class="number">16</span>:<span class="number">20</span>:<span class="number">38</span> [<span class="meta">INFO</span>] signed certificate with serial number <span class="number">451530418945753741698899402739082416074910829402</span></span><br><span class="line"><span class="number">2018</span>/<span class="number">06</span>/<span class="number">26</span> <span class="number">16</span>:<span class="number">20</span>:<span class="number">38</span> [WARNING] This certificate lacks a <span class="string">“hosts”</span> <span class="meta">field</span>. This makes <span class="keyword">it </span>unsuitable for</span><br><span class="line"><span class="symbol">websites.</span> For more information see the <span class="keyword">Baseline </span>Requirements for the Issuance <span class="keyword">and </span>Management</span><br><span class="line"><span class="symbol">of</span> Publicly-Trusted Certificates, v.<span class="number">1</span>.<span class="number">1</span>.<span class="number">6</span>, from the CA/<span class="keyword">Browser </span>Forum (<a href="https://cabforum.org" target="_blank" rel="noopener">https://cabforum.org</a>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">specifically</span>, section <span class="number">10</span>.<span class="number">2</span>.<span class="number">3</span> (<span class="string">“Information Requirements”</span>).</span><br><span class="line">➜  <span class="keyword">martin </span>ls -lth</span><br><span class="line"><span class="symbol">total</span> <span class="number">16</span>K</span><br><span class="line">-rw-r–r– <span class="number">1</span> root root  <span class="number">993</span> Jun <span class="number">26</span> <span class="number">16</span>:<span class="number">20</span> <span class="keyword">martin.csr</span></span><br><span class="line"><span class="keyword">-rw——- </span><span class="number">1</span> root root <span class="number">1</span>.<span class="number">7</span>K Jun <span class="number">26</span> <span class="number">16</span>:<span class="number">20</span> <span class="keyword">martin-key.pem</span></span><br><span class="line"><span class="keyword">-rw-r–r– </span><span class="number">1</span> root root <span class="number">1</span>.<span class="number">4</span>K Jun <span class="number">26</span> <span class="number">16</span>:<span class="number">20</span> <span class="keyword">martin.pem</span></span><br><span class="line"><span class="keyword">-rw-r–r– </span><span class="number">1</span> root root  <span class="number">218</span> Jun <span class="number">26</span> <span class="number">11</span>:<span class="number">59</span> <span class="keyword">martin-csr.json</span></span><br><span class="line"><span class="keyword">➜ </span> <span class="keyword">martin</span></span><br></pre></td></tr></table></figure></li><li>设置集群参数</li></ul><p>本段主要设置了需要访问的集群的信息。使用set-cluster设置了需要访问的集群，如下为kubernetes，这只是个名称，实际为–server指向的apiserver；–certificate-authority设置了该集群的公钥；–embed-certs为true表示将–certificate-authority证书写入到kubeconfig中；–server则表示该集群的kube-apiserver地址</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl config set-cluster kubernetes –certificate-authority=/data/kubernetes/ssl/ca<span class="selector-class">.pem</span> –embed-certs=true –server=https:<span class="comment">//192.168.0.14:6443 –kubeconfig=martin.kubeconfig</span></span><br><span class="line">Cluster <span class="string">“kubernetes”</span> set.</span><br><span class="line">➜  martin ls -lth</span><br><span class="line">total <span class="number">20</span>K</span><br><span class="line">-rw——- <span class="number">1</span> root root <span class="number">2.0</span>K Jun <span class="number">26</span> <span class="number">16</span>:<span class="number">29</span> martin.kubeconfig</span><br><span class="line">-rw-r–r– <span class="number">1</span> root root  <span class="number">993</span> Jun <span class="number">26</span> <span class="number">16</span>:<span class="number">20</span> martin.csr</span><br><span class="line">-rw——- <span class="number">1</span> root root <span class="number">1.7</span>K Jun <span class="number">26</span> <span class="number">16</span>:<span class="number">20</span> martin-key.pem</span><br><span class="line">-rw-r–r– <span class="number">1</span> root root <span class="number">1.4</span>K Jun <span class="number">26</span> <span class="number">16</span>:<span class="number">20</span> martin.pem</span><br><span class="line">-rw-r–r– <span class="number">1</span> root root  <span class="number">218</span> Jun <span class="number">26</span> <span class="number">11</span>:<span class="number">59</span> martin-csr.json</span><br><span class="line">生成了新的文件：martin.kubeconfig</span><br><span class="line">➜  martin cat martin<span class="selector-class">.kubeconfig</span> </span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: xxx</span><br><span class="line">    server: https:<span class="comment">//192.168.0.14:6443</span></span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts: []</span><br><span class="line">current-context: <span class="string">“”</span></span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users: []</span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><p>注意：–kubeconfig=martin.kubeconfig是将生成的相关信息全部写入martin.kubeconfig文件,如果不指定的话，默认是写入到“~/.kube/config ”</p><ul><li>设置客户端认证参数</li></ul><p>本段主要设置用户的相关信息，主要是用户证书。如下用户名为martin，证书为：/martin.pem，私钥为：./martin-key.pem。客户端的证书首先要经过集群CA的签署，否则不会被集群认可。此处使用的是ca认证方式，也可以使用token认证，如kubelet的TLS Boostrap机制下的bootstrapping使用的就是token认证方式。如下kubectl使用的是ca认证，不需要token字段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl<span class="built_in"> config </span>set-credentials martin <span class="attribute">–client-certificate</span>=./martin.pem <span class="attribute">–client-key</span>=./martin-key.pem <span class="attribute">–embed-certs</span>=<span class="literal">true</span> <span class="attribute">–kubeconfig</span>=martin.kubeconfig                                      </span><br><span class="line">User <span class="string">“martin”</span> set.</span><br><span class="line">➜  martin </span><br><span class="line">可以看到martin.kubeconfig新增了如下内容：</span><br><span class="line">users:</span><br><span class="line">- name: martin</span><br><span class="line">  user:</span><br><span class="line">    xxx</span><br></pre></td></tr></table></figure><ul><li>设置上下文参数,指定命名空间为：kube-system</li></ul><p>集群参数和用户参数可以同时设置多对，在上下文参数中将集群参数和用户参数关联起来。下面的上下文名称为martin-context，集群为kubenetes，用户为martin，表示使用martin的用户凭证来访问kubenetes集群的kube-system命名空间(增加–namspace来指定访问的命名空间)。</p><p>执行之前先看下:martin.kubeconfig文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">martin</span> <span class="string">cat</span> <span class="string">martin.kubeconfig</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="attr">- cluster:</span></span><br><span class="line"><span class="attr">    certificate-authority-data:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">    server:</span> <span class="attr"><a href="https://192.168.0.14:6443" target="_blank" rel="noopener">https://192.168.0.14:6443</a></span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">contexts:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">“”</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">martin</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    client-certificate-data:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">    client-key-data:</span> <span class="string">xxx</span></span><br><span class="line"><span class="string">➜</span>  <span class="string">martin</span></span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl<span class="built_in"> config </span>set-context martin-context <span class="attribute">–cluster</span>=kubernetes <span class="attribute">–namespace</span>=kube-system <span class="attribute">–user</span>=martin <span class="attribute">–kubeconfig</span>=martin.kubeconfig   </span><br><span class="line">Context <span class="string">“martin-context”</span> created.</span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><p>再次查看martin.kubeconfig文件,发现内容做了如下改变：<br>之前：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contexts: <span class="string">[]</span></span><br></pre></td></tr></table></figure><p>现在：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">contexts</span>:</span><br><span class="line">- <span class="attribute">context</span>:</span><br><span class="line">    <span class="attribute">cluster</span>: kubernetes</span><br><span class="line">    <span class="attribute">namespace</span>: kube-system</span><br><span class="line">    <span class="attribute">user</span>: martin</span><br><span class="line">  <span class="attribute">name</span>: martin-context</span><br></pre></td></tr></table></figure><p>增加了上下文的相关信息。</p><ul><li>设置默认上下文<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl<span class="built_in"> config </span>use-context martin-context <span class="attribute">–kubeconfig</span>=martin.kubeconfig</span><br><span class="line">Switched <span class="keyword">to</span> context <span class="string">“martin-context”</span>.</span><br></pre></td></tr></table></figure></li></ul><p>如果配置了多个环境项，可以通过切换不同的环境项名字或指定kubeconfig文件来访问到不同的集群环境。</p><ul><li>现在martin用户通过cfssl创建成功,可以看到所有关于martin用户的信息都写入了配置文件：martin.kubeconfig,不指定”-kubeconfig=”的话，默认是写入到”~/.kube/config”，如果之前有admin的相关信息，会追加到后面。martin.kubeconfig配置文件描述了集群、用户和上下文</li></ul><p>kubectl只是个go编写的可执行程序，只要为kubectl配置合适的kubeconfig，就可以在集群中的任意节点使用。kubectl默认会从$HOME/.kube目录下查找文件名为config的文件，也可以通过设置环境变量KUBECONFIG或者通过设置–kubeconfig去指定其它kubeconfig文件,总之kubeconfig就是为访问集群所作的配置。</p><p>如果之前”~/.kube/config”下配置的是admin账号信息，要用martin账号，则指定kubeconfig文件即可：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="string">martin </span><span class="string">kubectl </span><span class="string">config </span><span class="built_in">get-contexts</span>                               </span><br><span class="line"><span class="string">CURRENT </span>  <span class="string">NAME </span>        <span class="string">CLUSTER </span>     <span class="string">AUTHINFO </span>  <span class="string">NAMESPACE</span></span><br><span class="line"><span class="string"><em></em></span>         <span class="string">kubernetes </span>  <span class="string">kubernetes </span>  <span class="string">admin </span>     </span><br><span class="line">➜  <span class="string">martin </span></span><br><span class="line">➜  <span class="string">martin </span><span class="string">kubectl </span><span class="string">config </span><span class="built_in">get-contexts</span> <span class="built_in">–kubeconfig</span> <span class="string">martin.</span><span class="string">kubeconfig</span></span><br><span class="line"><span class="string">CURRENT </span>  <span class="string">NAME </span>            <span class="string">CLUSTER </span>     <span class="string">AUTHINFO </span>  <span class="string">NAMESPACE</span></span><br><span class="line"><span class="string"></span>         <span class="string">martin-context </span>  <span class="string">kubernetes </span>  <span class="string">martin </span>    <span class="string">kube-system</span></span><br><span class="line"><span class="string">➜</span>  <span class="string">martin</span></span><br></pre></td></tr></table></figure><p>现在使用当前的这个配置文件来操作kubectl命令的时候，应该会出现错误，因为还没有为该用户定义任何操作的权限呢：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl <span class="builtin-name">get</span> pods –kubeconfig martin.kubeconfig</span><br><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Forbidden): pods is forbidden:<span class="built_in"> User </span><span class="string">“martin”</span> cannot list pods <span class="keyword">in</span> the namespace <span class="string">“default”</span></span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><p>如果提示：“kubectl error: You must be logged in to the server (Unauthorized)”<br>则是没有指定martin.kubeconfig文件或者默认的”~/.kube/config”里面没有martin用户的相关证书信息，因为前面设置客户端认证的时候没有指定password，而是用了证书。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> config </span>set-credentials kubeuser/foo.kubernetes.com <span class="attribute">–username</span>=kubeuser <span class="attribute">–password</span>=kubepassword (用户名密码认证方式)</span><br><span class="line"></span><br><span class="line">kubectl<span class="built_in"> config </span>set-credentials martin <span class="attribute">–client-certificate</span>=./martin.pem <span class="attribute">–client-key</span>=./martin-key.pem <span class="attribute">–embed-certs</span>=<span class="literal">true</span> <span class="attribute">–kubeconfig</span>=martin.kubeconfig</span><br><span class="line">(证书认证方式)</span><br></pre></td></tr></table></figure><p>另外可以通过：”Cfssl-Certinfo“命令来查看martin证书信息</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="keyword">martin </span>cfssl-certinfo -cert <span class="keyword">martin.pem</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"> </span> <span class="string">“subject”</span>: &#123;</span><br><span class="line">    <span class="string">“common_name”</span>: <span class="string">“martin”</span>,</span><br><span class="line">    <span class="string">“country”</span>: <span class="string">“CN”</span>,</span><br><span class="line">    <span class="string">“organization”</span>: <span class="string">“op”</span>,</span><br><span class="line">    <span class="string">“organizational_unit”</span>: <span class="string">“System”</span>,</span><br><span class="line">    <span class="string">“locality”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">    <span class="string">“province”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">    <span class="string">“names”</span>: [</span><br><span class="line">      <span class="string">“CN”</span>,</span><br><span class="line">      <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“op”</span>,</span><br><span class="line">      <span class="string">“System”</span>,</span><br><span class="line">      <span class="string">“martin”</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">“issuer”</span>: &#123;</span><br><span class="line">    <span class="string">“common_name”</span>: <span class="string">“kubernetes”</span>,</span><br><span class="line">    <span class="string">“country”</span>: <span class="string">“CN”</span>,</span><br><span class="line">    <span class="string">“organization”</span>: <span class="string">“k8s”</span>,</span><br><span class="line">    <span class="string">“organizational_unit”</span>: <span class="string">“System”</span>,</span><br><span class="line">    <span class="string">“locality”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">    <span class="string">“province”</span>: <span class="string">“BeiJing”</span>,</span><br><span class="line">    <span class="string">“names”</span>: [</span><br><span class="line">      <span class="string">“CN”</span>,</span><br><span class="line">      <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“BeiJing”</span>,</span><br><span class="line">      <span class="string">“k8s”</span>,</span><br><span class="line">      <span class="string">“System”</span>,</span><br><span class="line">      <span class="string">“kubernetes”</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h5 id="第二步：创建角色"><a href="#第二步：创建角色" class="headerlink" title="第二步：创建角色"></a><a href="#第二步：创建角色" title="第二步：创建角色"></a>第二步：创建角色</h5><p>用户创建完成后，接下来就需要给该用户添加操作权限，定义一个YAML文件，创建一个允许用户操作Deployment、Pod、ReplicaSets 的角色，如下定义：(martin-role.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  martin cat martin-role.yaml </span><br><span class="line"><span class="symbol">apiVersion:</span> rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="symbol">kind:</span> Role</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> martin-role</span><br><span class="line"><span class="symbol">  namespace:</span> kube-system</span><br><span class="line"><span class="symbol">rules:</span></span><br><span class="line">- apiGroups: [<span class="string">“”</span>, <span class="string">“extensions”</span>, <span class="string">“apps”</span>]</span><br><span class="line"><span class="symbol">  resources:</span> [<span class="string">“deployments”</span>, <span class="string">“replicasets”</span>, <span class="string">“pods”</span>]</span><br><span class="line"><span class="symbol">  verbs:</span> [<span class="string">“get”</span>, <span class="string">“list”</span>, <span class="string">“watch”</span>, <span class="string">“create”</span>, <span class="string">“update”</span>, <span class="string">“patch”</span>, <span class="string">“delete”</span>] <span class="meta"># 也可以使用[<span class="string">‘*’</span>]</span></span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><p>其中Pod属于core这个API Group，在YAML中用空字符就可以，而Deployment属于apps 这个API Group，ReplicaSets属于extensions这个API Group(<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/" target="_blank" rel="noopener">点这里查文档</a>)，所以 rules下面的apiGroups 就综合了这几个资源的 API Group：[“”, “extensions”, “apps”]，其中verbs就是上面提到的可以对这些资源对象执行的操作，这里需要所有的操作方法，所以也可以使用[‘*’]来代替。</p><p>然后创建这个Role:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl create -f martin-role<span class="selector-class">.yaml</span> </span><br><span class="line">role<span class="selector-class">.rbac</span><span class="selector-class">.authorization</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span> <span class="string">“martin-role”</span> created</span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><p>注意这里没有使用上面的martin-context这个上下文，因为木有权限</p><h5 id="第三步：创建角色权限绑定"><a href="#第三步：创建角色权限绑定" class="headerlink" title="第三步：创建角色权限绑定"></a><a href="#第三步：创建角色权限绑定" title="第三步：创建角色权限绑定"></a>第三步：创建角色权限绑定</h5><p>Role创建完成了，但是很明显现在这个Role和我们的用户martin 还没有任何关系，这里就需要创建一个RoleBinding对象，在 kube-system这个命名空间下面将上面的martin-role角色和用户 martin进行绑定:(martin-rolebinding.yaml)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  martin cat martin-rolebinding<span class="selector-class">.yaml</span> </span><br><span class="line">apiVersion: rbac<span class="selector-class">.authorization</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span>/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: martin-rolebinding</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  <span class="selector-id">#apiGroup</span>: rbac<span class="selector-class">.authorization</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span></span><br><span class="line">  <span class="selector-id">#kind</span>: ClusterRole</span><br><span class="line">  kind: Role</span><br><span class="line">  name: martin-role</span><br><span class="line">  apiGroup: <span class="string">“”</span></span><br><span class="line">subjects:</span><br><span class="line">- apiGroup: <span class="string">“”</span></span><br><span class="line">  kind: User</span><br><span class="line">  name: martin</span><br><span class="line">  <span class="selector-id">#apiGroup</span>: <span class="string">“”</span>  #会提示语法错误</span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><p>上面的YAML文件中看到了subjects关键字，这里就是上面提到的用来尝试操作集群的对象，这里对应上面的 User帐号martin，使用kubectl创建上面的资源对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl create -f martin-rolebinding.yaml</span><br><span class="line">rolebinding<span class="selector-class">.rbac</span><span class="selector-class">.authorization</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span> <span class="string">“martin-rolebinding”</span> created</span><br></pre></td></tr></table></figure><p>使用admin账号(martin账号无权限查看)查看role和rolebinding相关信息：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl <span class="built_in">get</span> rolebinding <span class="comment">–all-namespaces</span></span><br><span class="line">NAMESPACE     NAME                                             AGE</span><br><span class="line">kube-public   <span class="keyword">system</span>:controller:bootstrap-signer               <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   kubernetes-dashboard-minimal                     <span class="number">11</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   martin-rolebinding                               <span class="number">18</span>h</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>::leader-locking-kube-controller-manager   <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>::leader-locking-kube-scheduler            <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>:controller:bootstrap-signer               <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>:controller:cloud-provider                 <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>:controller:<span class="keyword">token</span>-cleaner                  <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   ui-admin-binding                                 <span class="number">11</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   ui-<span class="built_in">read</span>-binding                                  <span class="number">11</span>d</span><br><span class="line">➜  martin </span><br><span class="line">➜  martin kubectl <span class="built_in">get</span> role <span class="comment">–all-namespaces            </span></span><br><span class="line">NAMESPACE     NAME                                             AGE</span><br><span class="line">kube-public   <span class="keyword">system</span>:controller:bootstrap-signer               <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   extension-apiserver-authentication-reader        <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   kubernetes-dashboard-minimal                     <span class="number">11</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   martin-role                                      <span class="number">18</span>h</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>::leader-locking-kube-controller-manager   <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>::leader-locking-kube-scheduler            <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>:controller:bootstrap-signer               <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>:controller:cloud-provider                 <span class="number">19</span>d</span><br><span class="line">kube-<span class="keyword">system</span>   <span class="keyword">system</span>:controller:<span class="keyword">token</span>-cleaner                  <span class="number">19</span>d</span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><h5 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a><a href="#第四步：测试" title="第四步：测试"></a>第四步：测试</h5><p>现在应该可以用上面的martin-context上下文来操作集群了：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl get pods                                          </span><br><span class="line">NAME                              READY     STATUS    RESTARTS   AGE</span><br><span class="line">nexus3<span class="number">-68</span>f55d9746-vfnf8           <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">5</span>d</span><br><span class="line">rbd-rest-api-registrykey-m262<span class="number">-1</span>   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">4</span>d</span><br><span class="line">➜  martin </span><br><span class="line">➜  martin kubectl get pods -n <span class="section">default</span></span><br><span class="line">NAME                              READY     STATUS    RESTARTS   AGE</span><br><span class="line">nexus3<span class="number">-68</span>f55d9746-vfnf8           <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">5</span>d</span><br><span class="line">rbd-rest-api-registrykey-m262<span class="number">-1</span>   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">4</span>d</span><br><span class="line">➜  martin </span><br><span class="line">➜  martin kubectl get pods –kubeconfig martin.kubeconfig</span><br><span class="line">NAME                                    READY     STATUS    RESTARTS   AGE</span><br><span class="line">coredns<span class="number">-77</span>c989547b-lcbfw                <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">1</span>          <span class="number">15</span>d</span><br><span class="line">coredns<span class="number">-77</span>c989547b-xq4dr                <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">1</span>          <span class="number">15</span>d</span><br><span class="line">heapster<span class="number">-77</span>b9c5bd7b-l5ms6               <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">11</span>d</span><br><span class="line">kubernetes-dashboard<span class="number">-66</span>c9d98865-g8l6l   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">11</span>d</span><br><span class="line">monitoring-grafana<span class="number">-7</span>c674cb7f6-nqvlw     <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">11</span>d</span><br><span class="line">monitoring-influxdb<span class="number">-644</span>db5c5b6-llnp9    <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">11</span>d</span><br></pre></td></tr></table></figure><p>使用kubectl时并没有指定namespace，这是因为之前已经为该用户分配了权限，并且指定了kube-system命名空间写入到martin.kubeconfig文件中，如果使用default命名空间，在后面加上一个-n default，则会提示forbidden,如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  martin kubectl <span class="builtin-name">get</span> pods -n<span class="built_in"> default </span>–kubeconfig martin.kubeconfig </span><br><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Forbidden): pods is forbidden:<span class="built_in"> User </span><span class="string">“martin”</span> cannot list pods <span class="keyword">in</span> the namespace <span class="string">“default”</span></span><br><span class="line">➜  martin</span><br></pre></td></tr></table></figure><p>这是因为该用户并没有default这个命名空间的操作权限。</p><hr><h4 id="创建一个只能访问某个namespace的ServiceAccount"><a href="#创建一个只能访问某个namespace的ServiceAccount" class="headerlink" title="创建一个只能访问某个namespace的ServiceAccount"></a><a href="#创建一个只能访问某个namespace的ServiceAccount" title="创建一个只能访问某个namespace的ServiceAccount"></a>创建一个只能访问某个namespace的ServiceAccount</h4><p>上面创建了一个只能访问某个命名空间下面的普通用户，前面也提到过subjects,下面还有一种类型的主题资源：ServiceAccount。</p><h5 id="第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments"><a href="#第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments" class="headerlink" title="第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments"></a><a href="#第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments" title="第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments"></a>第一步：创建一个集群内部的用户只能操作kube-system这个命名空间下面的pods和deployments</h5><p>首先来创建一个ServiceAccount对象：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl create sa martin-sa -n kube-system</span><br><span class="line">serviceaccount <span class="string">“martin-sa”</span> created</span><br><span class="line">➜  serviceaccount </span><br><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span> sa </span><br><span class="line">NAME      SECRETS   AGE</span><br><span class="line">default   1         20d</span><br><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span> sa -n kube-system</span><br><span class="line">NAME                   SECRETS   AGE</span><br><span class="line">admin-user             1         11d</span><br><span class="line">coredns                1         15d</span><br><span class="line">default                1         20d</span><br><span class="line">heapster               1         11d</span><br><span class="line">kubernetes-dashboard   1         11d</span><br><span class="line">martin-sa              1         13s</span><br><span class="line">➜  serviceaccount</span><br></pre></td></tr></table></figure><p>当然也可以定义成YAML文件的形式来创建:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> ServiceAccount</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> martin-sa</span><br><span class="line"><span class="symbol">  namespace:</span> kube-system</span><br></pre></td></tr></table></figure><h5 id="第二步：创建一个Role对象：-martin-sa-role-yaml"><a href="#第二步：创建一个Role对象：-martin-sa-role-yaml" class="headerlink" title="第二步：创建一个Role对象：(martin-sa-role.yaml)"></a><a href="#第二步：创建一个Role对象：-martin-sa-role-yaml" title="第二步：创建一个Role对象：(martin-sa-role.yaml)"></a>第二步：创建一个Role对象：(martin-sa-role.yaml)</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount <span class="keyword">cat</span> martin-<span class="keyword">sa</span>-role.yaml </span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadat<span class="variable">a:</span></span><br><span class="line">  name: martin-<span class="keyword">sa</span>-role</span><br><span class="line">  namespace: kube-<span class="built_in">system</span></span><br><span class="line">rule<span class="variable">s:</span></span><br><span class="line">- apiGroup<span class="variable">s:</span> [<span class="string">“”</span>]</span><br><span class="line">  resource<span class="variable">s:</span> [<span class="string">“pods”</span>]</span><br><span class="line">  <span class="keyword">verb</span><span class="variable">s:</span> [<span class="string">“get”</span>, <span class="string">“list”</span>, <span class="string">“watch”</span>] # 也可以使用[<span class="string">‘*’</span>]</span><br><span class="line">- apiGroup<span class="variable">s:</span> [<span class="string">“apps”</span>]</span><br><span class="line">  resource<span class="variable">s:</span> [<span class="string">“deployments”</span>]</span><br><span class="line">  <span class="keyword">verb</span><span class="variable">s:</span> [<span class="string">“get”</span>, <span class="string">“list”</span>, <span class="string">“watch”</span>, <span class="string">“create”</span>, <span class="string">“update”</span>, <span class="string">“patch”</span>, <span class="string">“delete”</span>]</span><br><span class="line">➜  serviceaccount</span><br></pre></td></tr></table></figure><p>可以看到这里定义的角色没有创建、删除、更新Pod的权限，等会可以重点测试一下。</p><p>创建该Role对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl create -f martin-sa-role<span class="selector-class">.yaml</span> </span><br><span class="line">role<span class="selector-class">.rbac</span><span class="selector-class">.authorization</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span> <span class="string">“martin-sa-role”</span> created</span><br></pre></td></tr></table></figure><h5 id="第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：-martin-sa-rolebinding-yaml"><a href="#第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：-martin-sa-rolebinding-yaml" class="headerlink" title="第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：(martin-sa-rolebinding.yaml)"></a><a href="#第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：-martin-sa-rolebinding-yaml" title="第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：(martin-sa-rolebinding.yaml)"></a>第三步，创建一个RoleBinding对象，将上面的martin-sa和角色martin-sa-role进行绑定：(martin-sa-rolebinding.yaml)</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">serviceaccount</span> <span class="string">cat</span> <span class="string">martin-sa-rolebinding.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa-rolebinding</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa-role</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><p>创建这个资源对象：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl <span class="built_in">get</span> rolebinding -n kube-<span class="built_in">system</span></span><br><span class="line">NAME                                             AGE</span><br><span class="line">kubernetes-dashboard-minimal                     <span class="number">11</span>d</span><br><span class="line">martin-rolebinding                               <span class="number">22</span>h</span><br><span class="line">➜  serviceaccount </span><br><span class="line"></span><br><span class="line">➜  serviceaccount kubectl create -<span class="keyword">f</span> martin-<span class="keyword">sa</span>-rolebinding.yaml </span><br><span class="line">rolebinding.rbac.authorization.k8s.io <span class="string">“martin-sa-rolebinding”</span> created</span><br><span class="line">➜  serviceaccount </span><br><span class="line">➜  serviceaccount kubectl <span class="built_in">get</span> rolebinding               </span><br><span class="line">No resources found.</span><br><span class="line">➜  serviceaccount kubectl <span class="built_in">get</span> rolebinding -n kube-<span class="built_in">system</span></span><br><span class="line">NAME                                             AGE</span><br><span class="line">kubernetes-dashboard-minimal                     <span class="number">11</span>d</span><br><span class="line">martin-rolebinding                               <span class="number">23</span>h</span><br><span class="line">martin-<span class="keyword">sa</span>-rolebinding                            <span class="number">26</span>s</span><br><span class="line">可以看到martin-<span class="keyword">sa</span>-rolebinding已经添加</span><br></pre></td></tr></table></figure><h5 id="第四步，验证这个ServiceAccount"><a href="#第四步，验证这个ServiceAccount" class="headerlink" title="第四步，验证这个ServiceAccount"></a><a href="#第四步，验证这个ServiceAccount" title="第四步，验证这个ServiceAccount"></a>第四步，验证这个ServiceAccount</h5><p>一个ServiceAccount会生成一个Secret对象和它进行映射，这个Secret里面包含一个token：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span><span class="built_in"> secret </span>-n kube-system</span><br><span class="line">NAME                              <span class="built_in"> TYPE </span>                                 DATA      AGE</span><br><span class="line">admin-user-token-xszp7             kubernetes.io/service-account-token   3         11d</span><br><span class="line">coredns-token-9ppnq                kubernetes.io/service-account-token   3         15d</span><br><span class="line">default-token-fs7zj                kubernetes.io/service-account-token   3         20d</span><br><span class="line">heapster-token-gn8g5               kubernetes.io/service-account-token   3         11d</span><br><span class="line">kubernetes-dashboard-certs         Opaque                                0         11d</span><br><span class="line">kubernetes-dashboard-key-holder    Opaque                                2         15d</span><br><span class="line">kubernetes-dashboard-token-tg782   kubernetes.io/service-account-token   3         11d</span><br><span class="line">martin-sa-token-78s5j              kubernetes.io/service-account-token   3         41m  #新增</span><br><span class="line">➜  serviceaccount </span><br><span class="line">➜  serviceaccount kubectl describe<span class="built_in"> secret </span>martin-sa-token-78s5j -n kube-system</span><br><span class="line">Name:         martin-sa-token-78s5j</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.<span class="attribute">name</span>=martin-sa</span><br><span class="line">              kubernetes.io/service-account.<span class="attribute">uid</span>=576ef41d-79e2-11e8-bede-5254004f2222</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1359 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      xxx</span><br><span class="line">➜  serviceaccount</span><br></pre></td></tr></table></figure><p>==注意：查看时需要-n指定kube-system命名空间！==</p><p>然后可以利用这个token去登录Dashboard，就可以在Dashboard中来验证功能是否符合预期：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span><span class="built_in"> secret </span>martin-sa-token-78s5j -o jsonpath=&#123;.data.token&#125; -n kube-system |base64 -d #会生成一串很长的base64后的字符串</span><br><span class="line">xxxxxxxxxxxxxxxx</span><br><span class="line">➜  serviceaccount</span><br></pre></td></tr></table></figure><p>使用这里的xxx token去Dashboard页面进行登录：<br>会出现如下提示信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configmaps is forbidden:<span class="built_in"> User </span><span class="string">“system:serviceaccount:kube-system:martin-sa”</span> cannot list configmaps <span class="keyword">in</span> the namespace <span class="string">“default”</span></span><br><span class="line">close</span><br><span class="line">warning</span><br><span class="line">persistentvolumeclaims is forbidden:<span class="built_in"> User </span><span class="string">“system:serviceaccount:kube-system:martin-sa”</span> cannot list persistentvolumeclaims <span class="keyword">in</span> the namespace <span class="string">“default”</span></span><br></pre></td></tr></table></figure><p>这是因为登录进来后默认跳转到default命名空间，但是却没有改空间的权限，因此需要切换到kube-system命名空间下面:</p><p>原来url:<br><a href="https://xxx/#!/deployment?namespace=default" target="_blank" rel="noopener">https://xxx/#!/deployment?namespace=default</a></p><p>修改为新url:<br><a href="https://xxx/#!/deployment?namespace=kube-system" target="_blank" rel="noopener">https://xxx/#!/deployment?namespace=kube-system</a></p><p>可以看到能访问pod列表了，但是也会有一些其他额外的提示：events is forbidden: User “system:serviceaccount:kube-system:martin-sa” cannot list events in the namespace “kube-system”，这是因为当前登录用只被授权了访问pod和deployment的权限，同样的，访问下deployment看看可以了吗？</p><p>同样的，可以根据自己的需求来对访问用户的权限进行限制，可以自己通过Role定义更加细粒度的权限，也可以使用系统内置的一些权限……</p><hr><h4 id="创建一个可以访问所有-namespace-的ServiceAccount"><a href="#创建一个可以访问所有-namespace-的ServiceAccount" class="headerlink" title="创建一个可以访问所有 namespace 的ServiceAccount"></a><a href="#创建一个可以访问所有-namespace-的ServiceAccount" title="创建一个可以访问所有 namespace 的ServiceAccount"></a>创建一个可以访问所有 namespace 的ServiceAccount</h4><p>刚刚创建的martin-sa这个ServiceAccount和一个Role角色进行绑定的，如果现在创建一个新的ServiceAccount，需要他操作的权限作用于所有的namespace，这个时候就需要使用到ClusterRole 和 ClusterRoleBinding 这两种资源对象了。</p><h5 id="第一步，同样，首先新建一个ServiceAcount对象：-martin-sa2-yaml"><a href="#第一步，同样，首先新建一个ServiceAcount对象：-martin-sa2-yaml" class="headerlink" title="第一步，同样，首先新建一个ServiceAcount对象：(martin-sa2.yaml)"></a><a href="#第一步，同样，首先新建一个ServiceAcount对象：-martin-sa2-yaml" title="第一步，同样，首先新建一个ServiceAcount对象：(martin-sa2.yaml)"></a>第一步，同样，首先新建一个ServiceAcount对象：(martin-sa2.yaml)</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount cat martin-sa2.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: martin-sa2</span><br><span class="line">  namespace: kube-system</span><br><span class="line">➜  serviceaccount </span><br><span class="line">➜  serviceaccount kubectl create -f martin-sa2.yaml </span><br><span class="line">serviceaccount <span class="string">“martin-sa2”</span> created</span><br><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span> sa   </span><br><span class="line">NAME      SECRETS   AGE</span><br><span class="line">default   1         20d</span><br><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span> sa -n kube-system</span><br><span class="line">NAME                   SECRETS   AGE</span><br><span class="line">admin-user             1         12d</span><br><span class="line">coredns                1         15d</span><br><span class="line">default                1         20d</span><br><span class="line">heapster               1         12d</span><br><span class="line">kubernetes-dashboard   1         12d</span><br><span class="line">martin-sa              1         1h</span><br><span class="line">martin-sa2             1         12s</span><br><span class="line">➜  serviceaccount</span><br></pre></td></tr></table></figure><h5 id="第二步，创建一个ClusterRoleBinding-对象-martin-clusterolebinding-yaml"><a href="#第二步，创建一个ClusterRoleBinding-对象-martin-clusterolebinding-yaml" class="headerlink" title="第二步，创建一个ClusterRoleBinding 对象(martin-clusterolebinding.yaml):"></a><a href="#第二步，创建一个ClusterRoleBinding-对象-martin-clusterolebinding-yaml" title="第二步，创建一个ClusterRoleBinding 对象(martin-clusterolebinding.yaml):"></a>第二步，创建一个ClusterRoleBinding 对象(martin-clusterolebinding.yaml):</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">serviceaccount</span> <span class="string">cat</span> <span class="string">martin-clusterolebinding.yaml</span>   </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa2-clusterrolebinding</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa2</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">➜</span>  <span class="string">serviceaccount</span></span><br></pre></td></tr></table></figure><p>对比下之前的”martin-sa-rolebinding.yaml”</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">serviceaccount</span> <span class="string">cat</span> <span class="string">martin-sa-rolebinding.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa-rolebinding</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">martin-sa-role</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">➜</span>  <span class="string">serviceaccount</span></span><br></pre></td></tr></table></figure><p>从上面可以看到没有为这个资源对象声明namespace，因为这是一个ClusterRoleBinding 资源对象，是作用于整个集群的，也没有单独新建一个ClusterRole对象，而是使用的 cluster-admin这个对象，这是Kubernetes集群内置的ClusterRole对象，可以使用kubectl get clusterrole 和kubectl get clusterrolebinding查看系统内置的一些集群角色和集群角色绑定，这里使用的 cluster-admin这个集群角色是拥有最高权限的集群角色，所以一般需要谨慎使用该集群角色。</p><p>创建上面集群角色绑定资源对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl create -f martin-clusterolebinding<span class="selector-class">.yaml</span> </span><br><span class="line">clusterrolebinding<span class="selector-class">.rbac</span><span class="selector-class">.authorization</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span> <span class="string">“martin-sa2-clusterrolebinding”</span> created</span><br><span class="line">➜  serviceaccount</span><br></pre></td></tr></table></figure><p>通过ubectl get clusterrolebinding可以看到”martin-sa2-clusterrolebinding”已经加入其中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl get clusterrolebinding </span><br><span class="line">NAME                                                   AGE</span><br><span class="line">admin-user                                             <span class="number">12d</span></span><br><span class="line">cluster-admin                                          <span class="number">20d</span></span><br><span class="line">heapster                                               <span class="number">12d</span></span><br><span class="line">kubelet-bootstrap                                      <span class="number">19d</span></span><br><span class="line">martin-sa2-clusterrolebinding                          <span class="number">22s</span></span><br></pre></td></tr></table></figure><h5 id="第三步，使用-ServiceAccount对应的token去登录Dashboard验证："><a href="#第三步，使用-ServiceAccount对应的token去登录Dashboard验证：" class="headerlink" title="第三步，使用 ServiceAccount对应的token去登录Dashboard验证："></a><a href="#第三步，使用-ServiceAccount对应的token去登录Dashboard验证：" title="第三步，使用 ServiceAccount对应的token去登录Dashboard验证："></a>第三步，使用 ServiceAccount对应的token去登录Dashboard验证：</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span><span class="built_in"> secret </span>-n kube-system|grep martin-sa2-token-q7bhr</span><br><span class="line">martin-sa2-token-q7bhr             kubernetes.io/service-account-token   3         34m</span><br><span class="line">➜  serviceaccount </span><br><span class="line">➜  serviceaccount kubectl <span class="builtin-name">get</span><span class="built_in"> secret </span>martin-sa2-token-q7bhr -o jsonpath=&#123;.data.token&#125; -n kube-system |base64 -d</span><br><span class="line">xxxxxxx</span><br><span class="line"><span class="comment">#会生成一串很长的base64后的字符串</span></span><br><span class="line">➜  serviceaccount</span><br></pre></td></tr></table></figure><p>在最开始接触到RBAC认证的时候，可能不太熟悉，特别是不知道应该怎么去编写rules规则，可以去分析系统自带的clusterrole、clusterrolebinding这些资源对象的编写方法，利用 kubectl的get、describe、-o yaml这些操作，所以kubectl最基本的操作一定要掌握好。</p><p>RBAC只是Kubernetes中安全认证的一种方式，当然也是现在最重要的一种方式。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RBAC - 基于角色的访问控制&lt;br&gt;RBAC使用：rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authoriz
      
    
    </summary>
    
    
      <category term="K8s" scheme="http://chucz.club/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>只在移动端网页内显示”Fork me on Github”</title>
    <link href="http://chucz.club/2018/08/19/%E5%8F%AA%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%86%85%E6%98%BE%E7%A4%BA%E2%80%9DFork-me-on-Github%E2%80%9D/"/>
    <id>http://chucz.club/2018/08/19/只在移动端网页内显示”Fork-me-on-Github”/</id>
    <published>2018-08-19T01:48:41.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块"><a href="#1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块" class="headerlink" title="1.修改文件hexo博客根目录\themes\next\layout_layout.swig 找到如下代码块"></a><a href="#1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块" title="1.修改文件hexo博客根目录\themes\next\layout_layout.swig 找到如下代码块"></a>1.修改文件hexo博客根目录\themes\next\layout_layout.swig 找到如下代码块</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">“</span></span></span><span class="template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">“</span> <span class="attr">lang</span>=<span class="string">“</span></span></span><span class="template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">“</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> ‘_partials/head.swig’ %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="2-添加代码，结果如下："><a href="#2-添加代码，结果如下：" class="headerlink" title="2.添加代码，结果如下："></a><a href="#2-添加代码，结果如下：" title="2.添加代码，结果如下："></a>2.添加代码，结果如下：</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">“</span></span></span><span class="template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">“</span> <span class="attr">lang</span>=<span class="string">“</span></span></span><span class="template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">“</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> ‘_partials/head.swig’ %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> ‘_third-party/analytics/index.swig’ %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  .forkMeOnGithub&#123;</span></span><br><span class="line"><span class="xml">  display: none;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  @media (min-width: 768px) &#123;</span></span><br><span class="line"><span class="xml">  .forkMeOnGithub&#123;</span></span><br><span class="line"><span class="xml">   display: inline;</span></span><br><span class="line"><span class="xml">   &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="3-最后在之前引用代码块上套上div加上class就行了，代码如下"><a href="#3-最后在之前引用代码块上套上div加上class就行了，代码如下" class="headerlink" title="3.最后在之前引用代码块上套上div加上class就行了，代码如下"></a><a href="#3-最后在之前引用代码块上套上div加上class就行了，代码如下" title="3.最后在之前引用代码块上套上div加上class就行了，代码如下"></a>3.最后在之前引用代码块上套上div加上class就行了，代码如下</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="attribute">class</span>=<span class="string">“forkMeOnGithub”</span>&gt;</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">“<a href="https://github.com/hannius&quot;" target="_blank" rel="noopener">https://github.com/hannius&quot;</a></span>&gt;&lt;img <span class="attribute">style</span>=<span class="string">“position……..&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块&quot;&gt;&lt;a href=&quot;#1-修改文件hexo博客根目录-themes-next-layout-layout-swig-找到如下代码块&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://chucz.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch分片及集群说明</title>
    <link href="http://chucz.club/2018/08/16/Elasticsearch%E5%88%86%E7%89%87%E5%8F%8A%E9%9B%86%E7%BE%A4%E8%AF%B4%E6%98%8E/"/>
    <id>http://chucz.club/2018/08/16/Elasticsearch分片及集群说明/</id>
    <published>2018-08-16T23:56:33.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="replica的作用主要包括："><a href="#replica的作用主要包括：" class="headerlink" title="replica的作用主要包括："></a><a href="#replica的作用主要包括：" title="replica的作用主要包括："></a>replica的作用主要包括：</h2><ul><li><p>a.容灾:primary分片丢失，replica分片就会被顶上去成为新的主分片，同时根据这个新的主分片创建新的replica,集群数据安然无恙；</p></li><li><p>b.提高查询性能：replica和primary分片的数据是相同的，所以对于一个query既可以查主分片也可以查备分片，在合适的范围内多个replica性能会更优(但要考虑资源占用也会提升[cpu/disk/heap])，另外index request只能发生在主分片上，replica不能执行index request;</p></li></ul><h2 id="分片数目调整："><a href="#分片数目调整：" class="headerlink" title="分片数目调整："></a><a href="#分片数目调整：" title="分片数目调整："></a>分片数目调整：</h2><p>对于一个索引，除非重建索引否则不能调整分片的数目(主分片数，number_of_shards),但可以随时调整replica数(number_of_replicas)</p><h2 id="ES集群状态有三种："><a href="#ES集群状态有三种：" class="headerlink" title="ES集群状态有三种："></a><a href="#ES集群状态有三种：" title="ES集群状态有三种："></a>ES集群状态有三种：</h2><ul><li><p>Green: 所有主分片和备份分片都准备就绪(分配成功)，即使有一台机器挂了(假设一台机器一个实例)，数据都不会丢失，但会变成YELLOW状态；</p></li><li><p>Yellow: 所有主分片准备就绪，但存在至少一个主分片(假设是A)对应的备份分片没有就绪，此时集群属于告警状态，意味着集群高可用和容灾能力下降，如果刚好A所在的机器挂了，并且你只设置了一个备份(已处于未就绪状态),那么A的数据就会丢失(查询结果不完整)，此时集群进入Red状态；</p></li><li><p>Red: 至少有一个主分片没有就绪(直接原因是找不到对应的备份分片成为新的主分片),此时查询的结果会出现数据丢失(不完整)</p></li></ul><h2 id="Elasticsearch与关系数据的类比对应关系如下："><a href="#Elasticsearch与关系数据的类比对应关系如下：" class="headerlink" title="Elasticsearch与关系数据的类比对应关系如下："></a><a href="#Elasticsearch与关系数据的类比对应关系如下：" title="Elasticsearch与关系数据的类比对应关系如下："></a>Elasticsearch与关系数据的类比对应关系如下：</h2><p>Relational DB  ⇒ Databases ⇒ Tables ⇒ Rows  ⇒ Columns<br>Elasticsearch  ⇒ Indices  ⇒ Types ⇒ Documents ⇒ Fields</p><p>这里的document的可以理解为一个JSON序列对象。每个document可包含多个field。再来说说Shard，每个Index（对应Database）包含多个Shard，默认是5个，分散在不同的Node上，但不会存在两个相同的Shard存在一个Node上，这样就没有备份的意义了。Shard是一个最小的Lucene索引单元。当来一个document的时候，Elasticsearch通过对docid进行hash来确定其放在哪个shard上面，然后在shard上面进行索引存储。replicas就是备份，Elasticsearch采用的是Push Replication模式，当你往 master主分片上面索引一个文档，该分片会复制该文档(document)到剩下的所有 replica副本分片中，这些分片也会索引这个文档。</p><p>当进行查询时，如果提供了查询的DocID，Elasticsearch通过hash就知道Doc存在哪个shard上面，再通过routing table查询就知道再哪个node上面，让后去node上面去取就好了。如果不提供DocID,那么Elasticsearch会在该Index（indics）shards所在的所有node上执行搜索预警，然后返回搜索结果，由coordinating node gather之后返回给用户。</p><p>集群信息说明图如下：</p><p><img src="https://cos.leiyawu.com/img/elk/es_cluster_map.jpg" alt="map"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;replica的作用主要包括：&quot;&gt;&lt;a href=&quot;#replica的作用主要包括：&quot; class=&quot;headerlink&quot; title=&quot;replica的作用主要包括：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#replica的作用主要包括：&quot; title=&quot;replica
      
    
    </summary>
    
    
      <category term="ELK" scheme="http://chucz.club/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Pause容器</title>
    <link href="http://chucz.club/2018/08/16/Pause%E5%AE%B9%E5%99%A8/"/>
    <id>http://chucz.club/2018/08/16/Pause容器/</id>
    <published>2018-08-16T23:55:14.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pause容器定义"><a href="#Pause容器定义" class="headerlink" title="Pause容器定义"></a><a href="#Pause容器定义" title="Pause容器定义"></a>Pause容器定义</h2><p>Pause容器，又叫Infra容器，本文将探究该容器的作用与原理。</p><p>在kubelet的配置中有这样一个参数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_POD_INFRA_CONTAINER=–pod-infra-container-image=registry<span class="selector-class">.access</span><span class="selector-class">.redhat</span><span class="selector-class">.com</span>/rhel7/pod-infrastructure:latest</span><br></pre></td></tr></table></figure><p>上面是openshift中的配置参数，kubernetes中默认的配置参数是：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_POD_INFRA_CONTAINER=–pod-infra-<span class="keyword">container</span>-<span class="keyword">image</span>=gcr.io/google_containers/<span class="keyword">pause</span>-amd64:<span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>Pause容器，是可以自己来定义，官方使用的gcr.io/google_containers/pause-amd64:3.0容器的代码见Github，使用C语言编写。</p><h2 id="Pause容器的作用"><a href="#Pause容器的作用" class="headerlink" title="Pause容器的作用"></a><a href="#Pause容器的作用" title="Pause容器的作用"></a>Pause容器的作用</h2><p>检查nod节点的时候会发现每个node上都运行了很多的pause容器，例如如下:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@elk<span class="string">-02</span> bin]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">576c56bd6065        mirrorgooglecontainers/kubernetes-dashboard-amd64   “/dashboard –inse…”   2 hours ago         Up 2 hours                              k8s_kubernetes-dashboard_kubernetes-dashboard<span class="string">-66</span>c9d98865-jdbg8_kube-system_d2406f4f<span class="string">-6</span>de3<span class="string">-11</span>e8<span class="string">-8760</span><span class="string">-5254004</span>f2222_0</span><br><span class="line">c4985381c2b7        d4b7466213fe                                        “/coredns -conf /e…”   2 hours ago         Up 2 hours                              k8s_coredns_coredns<span class="string">-77</span>c989547b-xq4dr_kube-system_d23ef2c4<span class="string">-6</span>de3<span class="string">-11</span>e8<span class="string">-8760</span><span class="string">-5254004</span>f2222_1</span><br><span class="line">ba2fef1cbf00        mirrorgooglecontainers/pause-amd64:3.0              “/pause”                 2 hours ago         Up 2 hours                              k8s_POD_coredns<span class="string">-77</span>c989547b-xq4dr_kube-system_d23ef2c4<span class="string">-6</span>de3<span class="string">-11</span>e8<span class="string">-8760</span><span class="string">-5254004</span>f2222_1</span><br><span class="line">ea6c2994b397        d4b7466213fe                                        “/coredns -conf /e…”   2 hours ago         Up 2 hours                              k8s_coredns_coredns<span class="string">-77</span>c989547b-lcbfw_kube-system_0696926b<span class="string">-6</span>d79<span class="string">-11</span>e8<span class="string">-8760</span><span class="string">-5254004</span>f2222_1</span><br><span class="line">f61476c51230        mirrorgooglecontainers/pause-amd64:3.0              “/pause”                 2 hours ago         Up 2 hours                              k8s_POD_kubernetes-dashboard<span class="string">-66</span>c9d98865-jdbg8_kube-system_d2406f4f<span class="string">-6</span>de3<span class="string">-11</span>e8<span class="string">-8760</span><span class="string">-5254004</span>f2222_0</span><br><span class="line">b6f61200d5ea        mirrorgooglecontainers/pause-amd64:3.0              “/pause”                 2 hours ago         Up 2 hours                              k8s_POD_coredns<span class="string">-77</span>c989547b-lcbfw_kube-system_0696926b<span class="string">-6</span>d79<span class="string">-11</span>e8<span class="string">-8760</span><span class="string">-5254004</span>f2222_1</span><br></pre></td></tr></table></figure><p>kubernetes中的pause容器主要为每个业务容器提供以下功能：</p><ul><li>在pod中担任Linux命名空间共享的基础；</li><li>启用pid命名空间，开启init进程。</li></ul><p>pause容器的作用可以从这个例子中看出，首先见下图：<br><img src="https://cos.leiyawu.com/docker/k8s/pause-container.png" alt="map"></p><h2 id="Pause容器测试"><a href="#Pause容器测试" class="headerlink" title="Pause容器测试"></a><a href="#Pause容器测试" title="Pause容器测试"></a>Pause容器测试</h2><p>首先在节点上运行一个pause容器。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d –<span class="keyword">name</span> <span class="keyword">pause</span> -p <span class="number">8880</span>:<span class="number">80</span> martin/<span class="keyword">pause</span>-amd64:<span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>然后再运行一个nginx容器，nginx将为localhost:2398创建一个代理。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> &lt;&lt;EOF &gt;&gt; nginx.conff</span><br><span class="line">error_log stderr;</span><br><span class="line">events &#123; worker_connections  1024; &#125;</span><br><span class="line">http &#123;</span><br><span class="line">    access_log /dev/stdout combined;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        server_name example.com <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a>;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//127.0.0.1:2398;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">$ docker <span class="keyword">run</span> -<span class="keyword">d</span> –name nginx -v <code>&lt;span class=&quot;keyword&quot;&gt;pwd&lt;/span&gt;</code>/nginx.<span class="keyword">conf</span>:/etc/nginx/nginx.<span class="keyword">conf</span> –<span class="keyword">net</span>=container:<span class="keyword">pause</span> –ipc=container:<span class="keyword">pause</span> –pid=container:<span class="keyword">pause</span> nginx</span><br></pre></td></tr></table></figure><p>然后再为ghost创建一个应用容器，这是一款博客软件。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="builtin-name">run</span> -d –name ghost <span class="attribute">–net</span>=container:pause <span class="attribute">–ipc</span>=container:pause <span class="attribute">–pid</span>=container:pause ghost</span><br></pre></td></tr></table></figure><p>现在访问<a href="http://localhost:8880/就可以看到ghost博客的界面了。" target="_blank" rel="noopener">http://localhost:8880/就可以看到ghost博客的界面了。</a></p><h2 id="Pause容器解析"><a href="#Pause容器解析" class="headerlink" title="Pause容器解析"></a><a href="#Pause容器解析" title="Pause容器解析"></a>Pause容器解析</h2><p>pause容器将内部的80端口映射到宿主机的8880端口，pause容器在宿主机上设置好了网络namespace后，nginx容器加入到该网络namespace中，我们看到nginx容器启动的时候指定了–net=container:pause，ghost容器同样加入到了该网络namespace中，这样三个容器就共享了网络，互相之间就可以使用localhost直接通信，–ipc=contianer:pause –pid=container:pause就是三个容器处于同一个namespace中，init进程为pause，这时我们进入到ghost容器中查看进程情况。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ps aux</span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root        <span class="number"> 1 </span> 0.0  0.0  <span class="number"> 1024 </span>   <span class="number"> 4 </span>?        Ss   13:49   0:00 /pause</span><br><span class="line">root        <span class="number"> 5 </span> 0.0  0.1 <span class="number"> 32432 </span><span class="number"> 5736 </span>?        Ss   13:51   0:00 nginx: master p</span><br><span class="line">systemd+    <span class="number"> 9 </span> 0.0  0.0 <span class="number"> 32980 </span><span class="number"> 3304 </span>?        S    13:51   0:00 nginx: worker p</span><br><span class="line">node       <span class="number"> 10 </span> 0.3  2.0<span class="number"> 1254200 </span>83788 ?       Ssl  13:53   0:03 node current/in</span><br><span class="line">root       <span class="number"> 79 </span> 0.1  0.0  <span class="number"> 4336 </span> <span class="number"> 812 </span>pts/0    Ss   14:09   0:00 sh</span><br><span class="line">root       <span class="number"> 87 </span> 0.0  0.0 <span class="number"> 17500 </span><span class="number"> 2080 </span>pts/0    R+   14:10   0:00 ps aux</span><br></pre></td></tr></table></figure><p>在ghost容器中同时可以看到pause和nginx容器的进程，并且pause容器的PID是1。而在kubernetes中容器的PID=1的进程即为容器本身的业务进程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#参考" title="参考"></a>参考</h2><p><a href="https://o-my-chenjian.com/2017/10/17/The-Pause-Container-Of-Kubernetes/" target="_blank" rel="noopener">Kubernetes只Pause容器</a></p><p><a href="https://jimmysong.io/posts/what-is-a-pause-container/" target="_blank" rel="noopener">kubernetes中的infra容器——Pause容器探究</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Pause容器定义&quot;&gt;&lt;a href=&quot;#Pause容器定义&quot; class=&quot;headerlink&quot; title=&quot;Pause容器定义&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Pause容器定义&quot; title=&quot;Pause容器定义&quot;&gt;&lt;/a&gt;Pause容器定义&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="K8s" scheme="http://chucz.club/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>docker cicd持续集成部署</title>
    <link href="http://chucz.club/2018/08/16/docker-cicd%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2/"/>
    <id>http://chucz.club/2018/08/16/docker-cicd持续集成部署/</id>
    <published>2018-08-16T23:53:55.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="持续集成的概念"><a href="#持续集成的概念" class="headerlink" title="持续集成的概念"></a><a href="#持续集成的概念" title="持续集成的概念"></a>持续集成的概念</h2><p>持续集成，Continuous integration ，简称CI。</p><p>首先，解释下集成：所有的项目代码都是托管在SVN或者GIT服务器上（以下简称代码服务器）。每个项目都有若干个单元测试和集成测试。集成测试是单元测试的逻辑扩展：在单元测试的基础上，将所有模块按照设计要求组装成为子系统或系统进行集成测试。实践表明，一些模块虽然能够单独地工作，但并不能保证连接起来也能正常的工作。一些局部反映不出来的问题，在全局上很可能暴露出来（关于单元测试及集成测试的详述，读者可以查阅相关文档）。</p><p>简单来说，集成测试就是把所有的单元测试跑一遍，以及其它一些能自动完成的测试。只有通过了集成测试的代码才能上传到代码服务器上，确保上传的代码没有问题。集成一般指集成测试。</p><p>持续，显而易见就是长期对代码进行的集成测试。既然是长期进行，那么最好是自动执行，否则人工执行既没保证，而且耗人力。</p><p>基于此种目的，我们需要有一台服务器，它将定期从代码服务器中拉取代码，并进行编译，然后自动运行集成测试；并且每次集成测试的结果都会记录在案。</p><h2 id="持续集成的特点"><a href="#持续集成的特点" class="headerlink" title="持续集成的特点"></a><a href="#持续集成的特点" title="持续集成的特点"></a>持续集成的特点</h2><ul><li>它是一个自动化的周期性的集成测试过程，从拉取代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；</li><li>需要有专门的集成服务器来执行集成构建；</li><li>需要有代码托管工具支持；</li></ul><h2 id="持续集成的作用"><a href="#持续集成的作用" class="headerlink" title="持续集成的作用"></a><a href="#持续集成的作用" title="持续集成的作用"></a>持续集成的作用</h2><ul><li>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；</li><li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li></ul><p>首先，Docker可以让你非常容易和方便地以“容器化”的方式去部署应用。 它就像集装箱一样，打包了所有依赖，再在其他服务器上部署很容易，不至于换服务器后发现各种配置文件散落一地，这样就解决了编译时依赖和运行时依赖的问题；</p><p>其次，Docker的隔离性使得应用在运行是就像处于沙箱中一样，每个应用都认为自己是在系统中唯一运行的程序，就像刚才例子中，A依赖于Python 2.7，同时A还依赖于B，但B却依赖于Python3， 这样我们可以在系统中部署一个基于python2.7的容器和一个基于python3的容器，这样就可以很方便的在系统中部署多种不同的环境来解决依赖复杂度的问题。这里有些朋友可能会说，虚拟机也可以解决这样的问题！诚然，虚拟化确实可以做到这一点，但是这样需要硬件支持虚拟化及开启BIOS中虚拟化相关的功能，同时还需要在系统中安装2套操作系统，虚拟机的出现是解决了操作系统和物理机的强耦合问题。但是Docker就轻量化很多，只需内核支持，无需硬件和BIOS的强制要求，可以很轻松迅速的在系统上部署多套不同的容器环境，容器的出现解决了应用和操作系统的强耦合问题。</p><p>正以为Docker是以应用为中心，镜像中打包了应用及应用所需的环境，一次构建，处处运行。这种特性完美的解决了传统模式下应用迁移后面临的环境不一致问题。</p><p>同时，Docker 压根不管内部应用怎么启动，你自己爱咋来咋来，我们用 docker start 或 run 作为统一标准。这样我们应用启动就标准化了， 不需要再根据不同应用而记忆一大串不同的启动命令。</p><h2 id="基于Docker的特征，现在常见的利用-Docker-进行持续集成的流程如下："><a href="#基于Docker的特征，现在常见的利用-Docker-进行持续集成的流程如下：" class="headerlink" title="基于Docker的特征，现在常见的利用 Docker 进行持续集成的流程如下："></a><a href="#基于Docker的特征，现在常见的利用-Docker-进行持续集成的流程如下：" title="基于Docker的特征，现在常见的利用 Docker 进行持续集成的流程如下："></a>基于Docker的特征，现在常见的利用 Docker 进行持续集成的流程如下：</h2><ol><li>开发者提交代码</li><li>触发镜像构建</li><li>构建镜像上传至私有仓库</li><li>镜像下载至执行机器</li><li>镜像运行</li></ol><p>其基本拓扑结构如下所示：<br><img src="https://cos.leiyawu.com/docker/img/docker1.png" alt="图1"></p><p>熟悉Docker的都知道，Docker以的启动是非常快的，可以说是秒启。在上述的五步中，1 和 5 的耗时是比较短的，整个持续集成主要耗时集中在中间的3个步骤，也就是 Docker build，Docker push ，Docekr pull 的时间消耗.</p><p>Docker Registry升级到 v2 后加入了很多安全相关检查，在v2中的镜像的存储格式变成了gzip ，镜像在压缩过程中占用的时间也是比较多的。</p><p>Docker pull 镜像的速度对服务的启动速度至关重要，好在 Registry v2 后可以并行 pull 了，速度有了很大的改善。但是依然有一些小的问题影响了启动的速度：</p><ul><li>下载镜像和解压镜像是串行的；</li><li>串行解压，由于 v2 都是 gzip,要解压，尽管并行下载了还是串行解压，内网的话解压时间比网络传输都要长；</li><li>和 Registry 通信， Registry 在 pull的过程中并不提供下载内容只是提供下载URL和鉴权，这一部分加长网络传输而且一些 Metadata还是要去后端存储获取，延时还是有一些的。</li></ul><p>整个持续集成平台架构演进到如下图所示：<br><img src="https://cos.leiyawu.com/docker/img/docker2.png" alt="图2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;持续集成的概念&quot;&gt;&lt;a href=&quot;#持续集成的概念&quot; class=&quot;headerlink&quot; title=&quot;持续集成的概念&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#持续集成的概念&quot; title=&quot;持续集成的概念&quot;&gt;&lt;/a&gt;持续集成的概念&lt;/h2&gt;&lt;p&gt;持续集成，Contin
      
    
    </summary>
    
    
      <category term="docker" scheme="http://chucz.club/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes-jenkins-ci-cd</title>
    <link href="http://chucz.club/2018/08/16/kubernetes-jenkins-ci-cd/"/>
    <id>http://chucz.club/2018/08/16/kubernetes-jenkins-ci-cd/</id>
    <published>2018-08-16T23:53:11.000Z</published>
    <updated>2018-09-28T08:25:28.616Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a><a href="#流程图：" title="流程图："></a>流程图：</h3><p>基于Jenkins的CI/CD流程如下所示:<br><img src="https://cos.leiyawu.com/docker/k8s/kubernetes-jenkins-ci-cd.png" alt="kubernetes-jenkins-ci-cd"></p><h3 id="流程说明："><a href="#流程说明：" class="headerlink" title="流程说明："></a><a href="#流程说明：" title="流程说明："></a>流程说明：</h3><ol><li>用户向Gitlab提交代码，代码中必须包含Dockerfile</li><li>将代码提交到远程仓库</li><li>用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建</li><li>Jenkins的CI流水线自动编译代码并打包成docker镜像推送到Harbor镜像仓库</li><li>Jenkins的CI流水线中包括了自定义脚本，根据我们已准备好的kubernetes的YAML模板，将其中的变量替换成用户输入的选项</li><li>生成应用的kubernetes YAML配置文件</li><li>更新Ingress的配置，根据新部署的应用的名称，在ingress的配置文件中增加一条路由信息</li><li>更新PowerDNS，向其中插入一条DNS记录，IP地址是边缘节点的IP地址。关于边缘节点，请查看<a href="https://jimmysong.io/kubernetes-handbook/practice/edge-node-configuration.html" target="_blank" rel="noopener">边缘节点配置</a></li><li>Jenkins调用kubernetes的API，部署应用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;流程图：&quot;&gt;&lt;a href=&quot;#流程图：&quot; class=&quot;headerlink&quot; title=&quot;流程图：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#流程图：&quot; title=&quot;流程图：&quot;&gt;&lt;/a&gt;流程图：&lt;/h3&gt;&lt;p&gt;基于Jenkins的CI/CD流程如下所示:&lt;br&gt;&lt;im
      
    
    </summary>
    
    
      <category term="K8s" scheme="http://chucz.club/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置相关笔记</title>
    <link href="http://chucz.club/2018/07/26/Nginx%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>http://chucz.club/2018/07/26/Nginx配置相关笔记/</id>
    <published>2018-07-26T19:47:15.000Z</published>
    <updated>2018-09-28T08:51:24.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好久没更，来水一篇～！～<br>　　就在刚刚，我花了四百大洋租了台腾讯云香港的服务器（～心在滴血～），因此我的博客终于可以宣告回国了。PS：之前一直使用github-page，众所周知速度贼慢，后面换成了新加坡的VPS服务器，速度就更慢了，没办法只能花大价钱买国内的云服务器。博客迁移得过程比较简单，无非就是添加nginx解析，因此本篇有点水，主要为了记录一下nginx配置web服务的一些笔记。<br><a id="more"></a></p></blockquote><h3 id="http-301-https"><a href="#http-301-https" class="headerlink" title="http 301 https"></a><a href="#http-301-https" title="http 301 https"></a>http 301 https</h3><p>我的博客使用了腾讯云免费签发的证书，因此可以使用https访问，默认情况下http也是可以访问的，那么如何将http请求301重定向到https，便是第一个要解决的问题。<br>编辑/etc/nginx/nginx.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">server &#123;</div><div class="line">       listen         80;</div><div class="line">       server_name    thief.one;</div><div class="line">       <span class="built_in">return</span>         301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 443;</div><div class="line">    server_name thief.one;</div><div class="line">    ……</div><div class="line">&#125;</div><div class="line">……</div></pre></td></tr></table></figure><p>创建一个80端口，一个443端口的web服务，并且将80端口的服务重定向到<em>https://….</em>。重启nginx后，访问<em><a href="http://thief.one" target="_blank" rel="noopener">http://thief.one</a></em>会被301重定向到<em><a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></em></p><h3 id="禁止访问某些目录文件"><a href="#禁止访问某些目录文件" class="headerlink" title="禁止访问某些目录文件"></a><a href="#禁止访问某些目录文件" title="禁止访问某些目录文件"></a>禁止访问某些目录文件</h3><p>由于我的博客项目存放在git上，因此服务器web目录内含有.git目录，也算是敏感信息泄露（当然都是一些静态的网页，其实也没有什么危害），那么如何在nginx中配置访问.git目录403是要解决的第二个问题。<br>编辑/etc/nginx/nginx.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 443;</div><div class="line">    server_name thief.one;</div><div class="line">    ……</div><div class="line"></div><div class="line">    location /.git/ &#123;</div><div class="line">            deny    all;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>添加一个location，禁止访问某目录。重启nginx后，尝试访问<em><a href="https://thief.one/.git/config" target="_blank" rel="noopener">https://thief.one/.git/config</a></em> 返回403</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><a href="#负载均衡" title="负载均衡"></a>负载均衡</h3><p>这个之前总结过：<a href="https://thief.one/2017/08/22/1/" target="_blank" rel="noopener">https://thief.one/2017/08/22/1/</a></p><h3 id="只能通过域名访问"><a href="#只能通过域名访问" class="headerlink" title="只能通过域名访问"></a><a href="#只能通过域名访问" title="只能通过域名访问"></a>只能通过域名访问</h3><p>如果博客不想通过IP被访问到，需要在nginx上配置禁止ip访问，或者访问ip跳转到域名。<br>编辑/etc/nginx/nginx.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       443 default_server;</div><div class="line">        <span class="built_in">return</span> 403</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重启nginx，访问：<em><a href="http://150.109.106.49/" target="_blank" rel="noopener">http://150.109.106.49/</a></em> 返回403。</p><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a><a href="#权限问题" title="权限问题"></a>权限问题</h3><p>首先说明一下，一般我不推荐使用root权限启动nginx服务。但如果nginx服务是用root权限安装的，且网站放在root目录下，启动nginx解析网站会有权限问题（因为配置文件中默认不是用root权限启动），因此需要更改配置文件为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user root;</div></pre></td></tr></table></figure><p>更安全的方法是用普通用户权限安装nginx，并将web目录移到普通用户目录下，用普通用户权限启动nginx服务。</p><p><em>nginx配置相关问题笔记，之后我都会记录在此篇中</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好久没更，来水一篇～！～&lt;br&gt;　　就在刚刚，我花了四百大洋租了台腾讯云香港的服务器（～心在滴血～），因此我的博客终于可以宣告回国了。PS：之前一直使用github-page，众所周知速度贼慢，后面换成了新加坡的VPS服务器，速度就更慢了，没办法只
      
    
    </summary>
    
    
      <category term="技术研究" scheme="http://chucz.club/tags/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
      <category term="nginx" scheme="http://chucz.club/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Headless Chrome and API</title>
    <link href="http://chucz.club/2018/07/09/Headless-Chrome-and-API/"/>
    <id>http://chucz.club/2018/07/09/Headless-Chrome-and-API/</id>
    <published>2018-07-09T00:59:10.000Z</published>
    <updated>2018-09-28T08:51:24.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我已爬遍了全世界，而你却迟迟不见</p></blockquote><p>　　自从Google在chrome59版本后加入了 <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md" target="_blank" rel="noopener">Headless Chrome</a>，类似phantomjs、selenium等工具作者都放弃了维护自身的产品（原因可参考文章 <a href="https://paper.seebug.org/537/?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">QtWebkit or Headless Chrome</a>）。因此作为使用者的我们也是时候放弃phantomjs，转而研究Headless Chrome了。由于网上对于Headless Chrome的资料还很少，因此我先收集整理一波，随后慢慢学习研究，渐渐将本篇内容补充完善。<br><a id="more"></a></p><h3 id="Headless-Chrome-介绍"><a href="#Headless-Chrome-介绍" class="headerlink" title="Headless Chrome 介绍"></a><a href="#Headless-Chrome-介绍" title="Headless Chrome 介绍"></a>Headless Chrome 介绍</h3><p>headless chrome意思是无头chrome浏览器，相对于传统的chrome浏览器，这是一个可以在后台用命令行操作浏览器的工具，对于爬虫编写以及web自动化测试都有很大的作用。相比较同类工具Phantomjs，其更加强大（主要因为其依赖的webkit更新）。</p><h3 id="Headless-Chrome-安装"><a href="#Headless-Chrome-安装" class="headerlink" title="Headless Chrome 安装"></a><a href="#Headless-Chrome-安装" title="Headless Chrome 安装"></a>Headless Chrome 安装</h3><p>目前只支持mac与linux系统，需要下载chrome浏览器并安装。</p><h4 id="mac-install-headless-chrome"><a href="#mac-install-headless-chrome" class="headerlink" title="mac install headless chrome"></a><a href="#mac-install-headless-chrome" title="mac install headless chrome"></a>mac install headless chrome</h4><p>mac下直接去官网下载安装包即可，mac下chrome浏览器位置，为了方便使用，用alias别名启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> chrome=<span class="string">“/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome”</span></div><div class="line"><span class="built_in">alias</span> chrome-canary=<span class="string">“/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary”</span></div><div class="line"><span class="built_in">alias</span> chromium=<span class="string">“/Applications/Chromium.app/Contents/MacOS/Chromium”</span></div></pre></td></tr></table></figure><p>下载<a href="https://www.google.com/chrome/browser/canary.html" target="_blank" rel="noopener">chrome-canary</a>版</p><p>说明：<code>Mac 和 Linux 上的 Chrome 59 都可以运行无需显示模式。对 Windows 的支持将在 Chrome 60 中提供。要检查你使用的 Chrome 版本，请在浏览器中打开 chrome://version。</code></p><h4 id="linux-install-headless-chrome"><a href="#linux-install-headless-chrome" class="headerlink" title="linux install headless chrome"></a><a href="#linux-install-headless-chrome" title="linux install headless chrome"></a>linux install headless chrome</h4><p>添加源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum.repos.d/chrome.repo</div><div class="line">写入以下内容：</div><div class="line"></div><div class="line">[google-chrome]</div><div class="line">name=google-chrome</div><div class="line">baseurl=<a href="http://dl.google.com/linux/chrome/rpm/stable/" target="_blank" rel="noopener">http://dl.google.com/linux/chrome/rpm/stable/</a><span class="variable">$basearch</span></div><div class="line">enabled=1</div><div class="line">gpgcheck=0</div><div class="line">gpgkey=<a href="https://dl-ssl.google.com/linux/linux_signing_key.pub" target="_blank" rel="noopener">https://dl-ssl.google.com/linux/linux_signing_key.pub</a></div></pre></td></tr></table></figure><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y google-chrome-stable</div></pre></td></tr></table></figure><p>测试运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">google-chrome –headless –<span class="built_in">print</span>-to-pdf <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div></pre></td></tr></table></figure><p>报错处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Running as root without –no-sandbox is not supported <span class="comment"># 错误信息</span></div></pre></td></tr></table></figure><p>解析方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /opt/google/chrome/google-chrome</div><div class="line">找到 <span class="built_in">exec</span> -a <span class="string">“<span class="variable">$0</span>“</span> <span class="string">“<span class="variable">$HERE</span>/chrome”</span> <span class="string">“<span class="variable">$@</span>“</span></div><div class="line">改为 <span class="built_in">exec</span> -a <span class="string">“<span class="variable">$0</span>“</span> <span class="string">“<span class="variable">$HERE</span>/chrome”</span> <span class="string">“<span class="variable">$@</span>“</span> –user-data-dir –no-sandbox</div></pre></td></tr></table></figure><p><code>说明：若在安装过程中报错，则将源文件中的gpgcheck改为0</code></p><p>linux安装headless chrome参考：<a href="http://akai-tsuki.hatenablog.com/entry/2017/06/18/000000" target="_blank" rel="noopener">http://akai-tsuki.hatenablog.com/entry/2017/06/18/000000</a></p><h3 id="Headless-Chrome-基础用法"><a href="#Headless-Chrome-基础用法" class="headerlink" title="Headless Chrome 基础用法"></a><a href="#Headless-Chrome-基础用法" title="Headless Chrome 基础用法"></a>Headless Chrome 基础用法</h3><p>HELP信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">chrome \</div><div class="line">–headless \                   <span class="comment"># Runs Chrome in headless mode.</span></div><div class="line">–<span class="built_in">disable</span>-gpu \                <span class="comment"># Temporarily needed for now.</span></div><div class="line">–remote-debugging-address=127.0.0.1</div><div class="line">–remote-debugging-port=9222 \</div><div class="line"> <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a>   <span class="comment"># URL to open. Defaults to about:blank.</span></div></pre></td></tr></table></figure><h4 id="访问一个网页获取源码"><a href="#访问一个网页获取源码" class="headerlink" title="访问一个网页获取源码"></a><a href="#访问一个网页获取源码" title="访问一个网页获取源码"></a>访问一个网页获取源码</h4><p>–dump-dom 标志将打印 document.body.innerHTML 到标准输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome –headless –<span class="built_in">disable</span>-gpu –dump-dom <a href="https://thief.one/" target="_blank" rel="noopener">https://thief.one/</a></div></pre></td></tr></table></figure><h4 id="访问一个网页将源码创建成一个PDF"><a href="#访问一个网页将源码创建成一个PDF" class="headerlink" title="访问一个网页将源码创建成一个PDF"></a><a href="#访问一个网页将源码创建成一个PDF" title="访问一个网页将源码创建成一个PDF"></a>访问一个网页将源码创建成一个PDF</h4><p>–print-to-pdf 标志将页面转出为 PDF 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome –headless –<span class="built_in">disable</span>-gpu –<span class="built_in">print</span>-to-pdf <a href="https://thief.one/" target="_blank" rel="noopener">https://thief.one/</a></div></pre></td></tr></table></figure><h4 id="访问一个网页并截图"><a href="#访问一个网页并截图" class="headerlink" title="访问一个网页并截图"></a><a href="#访问一个网页并截图" title="访问一个网页并截图"></a>访问一个网页并截图</h4><p>使用–screenshot标志运行 Headless Chrome 将在当前工作目录中生成一个名为 screenshot.png的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chrome –headless –<span class="built_in">disable</span>-gpu –screenshot <a href="https://thief.one/" target="_blank" rel="noopener">https://thief.one/</a></div><div class="line"></div><div class="line"><span class="comment"># 设置图片大小</span></div><div class="line">chrome –headless –<span class="built_in">disable</span>-gpu –screenshot –window-size=1280,1696 <a href="https://thief.one/" target="_blank" rel="noopener">https://thief.one/</a></div></pre></td></tr></table></figure><h4 id="访问一个网页并进行js交互（REPL模式）"><a href="#访问一个网页并进行js交互（REPL模式）" class="headerlink" title="访问一个网页并进行js交互（REPL模式）"></a><a href="#访问一个网页并进行js交互（REPL模式）" title="访问一个网页并进行js交互（REPL模式）"></a>访问一个网页并进行js交互（REPL模式）</h4><p>–repl 标志可以使 Headless Chrome 运行在一个你可以使用浏览器评估 JS 表达式的模式下。执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chrome –headless –<span class="built_in">disable</span>-gpu –repl <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div><div class="line">&gt;&gt;&gt; location.href</div><div class="line">&#123;<span class="string">“result”</span>:&#123;<span class="string">“type”</span>:<span class="string">“string”</span>,<span class="string">“value”</span>:<span class="string">“<a href="https://thief.one&quot;" target="_blank" rel="noopener">https://thief.one&quot;</a></span>&#125;&#125;</div><div class="line">&gt;&gt;&gt; quit</div></pre></td></tr></table></figure><h4 id="启动一个监听端口"><a href="#启动一个监听端口" class="headerlink" title="启动一个监听端口"></a><a href="#启动一个监听端口" title="启动一个监听端口"></a>启动一个监听端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome –remote-debugging-port=9222 –remote-debugging-address=0.0.0.0</div></pre></td></tr></table></figure><p>可以通过浏览器打开：<a href="http://0.0.0.0:9222" target="_blank" rel="noopener">http://0.0.0.0:9222</a> </p><h3 id="Headless-Chrome-API"><a href="#Headless-Chrome-API" class="headerlink" title="Headless Chrome API"></a><a href="#Headless-Chrome-API" title="Headless Chrome API"></a>Headless Chrome API</h3><p>以上演示了使用命令行的方式操作headless chrome，那么怎么在代码中使用它呢？<br>api工具如下：<br>官方：<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a><br>底层：<a href="https://github.com/cyrus-and/chrome-remote-interface/" target="_blank" rel="noopener">chrome-remote-interface</a><br>活跃：<a href="https://github.com/graphcool/chromeless" target="_blank" rel="noopener">chromeless</a><br>非官方：<a href="https://github.com/yujiosaka/headless-chrome-crawler" target="_blank" rel="noopener">headless-chrome-crawler</a></p><p>Python相关的API：<br><a href="https://github.com/fate0/pychrome" target="_blank" rel="noopener">pychrome</a><br><a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="noopener">Pyppeteer 推荐</a><br><a href="https://github.com/iiSeymour/chromote" target="_blank" rel="noopener">chromote</a><br><a href="https://github.com/wasiher/chrome_remote_interface_python" target="_blank" rel="noopener">chrome_remote_interface_python</a></p><h4 id="puppeteer-介绍"><a href="#puppeteer-介绍" class="headerlink" title="puppeteer 介绍"></a><a href="#puppeteer-介绍" title="puppeteer 介绍"></a>puppeteer 介绍</h4><p>Puppeteer 是一个由 Chrome 团队开发的 Node 库。它提供了一个高层次的 API 来控制无需显示版（或 完全版）的 Chrome。它与其他自动化测试库，如 Phantom 和 NightmareJS 相类似，但是只适用于最新版本的 Chrome。</p><h4 id="puppeteer-安装"><a href="#puppeteer-安装" class="headerlink" title="puppeteer 安装"></a><a href="#puppeteer-安装" title="puppeteer 安装"></a>puppeteer 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir puppeteer_test <span class="comment"># 创建一个项目目录</span></div><div class="line"><span class="built_in">cd</span> puppeteer_test</div><div class="line">npm init</div><div class="line">npm i –save puppeteer</div></pre></td></tr></table></figure><p>安装puppeteer前需要在系统上安装nodejs与npm；安装完puppeteer，默认会自动安装最新版本的chromium。<br>注意：<code>系统默认安装的npm与nodejs版本都很低，而使用puppeteer需要node6.4.0+，async/await需要node7.6.0+，因此建议安装node7.6.0版本，否则会导致无法使用。</code></p><h5 id="安装升级nodejs与npm"><a href="#安装升级nodejs与npm" class="headerlink" title="安装升级nodejs与npm"></a><a href="#安装升级nodejs与npm" title="安装升级nodejs与npm"></a>安装升级nodejs与npm</h5><p>要安装puppeteer，需要先安装npm与nodejs，而puppeteer对nodejs版本有要求，因此不能用系统默认安装的nodejs版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget <a href="http://nodejs.org/dist/v7.6.0/node-v7.6.0-linux-x64.tar.gz" target="_blank" rel="noopener">http://nodejs.org/dist/v7.6.0/node-v7.6.0-linux-x64.tar.gz</a></div><div class="line">tar -zvxf node-v7.6.0-linux-x64.tar.gz</div></pre></td></tr></table></figure><p>共享至全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm -rf /usr/bin/node /usr/bin/npm</div><div class="line">ln -s /path/node-v7.6.0-linux-x64/bin/node /usr/bin/node  </div><div class="line">ln -s /path/node-v7.6.0-linux-x64/bin/npm /usr/bin/npm</div></pre></td></tr></table></figure><p>若用yum安装过nodejs，需要移除其他版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum remove npm</div><div class="line">yum remove nodejs</div></pre></td></tr></table></figure><p>查看nodejs与npm版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure><p>安装升级nodejs过程参考：<a href="http://jeeinn.com/2017/02/236/" target="_blank" rel="noopener">http://jeeinn.com/2017/02/236/</a></p><h4 id="puppeteer-使用"><a href="#puppeteer-使用" class="headerlink" title="puppeteer 使用"></a><a href="#puppeteer-使用" title="puppeteer 使用"></a>puppeteer 使用</h4><p>在使用puppeteer前，先要确定puppeteer、nodejs、npm安装成功（版本正确），且headless chrome安装成功。<br>官方API文档：<a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md</a></p><h5 id="打印用户代理："><a href="#打印用户代理：" class="headerlink" title="打印用户代理："></a><a href="#打印用户代理：" title="打印用户代理："></a>打印用户代理：</h5><p>在puppeteer_test目录下创建一个example1.js文件，写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const puppeteer = require(<span class="string">‘puppeteer’</span>);</div><div class="line"></div><div class="line">(async() =&gt; &#123;</div><div class="line"> const browser = await puppeteer.launch(&#123;</div><div class="line">    headless: <span class="literal">true</span>,</div><div class="line">    args: [<span class="string">‘–no-sandbox’</span>, <span class="string">‘–disable-setuid-sandbox’</span>],</div><div class="line">&#125;);</div><div class="line"> console.log(await browser.version());</div><div class="line"> browser.close();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>运行代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node example1.js</div></pre></td></tr></table></figure><h5 id="获取页面的屏幕截图："><a href="#获取页面的屏幕截图：" class="headerlink" title="获取页面的屏幕截图："></a><a href="#获取页面的屏幕截图：" title="获取页面的屏幕截图："></a>获取页面的屏幕截图：</h5><p>创建一个example2.js文件，写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const puppeteer = require(<span class="string">‘puppeteer’</span>);</div><div class="line"></div><div class="line">(async() =&gt; &#123;</div><div class="line"></div><div class="line">const browser = await puppeteer.launch(&#123;</div><div class="line">    headless: <span class="literal">true</span>,</div><div class="line">    args: [<span class="string">‘–no-sandbox’</span>, <span class="string">‘–disable-setuid-sandbox’</span>],</div><div class="line">&#125;);</div><div class="line">const page = await browser.newPage();</div><div class="line">await page.goto(<span class="string">‘<a href="https://thief.one&#39;" target="_blank" rel="noopener">https://thief.one&#39;</a></span>, &#123;waitUntil: <span class="string">‘networkidle2’</span>&#125;);</div><div class="line">await page.pdf(&#123;path: <span class="string">‘screen.pdf’</span>, format: <span class="string">‘A4’</span>&#125;);</div><div class="line"></div><div class="line">browser.close();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>运行代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node example2.js</div></pre></td></tr></table></figure><p>说明：在运行puppeteer之前不需要额外开启一个headless-chrome进程，因为其本身就会去开启。</p><h5 id="发送POST请求获取源码"><a href="#发送POST请求获取源码" class="headerlink" title="发送POST请求获取源码"></a><a href="#发送POST请求获取源码" title="发送POST请求获取源码"></a>发送POST请求获取源码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const puppeteer = require(<span class="string">‘puppeteer’</span>);</div><div class="line"></div><div class="line">puppeteer.launch(&#123;headless: <span class="literal">true</span>,args: [<span class="string">‘–no-sandbox’</span>, <span class="string">‘–disable-setuid-sandbox’</span>],&#125;).<span class="keyword">then</span>(async browser =&gt; &#123;</div><div class="line"></div><div class="line">  const page = await browser.newPage();</div><div class="line">  await page.setRequestInterception(<span class="literal">true</span>); // 开启请求捕捉</div><div class="line">  page.on(<span class="string">‘request’</span>, interceptedRequest =&gt; &#123;</div><div class="line">    const overrides = &#123;&#125;;</div><div class="line">    //console.log(interceptedRequest.url()); // 输出捕捉到的请求URL</div><div class="line">    <span class="keyword">if</span> (interceptedRequest.url()==<span class="string">‘<a href="http://127.0.0.1:8000/&#39;" target="_blank" rel="noopener">http://127.0.0.1:8000/&#39;</a></span>)&#123;</div><div class="line">       overrides.method = <span class="string">‘POST’</span>;</div><div class="line">       overrides.postData = <span class="string">‘&#123;”id”:”2”&#125;’</span>;</div><div class="line">    &#125;</div><div class="line">    interceptedRequest.continue(overrides); // 重放</div><div class="line">   &#125;);</div><div class="line">  await page.goto(<span class="string">‘<a href="http://127.0.0.1:8000/&#39;" target="_blank" rel="noopener">http://127.0.0.1:8000/&#39;</a></span>);</div><div class="line">  await console.log(await page.content()); // 输出源码</div><div class="line">  await browser.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="安装puppeteer报错"><a href="#安装puppeteer报错" class="headerlink" title="安装puppeteer报错"></a><a href="#安装puppeteer报错" title="安装puppeteer报错"></a>安装puppeteer报错</h5><p>在linux下安装puppeteer报错，即:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i –save puppeteer 命令没有运行成功</div></pre></td></tr></table></figure><p>失败原因可能是linux版本不支持，centos7下成功，centos6下测试失败。</p><h5 id="运行puppeteer报错处理"><a href="#运行puppeteer报错处理" class="headerlink" title="运行puppeteer报错处理"></a><a href="#运行puppeteer报错处理" title="运行puppeteer报错处理"></a>运行puppeteer报错处理</h5><p>报错如下，说明代码语法有问题，或者node版本太低，不符合要求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Unexpected token <span class="keyword">function</span></div></pre></td></tr></table></figure><p>报错如下，说明代码中需要设置headless状态为true</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to launch chrome</div></pre></td></tr></table></figure><p>解决方案，修改代码为如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const browser = await puppeteer.launch(&#123;</div><div class="line">    headless: <span class="literal">true</span>,</div><div class="line">    args: [<span class="string">‘–no-sandbox’</span>, <span class="string">‘–disable-setuid-sandbox’</span>],</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>报错如下，与上面解决方案一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1025/084740.006078:ERROR:zygote_host_impl_linux.cc(88)] Running as root without –no-sandbox is not supported. See <a href="https://crbug.com/638180" target="_blank" rel="noopener">https://crbug.com/638180</a>.</div></pre></td></tr></table></figure><h4 id="pyppeteer"><a href="#pyppeteer" class="headerlink" title="pyppeteer"></a><a href="#pyppeteer" title="pyppeteer"></a>pyppeteer</h4><p>pyppeteer模版是对puppeteer的python封装，因为puppeteer是用nodejs写的，所以要在python中使用得用pyppeteer模块。</p><h5 id="pyppeteer安装"><a href="#pyppeteer安装" class="headerlink" title="pyppeteer安装"></a><a href="#pyppeteer安装" title="pyppeteer安装"></a>pyppeteer安装</h5><p>pyppeteer模版只支持python3.5以上版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 -m pip install pyppeteer</div></pre></td></tr></table></figure><h5 id="pyppeteer简单的例子"><a href="#pyppeteer简单的例子" class="headerlink" title="pyppeteer简单的例子"></a><a href="#pyppeteer简单的例子" title="pyppeteer简单的例子"></a>pyppeteer简单的例子</h5><p>截图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">from pyppeteer import launch</div><div class="line"></div><div class="line">async def main():</div><div class="line">    browser = await launch(args=[<span class="string">‘–no-sandbox’</span>])</div><div class="line">    page = await browser.newPage()</div><div class="line">    await page.goto(<span class="string">‘<a href="http://example.com&#39;" target="_blank" rel="noopener">http://example.com&#39;</a></span>)</div><div class="line">    await page.screenshot(&#123;<span class="string">‘path’</span>: <span class="string">‘example.png’</span>&#125;)</div><div class="line">    await browser.close()</div><div class="line"></div><div class="line">asyncio.get_event_loop().run_until_complete(main())</div></pre></td></tr></table></figure><p>说明：在使用pyppeteer时，不需要额外开启headless-chrome进程（与puppeteer一样）。更多pyppeteer模版使用方法，参考：<a href="https://miyakogi.github.io/pyppeteer/reference.html#page-class" target="_blank" rel="noopener">https://miyakogi.github.io/pyppeteer/reference.html#page-class</a></p><h5 id="pyppeteer报错处理"><a href="#pyppeteer报错处理" class="headerlink" title="pyppeteer报错处理"></a><a href="#pyppeteer报错处理" title="pyppeteer报错处理"></a>pyppeteer报错处理</h5><p>错误类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyppeteer.errors.BrowserError: Failed to connect to browser port: <a href="http://127.0.0.1:58871/json/version" target="_blank" rel="noopener">http://127.0.0.1:58871/json/version</a></div></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">加上：args=[<span class="string">‘–no-sandbox’</span>]，同puppeteer类似。</div><div class="line"></div><div class="line">browser = await launch(args=[<span class="string">‘–no-sandbox’</span>])</div></pre></td></tr></table></figure><h4 id="chrome-remote-interface工具"><a href="#chrome-remote-interface工具" class="headerlink" title="chrome-remote-interface工具"></a><a href="#chrome-remote-interface工具" title="chrome-remote-interface工具"></a>chrome-remote-interface工具</h4><p>可以用来分析渲染一个页面过程中所有的请求过程，包括获取所有的请求接口以及响应内容等。再运行chrome-remote-interface代码前，需要先启动headless chrome进程，即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome –headless –remote-debugging-port=9222</div></pre></td></tr></table></figure><p>安装chrome-remote-interface：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install chrome-remote-interface</div></pre></td></tr></table></figure><p>然后编写代码：(以获取所有请求url为例)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">const CDP = require(<span class="string">‘chrome-remote-interface’</span>);</div><div class="line"></div><div class="line">// node nmask.js <a href="https://nmask.cn" target="_blank" rel="noopener">https://nmask.cn</a></div><div class="line"></div><div class="line">var options = process.argv;</div><div class="line">var target_url = options[2];</div><div class="line"></div><div class="line">CDP((client) =&gt; &#123;</div><div class="line">    // extract domains</div><div class="line">    const &#123;Network, Page&#125; = client;</div><div class="line">    </div><div class="line">    // setup handlers</div><div class="line">    Network.requestWillBeSent((params) =&gt; &#123;</div><div class="line">        console.log(params.request.url);</div><div class="line">    &#125;);</div><div class="line">    Page.loadEventFired(() =&gt; &#123;</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    // <span class="built_in">enable</span> events <span class="keyword">then</span> start!</div><div class="line">    Promise.all([</div><div class="line">        Network.enable(),</div><div class="line">        Page.enable()</div><div class="line">    ]).<span class="keyword">then</span>(() =&gt; &#123;</div><div class="line">        <span class="built_in">return</span> Page.navigate(&#123;url: target_url&#125;);//输出请求的url</div><div class="line">    &#125;).catch((err) =&gt; &#123;</div><div class="line">        console.error(err);</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">&#125;).on(<span class="string">‘error’</span>, (err) =&gt; &#123;</div><div class="line">    console.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>运行这段代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node nmask.js <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div></pre></td></tr></table></figure><h4 id="chromeless介绍"><a href="#chromeless介绍" class="headerlink" title="chromeless介绍"></a><a href="#chromeless介绍" title="chromeless介绍"></a>chromeless介绍</h4><p>chromeless社区比较火热，代码更新也非常频繁，个人比较看好。</p><h4 id="chromeless安装"><a href="#chromeless安装" class="headerlink" title="chromeless安装"></a><a href="#chromeless安装" title="chromeless安装"></a>chromeless安装</h4><p>chromeless对nodejs版本要求是&gt;8.2(centos7下node7.6测试可以)，因此需要先升级nodejs，升级方法参考前文；升级完以后，再安装chromeless项目环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir chromeless_test</div><div class="line"><span class="built_in">cd</span> chromeless_test</div><div class="line">npm init</div><div class="line">npm install chromeless</div></pre></td></tr></table></figure><h4 id="chromeless使用"><a href="#chromeless使用" class="headerlink" title="chromeless使用"></a><a href="#chromeless使用" title="chromeless使用"></a>chromeless使用</h4><p>官方API文档：<a href="https://github.com/graphcool/chromeless/blob/master/docs/api.md#api-goto" target="_blank" rel="noopener">https://github.com/graphcool/chromeless/blob/master/docs/api.md#api-goto</a><br>在线代码运行环境：<a href="https://chromeless.netlify.com/#src=" target="_blank" rel="noopener">https://chromeless.netlify.com</a></p><p>创建chromeless_test.js,写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const &#123; Chromeless &#125; = require(<span class="string">‘chromeless’</span>)</div><div class="line"></div><div class="line">async <span class="keyword">function</span> <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">  const chromeless = new Chromeless()</div><div class="line"></div><div class="line">  const screenshot = await chromeless</div><div class="line">    .goto(<span class="string">‘<a href="https://www.baidu.com&#39;" target="_blank" rel="noopener">https://www.baidu.com&#39;</a></span>)</div><div class="line">    //.<span class="built_in">type</span>(<span class="string">‘chromeless’</span>, <span class="string">‘input[name=”q”]’</span>)</div><div class="line">    //.press(13)</div><div class="line">    //.<span class="built_in">wait</span>(<span class="string">‘#resultStats’</span>)</div><div class="line">    .screenshot()</div><div class="line"></div><div class="line">  console.log(screenshot) // prints <span class="built_in">local</span> file path or S3 url</div><div class="line"></div><div class="line">  await chromeless.end()</div><div class="line">&#125;</div><div class="line"></div><div class="line">run().catch(console.error.bind(console))</div></pre></td></tr></table></figure><p>运行代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nohup google-chrome –headless –remote-debugging-port=9222 &amp; <span class="comment">#开启本地headless chrome</span></div><div class="line">node chromeless_test.js</div></pre></td></tr></table></figure><p><code>注意：在运行chromeless前，需要先安装headless chrome，并且需要在本地开启--remote-debugging-port=9222，监听本地9222端口；chromeless也支持使用远程的headless chrome</code></p><h4 id="pychrome工具"><a href="#pychrome工具" class="headerlink" title="pychrome工具"></a><a href="#pychrome工具" title="pychrome工具"></a>pychrome工具</h4><p><code>暂没有研究，尽情期待！</code></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><a href="#常见问题" title="常见问题"></a>常见问题</h3><h4 id="Linux截图中文字体变方块如何解决？"><a href="#Linux截图中文字体变方块如何解决？" class="headerlink" title="Linux截图中文字体变方块如何解决？"></a><a href="#Linux截图中文字体变方块如何解决？" title="Linux截图中文字体变方块如何解决？"></a>Linux截图中文字体变方块如何解决？</h4><p>出现这类问题主要是因为linux服务器字体缺失的问题，解决方案是将字体文件copy到linux服务器/usr/share/fonts/zh_CN目录下。</p><p>第一步：从windows或者mac上获取字体文件，mac上的字体文件地址为：/Library/Fonts，windows字体地址为：c盘下的Windows/Fonts。将Fonts目录打包上传到linux服务器/usr/share/fonts/zh_CN目录下，然后解压。</p><p>第二步：设置权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R 755 /usr/share/fonts/zh_CN</div></pre></td></tr></table></figure><p>第三步：生成fonts.scale</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y install ttmkfdir</div><div class="line">ttmkfdir -e /usr/share/X11/fonts/encodings/encodings.dir</div></pre></td></tr></table></figure><p>第四步：修改字体配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /etc/fonts/fonts.conf</div><div class="line"></div><div class="line"></div><div class="line">在&lt;dir&gt;….&lt;/dir&gt;列表中添加字体</div><div class="line"></div><div class="line">如：&lt;dir&gt;/usr/share/fonts/zh_CN/Fonts&lt;/dir&gt;</div></pre></td></tr></table></figure><p>第五步：刷新字体缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">fc</span>-cache</div></pre></td></tr></table></figure><h4 id="命令行运行headless-chrome需要使用–disable-gpu参数吗？"><a href="#命令行运行headless-chrome需要使用–disable-gpu参数吗？" class="headerlink" title="命令行运行headless chrome需要使用–disable-gpu参数吗？"></a><a href="#命令行运行headless-chrome需要使用–disable-gpu参数吗？" title="命令行运行headless chrome需要使用–disable-gpu参数吗？"></a>命令行运行headless chrome需要使用–disable-gpu参数吗？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">目前–<span class="built_in">disable</span>-gpu 标志在处理一些bug时是需要的，在未来版本的 Chrome 中就不需要了。</div></pre></td></tr></table></figure><h4 id="系统仍然需要安装Xvfb吗？"><a href="#系统仍然需要安装Xvfb吗？" class="headerlink" title="系统仍然需要安装Xvfb吗？"></a><a href="#系统仍然需要安装Xvfb吗？" title="系统仍然需要安装Xvfb吗？"></a>系统仍然需要安装Xvfb吗？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">不需要，Headless Chrome 不使用窗口，所以不需要像 Xvfb 这样的显示服务器。</div><div class="line"></div><div class="line">你问什么是 Xvfb？</div><div class="line">Xvfb 是一个用于类 Unix 系统的运行于内存之内的显示服务器，可以让你运行图形应用程序（如 Chrome），而无需附加的物理显示器。许多人使用 Xvfb 运行早期版本的 Chrome 进行 “headless” 测试。</div></pre></td></tr></table></figure><h4 id="如何创建一个运行-Headless-Chrome-的-Docker-容器？"><a href="#如何创建一个运行-Headless-Chrome-的-Docker-容器？" class="headerlink" title="如何创建一个运行 Headless Chrome 的 Docker 容器？"></a><a href="#如何创建一个运行-Headless-Chrome-的-Docker-容器？" title="如何创建一个运行 Headless Chrome 的 Docker 容器？"></a>如何创建一个运行 Headless Chrome 的 Docker 容器？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看 lighthouse-ci。它有一个使用 Ubuntu 作为基础镜像的 Dockerfile 示例，并且在 App Engine Flexible 容器中安装和运行了 Lighthouse。</div></pre></td></tr></table></figure><h4 id="headless-chrome和-PhantomJS-有什么关系？"><a href="#headless-chrome和-PhantomJS-有什么关系？" class="headerlink" title="headless chrome和 PhantomJS 有什么关系？"></a><a href="#headless-chrome和-PhantomJS-有什么关系？" title="headless chrome和 PhantomJS 有什么关系？"></a>headless chrome和 PhantomJS 有什么关系？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Headless Chrome 和 PhantomJS 是类似的工具。它们都可以用来在无需显示的环境中进行自动化测试。两者的主要不同在于 Phantom 使用了一个较老版本的 WebKit 作为它的渲染引擎，而 Headless Chrome 使用了最新版本的 Blink。</div></pre></td></tr></table></figure><p><code>下篇将介绍分布式漏扫爬虫框架的设计与实现，以及写爬虫过程中需要注意的点</code></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><a href="#参考文章" title="参考文章"></a>参考文章</h3><p><a href="https://zhuanlan.zhihu.com/p/29207391" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29207391</a><br><a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="noopener">https://developers.google.com/web/updates/2017/04/headless-chrome</a><br><a href="https://juejin.im/entry/58fd5e645c497d005803b6a4" target="_blank" rel="noopener">https://juejin.im/entry/58fd5e645c497d005803b6a4</a><br><a href="http://csbun.github.io/blog/2017/09/puppeteer/" target="_blank" rel="noopener">http://csbun.github.io/blog/2017/09/puppeteer/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我已爬遍了全世界，而你却迟迟不见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　自从Google在chrome59版本后加入了 &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/lk
      
    
    </summary>
    
    
      <category term="爬虫技术" scheme="http://chucz.club/tags/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Headless Chrome" scheme="http://chucz.club/tags/Headless-Chrome/"/>
    
      <category term="Puppeteer" scheme="http://chucz.club/tags/Puppeteer/"/>
    
      <category term="pychrome" scheme="http://chucz.club/tags/pychrome/"/>
    
      <category term="chromeless" scheme="http://chucz.club/tags/chromeless/"/>
    
  </entry>
  
  <entry>
    <title>Supervisord管理进程实践</title>
    <link href="http://chucz.club/2018/06/24/Supervisord%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    <id>http://chucz.club/2018/06/24/Supervisord管理进程实践/</id>
    <published>2018-06-24T18:59:38.000Z</published>
    <updated>2018-09-28T08:51:24.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小孩在门前唱着歌<br>阳光它照暖了溪河<br>　　今天凑空研究了下Supervisord，这是一款linux进程管理工具，使用python开发，主要用于在后台维护进程（类似master守护进程），可以实现监控进程的状态、自动重启进程等操作，便于一些服务的维护与监控。<br><a id="more"></a></p></blockquote><h3 id="安装Supervisord"><a href="#安装Supervisord" class="headerlink" title="安装Supervisord"></a><a href="#安装Supervisord" title="安装Supervisord"></a>安装Supervisord</h3><p>由于是用python开发的，因此使用pip安装最为方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install supervisor</div></pre></td></tr></table></figure><p>说明：安装完成之后多了3个工具：echo_supervisord_conf、supervisorctl和supervisord。</p><h3 id="Supervisord配置文件"><a href="#Supervisord配置文件" class="headerlink" title="Supervisord配置文件"></a><a href="#Supervisord配置文件" title="Supervisord配置文件"></a>Supervisord配置文件</h3><p>首先可以使用echo_supervisord_conf命令获取supervisor配置模板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; supervisord.conf</div></pre></td></tr></table></figure><p>说明：该命令在当前目录下创建了一个文件名为supervisord.conf的配置文件，编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim supervisord.conf</div></pre></td></tr></table></figure><p>来看看默认配置文件中的主要配置项：（还有一些配置不常用，可以忽略）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[unix_http_server]</div><div class="line">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</div><div class="line">;chmod=0700                 ; socket 文件的 mode，默认是 0700</div><div class="line">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</div><div class="line"></div><div class="line">;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</div><div class="line">;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</div><div class="line">;username=user              ; 登录管理后台的用户名</div><div class="line">;password=123               ; 登录管理后台的密码</div><div class="line"></div><div class="line">[supervisord]</div><div class="line">logfile=/tmp/supervisord.log ; 日志文件，默认是 <span class="variable">$CWD</span>/supervisord.log</div><div class="line">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</div><div class="line">logfile_backups=10           ; 日志文件保留备份数量默认 10</div><div class="line">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</div><div class="line">pidfile=/tmp/supervisord.pid ; pid 文件</div><div class="line">nodaemon=<span class="literal">false</span>               ; 是否在前台启动，默认是 <span class="literal">false</span>，即以 daemon 的方式启动</div><div class="line">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</div><div class="line">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</div><div class="line"></div><div class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</div><div class="line">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</div><div class="line">[rpcinterface:supervisor]</div><div class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class="line"></div><div class="line">[supervisorctl]</div><div class="line">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</div><div class="line">;serverurl=<a href="http://127.0.0.1:9001" target="_blank" rel="noopener">http://127.0.0.1:9001</a> ; 通过 HTTP 的方式连接 supervisord</div><div class="line"></div><div class="line">; 包含其他的配置文件</div><div class="line">[include]</div><div class="line">files = relative/directory/<em>.ini    ; 可以是 </em>.conf 或 *.ini</div></pre></td></tr></table></figure><p>运行以下命令启动supervisord进程，可测试supervisord是否安装成功并执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c supervisord.conf</div></pre></td></tr></table></figure><p>查看系统进程中是否多了一个supervisord：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -aux | grep supervisord</div></pre></td></tr></table></figure><h3 id="配置Program"><a href="#配置Program" class="headerlink" title="配置Program"></a><a href="#配置Program" title="配置Program"></a>配置Program</h3><p>　　program就是用来配置监控不同的应用程序进程的，推荐每个应用程序单独写一个program配置文件，然后在supervisord.conf中通过include加载所有应用程序的配置。<br>这里拿创建一个celery进程为例，首先在supervisord.conf最后一行写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;加载/etc/supervisor/目录下所有的配置文件</div><div class="line">[include]</div><div class="line">files = /etc/supervisor/*.conf</div></pre></td></tr></table></figure><p>然后创建/etc/supervisor目录，并到目录下创建/etc/supervisor/celery_touchscan.conf文件，写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">;program名称，随便写，但不要重复，是program的唯一标识</div><div class="line">[program:celery_touchscan]</div><div class="line">;指定运行目录</div><div class="line">directory=/root/TouchScanV2/ </div><div class="line">;运行目录下执行命令</div><div class="line"><span class="built_in">command</span>=celery -A scan worker –queue=touchscan –pidfile=<span class="string">“./log/pid.txt”</span> –logfile=<span class="string">“./log/scan.log”</span> -c 10</div><div class="line">;进程名称</div><div class="line">process_name=%(program_name)s_%(process_num)02d</div><div class="line"></div><div class="line">;启动设置</div><div class="line">numprocs=1         ;进程数，注意：（celery进程数量,不是work数量，相当于执行了10个<span class="built_in">command</span>命令，而不是在celery中指定-c 为10）</div><div class="line">autostart=<span class="literal">true</span>      ;当supervisor启动时,程序将会自动启动</div><div class="line">autorestart=<span class="literal">true</span>    ;自动重启（当work被<span class="built_in">kill</span>了之后会重新启动）</div><div class="line">;运行程序的用户</div><div class="line">;user=root</div><div class="line">;startsecs=1 ;程序重启时候停留在runing状态的秒数</div><div class="line">;startretries=10 ;启动失败时的最多重试次数</div><div class="line"></div><div class="line">;停止信号,默认TERM</div><div class="line">;中断:INT (类似于Ctrl+C)(<span class="built_in">kill</span> -INT pid)，退出后会将写文件或日志(推荐)</div><div class="line">;终止:TERM (<span class="built_in">kill</span> -TERM pid)</div><div class="line">;挂起:HUP (<span class="built_in">kill</span> -HUP pid),注意与Ctrl+Z/<span class="built_in">kill</span> -stop pid不同</div><div class="line">;从容停止:QUIT (<span class="built_in">kill</span> -QUIT pid)</div><div class="line">stopsignal=INT</div></pre></td></tr></table></figure><p>重启supervisord进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl -c supervisord.conf reload</div></pre></td></tr></table></figure><p>　　此时查看系统上的进程，发现创建了一个supervisord守护进程，10个celery的work进程（celery的work进程数量取决于command命令中的-c参数以及配置文件中的numprocs参数，numprocs参数是指运行几次command命令，而在celery命令行中指定了需要运行的work数量）</p><p><img src="/upload_image/20180601/1.png" alt=""><br><img src="/upload_image/20180601/2.png" alt=""></p><p>说明：此时如果手动kill掉celery的work进程，会发现celery的work进程会被supervisord自动重启，只有当supervisord守护进程被kill以后，才能真正kill掉celery的work进程。</p><h3 id="supervisord命令行操作"><a href="#supervisord命令行操作" class="headerlink" title="supervisord命令行操作"></a><a href="#supervisord命令行操作" title="supervisord命令行操作"></a>supervisord命令行操作</h3><h4 id="启动supervisord进程"><a href="#启动supervisord进程" class="headerlink" title="启动supervisord进程"></a><a href="#启动supervisord进程" title="启动supervisord进程"></a>启动supervisord进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c supervisord.conf</div></pre></td></tr></table></figure><h4 id="关闭supervisord进程"><a href="#关闭supervisord进程" class="headerlink" title="关闭supervisord进程"></a><a href="#关闭supervisord进程" title="关闭supervisord进程"></a>关闭supervisord进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl -c supervisord.conf shutdown <span class="comment">#注意这里将supervisord进程关闭，但通过supervisord启动的进程没有关闭</span></div></pre></td></tr></table></figure><h4 id="重启supervisord进程"><a href="#重启supervisord进程" class="headerlink" title="重启supervisord进程"></a><a href="#重启supervisord进程" title="重启supervisord进程"></a>重启supervisord进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl -c supervisord.conf reload</div></pre></td></tr></table></figure><h4 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a><a href="#查看进程状态" title="查看进程状态"></a>查看进程状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl</div></pre></td></tr></table></figure><p>效果如下：<br><img src="/upload_image/20180601/3.png" alt=""><br>每列分别代表：programe名称、进程名称，进程状态、进程id，运行时间</p><h4 id="更多supervisorctl命令"><a href="#更多supervisorctl命令" class="headerlink" title="更多supervisorctl命令"></a><a href="#更多supervisorctl命令" title="更多supervisorctl命令"></a>更多supervisorctl命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl status</div><div class="line">$ supervisorctl stop celery_touchscan <span class="comment"># celery_touchscan是一个program的名称</span></div><div class="line">$ supervisorctl start celery_touchscan</div><div class="line">$ supervisorctl restart celery_touchscan</div><div class="line">$ supervisorctl reread</div><div class="line">$ supervisorctl update</div></pre></td></tr></table></figure><p>说明：可以直接在系统shell中执行，也可以先执行supervisorctl，进入supervisorctl_shell中执行相应的命令。</p><h4 id="针对Python环境"><a href="#针对Python环境" class="headerlink" title="针对Python环境"></a><a href="#针对Python环境" title="针对Python环境"></a>针对Python环境</h4><p>如果项目使用了python的pyenv模块来设置环境，则supervisord配置文件中需要指定python环境的路径。其中有两种方式指定程序使用的Python环境：</p><ul><li>command使用绝对路径。</li><li>通过environment配置PYTHONPATH。</li></ul><h3 id="使用supervisord注意点"><a href="#使用supervisord注意点" class="headerlink" title="使用supervisord注意点"></a><a href="#使用supervisord注意点" title="使用supervisord注意点"></a>使用supervisord注意点</h3><h4 id="子进程问题"><a href="#子进程问题" class="headerlink" title="子进程问题"></a><a href="#子进程问题" title="子进程问题"></a>子进程问题</h4><p>有时候用Supervisor托管的程序还会有子进程，如果只杀死主进程，子进程就可能变成孤儿进程。通过以下这两项配置来确保所有子进程都能正确停止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stopasgroup=<span class="literal">true</span></div><div class="line">killasgroup=<span class="literal">true</span></div></pre></td></tr></table></figure><h4 id="配置更新"><a href="#配置更新" class="headerlink" title="配置更新"></a><a href="#配置更新" title="配置更新"></a>配置更新</h4><p>每次修改supervisord配置文件后，需要重启supervisord进程。</p><h4 id="后台程序问题"><a href="#后台程序问题" class="headerlink" title="后台程序问题"></a><a href="#后台程序问题" title="后台程序问题"></a>后台程序问题</h4><p>Supervisor只能管理在前台运行的程序，所以如果应用程序有后台运行的选项，需要关闭。</p><h3 id="supervisord与定时任务"><a href="#supervisord与定时任务" class="headerlink" title="supervisord与定时任务"></a><a href="#supervisord与定时任务" title="supervisord与定时任务"></a>supervisord与定时任务</h3><p>supervisord主要用来管理进程，而不是调度任务，因此如果有定时任务的需求，跟结合crontab一起使用。当然如果是管理celery服务，可以结合celery自身的定时任务功能，具体可移步：<a href="https://thief.one/2017/08/25/1/" target="_blank" rel="noopener">https://thief.one/2017/08/25/1/</a></p><h3 id="supervisord-xml-rpc"><a href="#supervisord-xml-rpc" class="headerlink" title="supervisord xml-rpc"></a><a href="#supervisord-xml-rpc" title="supervisord xml-rpc"></a>supervisord xml-rpc</h3><p>前面介绍的都是在本地利用supervisord管理进程，那么如何实现在远处管理服务器上的进程呢？supervisord工具提供了相关的api。首先需要在配置文件中打开相关配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</div><div class="line">port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</div><div class="line">username=user              ; 登录管理后台的用户名</div><div class="line">password=123               ; 登录管理后台的密码</div></pre></td></tr></table></figure><p>然后启动supervisord后，可以用web界面管理进程，打开<em><a href="http://127.0.0.1:9001" target="_blank" rel="noopener">http://127.0.0.1:9001</a></em>。当然也提供了rpc接口，可供远程调用，代码样例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import xmlrpclib</div><div class="line">server = xmlrpclib.Server(<span class="string">‘<a href="http://user:123@127.0.0.1:9111/RPC2&#39;" target="_blank" rel="noopener">http://user:123@127.0.0.1:9111/RPC2&#39;</a></span>) <span class="comment">#连接rpc服务</span></div><div class="line"><span class="comment"># print server.system.listMethods() # 查询api支持的方法</span></div><div class="line"><span class="comment"># print server.supervisor.getState() # 获取supervisord进程状态</span></div><div class="line"><span class="comment"># print server.supervisor.shutdown() # 关闭supervisor,慎用</span></div><div class="line"><span class="comment"># print server.supervisor.restart() # 重启supervisor</span></div><div class="line"><span class="built_in">print</span> server.supervisor.getProcessInfo(process_name) <span class="comment"># 获取指定进程信息</span></div><div class="line"><span class="built_in">print</span> server.supervisor.startProcess(process_name) <span class="comment"># 启动指定进程</span></div><div class="line"><span class="built_in">print</span> server.supervisor.stopProcess(process_name) <span class="comment"># 暂停指定进程</span></div></pre></td></tr></table></figure><p>api操作比较简单，具体的方法使用文档可以参考：<a href="http://supervisord.org/api.html#xml-rpc" target="_blank" rel="noopener">http://supervisord.org/api.html#xml-rpc</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#参考" title="参考"></a>参考</h3><p><a href="https://pypi.org/project/supervisor/" target="_blank" rel="noopener">https://pypi.org/project/supervisor/</a><br><a href="https://www.jianshu.com/p/9559ab642d88" target="_blank" rel="noopener">https://www.jianshu.com/p/9559ab642d88</a><br><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="noopener">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小孩在门前唱着歌&lt;br&gt;阳光它照暖了溪河&lt;br&gt;　　今天凑空研究了下Supervisord，这是一款linux进程管理工具，使用python开发，主要用于在后台维护进程（类似master守护进程），可以实现监控进程的状态、自动重启进程等操作，便于一
      
    
    </summary>
    
    
      <category term="技术研究" scheme="http://chucz.club/tags/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Supervisord" scheme="http://chucz.club/tags/Supervisord/"/>
    
  </entry>
  
  <entry>
    <title>Python3.5协程学习研究</title>
    <link href="http://chucz.club/2018/06/20/Python3-5%E5%8D%8F%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%A0%94%E7%A9%B6/"/>
    <id>http://chucz.club/2018/06/20/Python3-5协程学习研究/</id>
    <published>2018-06-20T23:18:04.000Z</published>
    <updated>2018-09-28T08:51:24.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今夕何夕故人不来迟暮连山黛</p></blockquote><p>　　 之前有研究过python协程相关的知识，但一直没有进行深入探究。平常工作中使用的也还是以python2为主，然而最近的项目需要使用python3协程相关的内容，因此凑出时间学习了一番python3的协程语法。<br>　　 本篇主要以介绍python3.5的async/await协程语法为主，因为这种语法看上去很别扭，不容易理解。如果对python协程基础不是很了解，建议可以先看此篇：<a href="https://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/" target="_blank" rel="noopener">Python协程</a>。<br><a id="more"></a></p><h3 id="协程函数（异步函数）"><a href="#协程函数（异步函数）" class="headerlink" title="协程函数（异步函数）"></a><a href="#协程函数（异步函数）" title="协程函数（异步函数）"></a>协程函数（异步函数）</h3><p>　　 我们平常使用最多的函数都是同步函数，即不同函数执行是按顺序执行的。那么什么是异步函数呢？怎么创建异步函数？怎么在异步函数之间来回切换执行？不急，请往下看。</p><h4 id="创建协程函数"><a href="#创建协程函数" class="headerlink" title="创建协程函数"></a><a href="#创建协程函数" title="创建协程函数"></a>创建协程函数</h4><p>先来看下普通函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line"></div><div class="line">def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"><span class="built_in">print</span>(a,<span class="built_in">type</span>(a))</div><div class="line"><span class="built_in">print</span>(b,<span class="built_in">type</span>(b))</div></pre></td></tr></table></figure><p>运行以上代码得到结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">None &lt;class <span class="string">‘NoneType’</span>&gt;</div><div class="line">None &lt;class <span class="string">‘NoneType’</span>&gt;</div></pre></td></tr></table></figure><p>说明：程序顺序执行了test1、test2函数，在调用函数的时候就自动进入了函数体，并执行了函数的内容。</p><p>然后使用async关键词将普通函数变成协程函数，即异步函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(test1())</div><div class="line"><span class="built_in">print</span>(test2())</div></pre></td></tr></table></figure><p>运行以上代码得到结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;coroutine object test1 at 0x109f4c620&gt;</div><div class="line">asyncio_python3_test.py:16: RuntimeWarning: coroutine <span class="string">‘test1’</span> was never awaited</div><div class="line">  <span class="built_in">print</span>(test1())</div><div class="line">&lt;coroutine object test2 at 0x109f4c620&gt;</div><div class="line">asyncio_python3_test.py:17: RuntimeWarning: coroutine <span class="string">‘test2’</span> was never awaited</div><div class="line">  <span class="built_in">print</span>(test2())</div></pre></td></tr></table></figure><p>说明：忽略结果中的告警，可以看到调用函数test1、test2的时候，并没有进入函数体且执行函数内容，而是返回了一个coroutine（协程对象）。</p><p>除了函数外，类的方法也可以使用async关键词将其变成协程方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class <span class="built_in">test</span>:</div><div class="line">    async def run(self):</div><div class="line">        <span class="built_in">print</span>(<span class="string">“1”</span>)</div></pre></td></tr></table></figure><h4 id="执行协程函数"><a href="#执行协程函数" class="headerlink" title="执行协程函数"></a><a href="#执行协程函数" title="执行协程函数"></a>执行协程函数</h4><p>　　 前面我们成功创建了协程函数，并且在调用函数的时候返回了一个协程对象，那么怎么进入函数体并执行函数内容呢？类似于生成器，可以使用send方法执行函数，修改下前面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"></div><div class="line">a.send(None)</div><div class="line">b.send(None)</div></pre></td></tr></table></figure><p>运行以上代码得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">“asyncio_python3_test.py”</span>, line 19, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a.send(None)</div><div class="line">StopIteration</div><div class="line">sys:1: RuntimeWarning: coroutine <span class="string">‘test2’</span> was never awaited</div></pre></td></tr></table></figure><p>　　 说明：程序先执行了test1协程函数，当test1执行完时报了StopIteration异常，这是协程函数执行完饭回的一个异常，我们可以用try except捕捉，来用判断协程函数是否执行完毕。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"></div><div class="line">try:</div><div class="line">    a.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration as e:</div><div class="line">    <span class="built_in">print</span>(e.value)</div><div class="line">    <span class="comment"># 协程函数执行结束时会抛出一个StopIteration 异常，标志着协程函数执行结束，返回值在value中</span></div><div class="line">    pass</div><div class="line">try:</div><div class="line">    b.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration:</div><div class="line">    <span class="built_in">print</span>(e.value)</div><div class="line">    <span class="comment"># 协程函数执行结束时会抛出一个StopIteration 异常，标志着协程函数执行结束，返回值在value中</span></div><div class="line">    pass</div></pre></td></tr></table></figure><p>运行以上代码得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure><p>　　 说明：程序先执行了test1函数，等到test1函数执行完后再执行test2函数。从执行过程上来看目前协程函数与普通函数没有区别，并没有实现异步函数，那么如何交叉运行协程函数呢？</p><h4 id="交叉执行协程函数（await）"><a href="#交叉执行协程函数（await）" class="headerlink" title="交叉执行协程函数（await）"></a><a href="#交叉执行协程函数（await）" title="交叉执行协程函数（await）"></a>交叉执行协程函数（await）</h4><p>　　 通过以上例子，我们发现定义协程函数可以使用async关键词，执行函数可以使用send方法，那么如何实现在两个协程函数间来回切换执行呢？这里需要使用await关键词，修改一下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await asyncio.sleep(1) <span class="comment"># asyncio.sleep(1)返回的也是一个协程对象</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test2()</div><div class="line"></div><div class="line">try:</div><div class="line">    a.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration:</div><div class="line">    <span class="comment"># 协程函数执行结束时会抛出一个StopIteration 异常，标志着协程函数执行结束</span></div><div class="line">    pass</div><div class="line"></div><div class="line">try:</div><div class="line">    b.send(None) <span class="comment"># 可以通过调用 send 方法，执行协程函数</span></div><div class="line">except StopIteration:</div><div class="line">    pas</div></pre></td></tr></table></figure><p>运行以上函数得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure><p>　　 说明：程序先执行test1协程函数，在执行到await时，test1函数停止了执行（阻塞）；接着开始执行test2协程函数，直到test2执行完毕。从结果中，我们可以看到，直到程序运行完毕，test1函数也没有执行完（没有执行print(“2”)），那么如何使test1函数执行完毕呢？可以使用asyncio自带的方法循环执行协程函数。</p><h4 id="await与阻塞"><a href="#await与阻塞" class="headerlink" title="await与阻塞"></a><a href="#await与阻塞" title="await与阻塞"></a>await与阻塞</h4><p>　　 使用async可以定义协程对象，使用await可以针对耗时的操作进行挂起，就像生成器里的yield一样，函数让出控制权。协程遇到await，事件循环将会挂起该协程，执行别的协程，直到其他的协程也挂起或者执行完毕，再进行下一个协程的执行，协程的目的也是让一些耗时的操作异步化。</p><p>注意点：await后面跟的必须是一个Awaitable对象，或者实现了相应协议的对象，查看Awaitable抽象类的代码，表明了只要一个类实现了<strong>await</strong>方法，那么通过它构造出来的实例就是一个Awaitable，并且Coroutine类也继承了Awaitable。</p><h4 id="自动循环执行协程函数"><a href="#自动循环执行协程函数" class="headerlink" title="自动循环执行协程函数"></a><a href="#自动循环执行协程函数" title="自动循环执行协程函数"></a>自动循环执行协程函数</h4><p>　　 通过前面介绍我们知道执行协程函数需要使用send方法，但一旦协程函数执行过程中切换到其他函数了，那么这个函数就不在被继续运行了，并且使用sned方法不是很高效。那么如何在执行整个程序过程中，自动得执行所有的协程函数呢，就如同多线程、多进程那样，隐式得执行而不是显示的通过send方法去执行函数。</p><h5 id="事件循环方法"><a href="#事件循环方法" class="headerlink" title="事件循环方法"></a><a href="#事件循环方法" title="事件循环方法"></a>事件循环方法</h5><p>前面提到的问题就需要用到事件循环方法去解决，即asyncio.get_event_loop方法，修改以上代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(test1())</div></pre></td></tr></table></figure><p>运行以上代码得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div><div class="line">2</div></pre></td></tr></table></figure><p>说明：asyncio.get_event_loop方法可以创建一个事件循环，然后使用run_until_complete将协程注册到事件循环，并启动事件循环。</p><h5 id="task任务"><a href="#task任务" class="headerlink" title="task任务"></a><a href="#task任务" title="task任务"></a>task任务</h5><p>　　 由于协程对象不能直接运行，在注册事件循环的时候，其实是run_until_complete方法将协程包装成为了一个任务（task）对象。所谓task对象是Future类的子类，保存了协程运行后的状态，用于未来获取协程的结果。我们也可以手动将协程对象定义成task，修改以上代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = loop.create_task(test1())</div><div class="line">loop.run_until_complete(task)</div></pre></td></tr></table></figure><p>　　 说明：前面说到task对象保存了协程运行的状态，并且可以获取协程函数运行的返回值，那么具体该如何获取呢？这里可以分两种方式，一种需要绑定回调函数，另外一种则直接在运行完task任务后输出。值得一提的是，如果使用send方法执行函数，则返回值可以通过捕捉StopIteration异常，利用StopIteration.value获取。</p><h5 id="直接输出task结果"><a href="#直接输出task结果" class="headerlink" title="直接输出task结果"></a><a href="#直接输出task结果" title="直接输出task结果"></a>直接输出task结果</h5><p>当协程函数运行结束后，我们需要得到其返回值，第一种方式就是等到task状态为finish时，调用task的result方法获取返回值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">“stop”</span></div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = asyncio.ensure_future(test1())</div><div class="line">loop.run_until_complete(task)</div><div class="line"><span class="built_in">print</span>(task.result())</div></pre></td></tr></table></figure><p>运行以上代码得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div><div class="line">2</div><div class="line">stop</div></pre></td></tr></table></figure><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a><a href="#回调函数" title="回调函数"></a>回调函数</h5><p>　　 获取返回值的第二种方法是可以通过绑定回调函数，在task执行完毕的时候可以获取执行的结果，回调的最后一个参数是future对象，通过该对象可以获取协程返回值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">“stop”</span></div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">def callback(future):</div><div class="line">    <span class="built_in">print</span>(<span class="string">‘Callback:’</span>,future.result()) <span class="comment"># 通过future对象的result方法可以获取协程函数的返回值</span></div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = asyncio.ensure_future(test1()) <span class="comment"># 创建task，test1()是一个协程对象</span></div><div class="line">task.add_done_callback(callback) <span class="comment"># 绑定回调函数</span></div><div class="line">loop.run_until_complete(task)</div></pre></td></tr></table></figure><p>运行以上代码得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">4</div><div class="line">2</div><div class="line">Callback: stop</div></pre></td></tr></table></figure><p>如果回调函数需要接受多个参数，可以通过偏函数导入，修改代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import functools</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await test2()</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">“stop”</span></div><div class="line"></div><div class="line">async def test2():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“3”</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“4”</span>)</div><div class="line"></div><div class="line">def callback(param1,param2,future):</div><div class="line">    <span class="built_in">print</span>(param1,param2)</div><div class="line">    <span class="built_in">print</span>(<span class="string">‘Callback:’</span>,future.result())</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = asyncio.ensure_future(test1())</div><div class="line">task.add_done_callback(functools.partial(callback,<span class="string">“param1”</span>,<span class="string">“param2”</span>))</div><div class="line">loop.run_until_complete(task)</div></pre></td></tr></table></figure><p>说明：回调函数中的future对象就是创建的task对象。</p><h5 id="future对象"><a href="#future对象" class="headerlink" title="future对象"></a><a href="#future对象" title="future对象"></a>future对象</h5><p>　　 future对象有几个状态：Pending、Running、Done、Cancelled。创建future的时候，task为pending，事件循环调用执行的时候当然就是running，调用完毕自然就是done，如果需要停止事件循环，就需要先把task取消，可以使用asyncio.Task获取事件循环的task。</p><h5 id="协程停止"><a href="#协程停止" class="headerlink" title="协程停止"></a><a href="#协程停止" title="协程停止"></a>协程停止</h5><p>　　 前面介绍了使用事件循环执行协程函数，那么怎么停止执行呢？在停止执行协程前，需要先取消task，然后再停止loop事件循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await asyncio.sleep(3)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">“stop”</span></div><div class="line"></div><div class="line">tasks = [</div><div class="line">    asyncio.ensure_future(test1()),</div><div class="line">    asyncio.ensure_future(test1()),</div><div class="line">    asyncio.ensure_future(test1()),</div><div class="line">]</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">try:</div><div class="line">    loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">except KeyboardInterrupt as e:</div><div class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> asyncio.Task.all_tasks():</div><div class="line">        task.cancel()</div><div class="line">    loop.stop()</div><div class="line">    loop.run_forever()</div><div class="line">finally:</div><div class="line">    loop.close()</div></pre></td></tr></table></figure><p>运行以上代码，按ctrl+c可以结束执行。</p><h3 id="本文中用到的一些概念及方法"><a href="#本文中用到的一些概念及方法" class="headerlink" title="本文中用到的一些概念及方法"></a><a href="#本文中用到的一些概念及方法" title="本文中用到的一些概念及方法"></a>本文中用到的一些概念及方法</h3><ul><li>event_loop事件循环：程序开启一个无限的循环，当把一些函数注册到事件循环上时，满足事件发生条件即调用相应的函数。</li><li>coroutine协程对象：指一个使用async关键字定义的函数，它的调用不会立即执行函数，而是会返回一个协程对象，协程对象需要注册到事件循环，由事件循环调用。</li><li>task任务：一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含任务的各种状态。</li><li>future：代表将来执行或没有执行的任务的结果，它和task上没有本质的区别</li><li>async/await关键字：python3.5用于定义协程的关键字，async定义一个协程，await用于挂起阻塞的异步调用接口。</li></ul><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a><a href="#并发与并行" title="并发与并行"></a>并发与并行</h3><p>　　 并发通常指有多个任务需要同时进行，并行则是同一时刻有多个任务执行。用多线程、多进程、协程来说，协程实现并发，多线程与多进程实现并行。</p><h4 id="asyncio协程如何实现并发"><a href="#asyncio协程如何实现并发" class="headerlink" title="asyncio协程如何实现并发"></a><a href="#asyncio协程如何实现并发" title="asyncio协程如何实现并发"></a>asyncio协程如何实现并发</h4><p>　　 asyncio想要实现并发，就需要多个协程来完成任务，每当有任务阻塞的时候就await，然后其他协程继续工作，这需要创建多个协程的列表，然后将这些协程注册到事件循环中。这里指的多个协程，可以是多个协程函数，也可以是一个协程函数的多个协程对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def test1():</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">“1”</span>)</div><div class="line">    await asyncio.sleep(1)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“2”</span>)</div><div class="line">    <span class="built_in">return</span> <span class="string">“stop”</span></div><div class="line"></div><div class="line">a = test1()</div><div class="line">b = test1()</div><div class="line">c = test1()</div><div class="line"></div><div class="line">tasks = [</div><div class="line">    asyncio.ensure_future(a),</div><div class="line">    asyncio.ensure_future(b),</div><div class="line">    asyncio.ensure_future(c),</div><div class="line">]</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks)) <span class="comment"># 注意asyncio.wait方法</span></div><div class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</div><div class="line">    <span class="built_in">print</span>(<span class="string">“task result is “</span>,task.result())</div></pre></td></tr></table></figure><p>运行以上代码得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">1</div><div class="line">1</div><div class="line">2</div><div class="line">2</div><div class="line">2</div><div class="line">task result is  stop</div><div class="line">task result is  stop</div><div class="line">task result is  stop</div></pre></td></tr></table></figure><p>说明：代码先是定义了三个协程对象，然后通过asyncio.ensure_future方法创建了三个task，并且将所有的task加入到了task列表，最终使用loop.run_until_complete将task列表添加到事件循环中。</p><h3 id="协程爬虫"><a href="#协程爬虫" class="headerlink" title="协程爬虫"></a><a href="#协程爬虫" title="协程爬虫"></a>协程爬虫</h3><p>　　 前面介绍了如何使用async与await创建协程函数，使用asyncio.get_event_loop创建事件循环并执行协程函数。例子很好地展示了协程并发的高效，但在实际应用场景中该如何开发协程程序？比如说异步爬虫。我尝试用requests模块、urllib模块写异步爬虫，但实际操作发现并不支持asyncio异步，因此可以使用aiohttp模块编写异步爬虫。</p><h4 id="aiohttp实现"><a href="#aiohttp实现" class="headerlink" title="aiohttp实现"></a><a href="#aiohttp实现" title="aiohttp实现"></a>aiohttp实现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import aiohttp</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">“start spider “</span>,url)</div><div class="line">    async with aiohttp.ClientSession() as session:</div><div class="line">        async with session.get(url) as resp:</div><div class="line">            <span class="built_in">print</span>(resp.url)</div><div class="line"></div><div class="line">url_list = [<span class="string">“<a href="https://thief.one&quot;" target="_blank" rel="noopener">https://thief.one&quot;</a></span>,<span class="string">“<a href="https://home.nmask.cn&quot;" target="_blank" rel="noopener">https://home.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://movie.nmask.cn&quot;" target="_blank" rel="noopener">https://movie.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://tool.nmask.cn&quot;" target="_blank" rel="noopener">https://tool.nmask.cn&quot;</a></span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure><p>运行以上代码得到以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">start spider  <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div><div class="line">start spider  <a href="https://home.nmask.cn" target="_blank" rel="noopener">https://home.nmask.cn</a></div><div class="line">start spider  <a href="https://movie.nmask.cn" target="_blank" rel="noopener">https://movie.nmask.cn</a></div><div class="line">start spider  <a href="https://tool.nmask.cn" target="_blank" rel="noopener">https://tool.nmask.cn</a></div><div class="line"><a href="https://movie.nmask.cn" target="_blank" rel="noopener">https://movie.nmask.cn</a></div><div class="line"><a href="https://home.nmask.cn" target="_blank" rel="noopener">https://home.nmask.cn</a></div><div class="line"><a href="https://tool.nmask.cn" target="_blank" rel="noopener">https://tool.nmask.cn</a></div><div class="line"><a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div></pre></td></tr></table></figure><p>说明：aiohttp基于asyncio实现，既可以用来写webserver，也可以当爬虫使用。</p><h4 id="requests实现"><a href="#requests实现" class="headerlink" title="requests实现"></a><a href="#requests实现" title="requests实现"></a>requests实现</h4><p>　　 由于requests模块阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结，但如果一定要用requests模块，可以使用事件循环对象的run_in_executor方法，通过run_in_executor方法来新建一个线程来执行耗时函数，因此可以这样修改代码实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import requests</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">“start “</span>,url)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    response = await loop.run_in_executor(None, requests.get, url)</div><div class="line">    <span class="built_in">print</span>(response.url)</div><div class="line">    </div><div class="line">url_list = [<span class="string">“<a href="https://thief.one&quot;" target="_blank" rel="noopener">https://thief.one&quot;</a></span>,<span class="string">“<a href="https://home.nmask.cn&quot;" target="_blank" rel="noopener">https://home.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://movie.nmask.cn&quot;" target="_blank" rel="noopener">https://movie.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://tool.nmask.cn&quot;" target="_blank" rel="noopener">https://tool.nmask.cn&quot;</a></span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure><p>如果要给requests带上参数，可以使用functools：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import requests</div><div class="line">import functools</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">“start “</span>,url)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    try:</div><div class="line">        response = await loop.run_in_executor(None,functools.partial(requests.get,url=url,params=<span class="string">“”</span>,timeout=1))</div><div class="line">    except Exception as e:</div><div class="line">        <span class="built_in">print</span>(e)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span>(response.url)</div><div class="line"></div><div class="line">url_list = [<span class="string">“<a href="https://thief.one&quot;" target="_blank" rel="noopener">https://thief.one&quot;</a></span>,<span class="string">“<a href="https://home.nmask.cn&quot;" target="_blank" rel="noopener">https://home.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://movie.nmask.cn&quot;" target="_blank" rel="noopener">https://movie.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://tool.nmask.cn&quot;" target="_blank" rel="noopener">https://tool.nmask.cn&quot;</a></span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure><h3 id="asyncio中使用阻塞函数"><a href="#asyncio中使用阻塞函数" class="headerlink" title="asyncio中使用阻塞函数"></a><a href="#asyncio中使用阻塞函数" title="asyncio中使用阻塞函数"></a>asyncio中使用阻塞函数</h3><p>　　 如同前面介绍如何在asyncio中使用requests模块一样，如果想在asyncio中使用其他阻塞函数，该怎么实现呢？虽然目前有异步函数支持asyncio，但实际问题是大部分IO模块还不支持asyncio。</p><h4 id="阻塞函数在asyncio中使用的问题"><a href="#阻塞函数在asyncio中使用的问题" class="headerlink" title="阻塞函数在asyncio中使用的问题"></a><a href="#阻塞函数在asyncio中使用的问题" title="阻塞函数在asyncio中使用的问题"></a>阻塞函数在asyncio中使用的问题</h4><p>　　 阻塞函数(例如io读写，requests网络请求)阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><a href="#解决方案" title="解决方案"></a>解决方案</h4><p>　　 这个问题的解决方法是使用事件循环对象的run_in_executor方法。asyncio的事件循环在背后维护着一个ThreadPoolExecutor对象，我们可以调用run_in_executor方法，把可调用对象发给它执行，即可以通过run_in_executor方法来新建一个线程来执行耗时函数。</p><h4 id="run-in-executor方法"><a href="#run-in-executor方法" class="headerlink" title="run_in_executor方法"></a><a href="#run-in-executor方法" title="run_in_executor方法"></a>run_in_executor方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AbstractEventLoop.run_in_executor(executor, func, *args)</div></pre></td></tr></table></figure><ul><li>executor 参数应该是一个 Executor 实例。如果为 None，则使用默认 executor。</li><li>func 就是要执行的函数</li><li>args 就是传递给 func 的参数</li></ul><p>实际例子（使用time.sleep()）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">import time</div><div class="line"></div><div class="line">async def run(url):</div><div class="line">    <span class="built_in">print</span>(<span class="string">“start “</span>,url)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    try:</div><div class="line">        await loop.run_in_executor(None,time.sleep,1)</div><div class="line">    except Exception as e:</div><div class="line">        <span class="built_in">print</span>(e)</div><div class="line">    <span class="built_in">print</span>(<span class="string">“stop “</span>,url)</div><div class="line"></div><div class="line">url_list = [<span class="string">“<a href="https://thief.one&quot;" target="_blank" rel="noopener">https://thief.one&quot;</a></span>,<span class="string">“<a href="https://home.nmask.cn&quot;" target="_blank" rel="noopener">https://home.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://movie.nmask.cn&quot;" target="_blank" rel="noopener">https://movie.nmask.cn&quot;</a></span>,<span class="string">“<a href="https://tool.nmask.cn&quot;" target="_blank" rel="noopener">https://tool.nmask.cn&quot;</a></span>]</div><div class="line"></div><div class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div></pre></td></tr></table></figure><p>运行以上代码得到以下函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">start  <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div><div class="line">start  <a href="https://home.nmask.cn" target="_blank" rel="noopener">https://home.nmask.cn</a></div><div class="line">start  <a href="https://movie.nmask.cn" target="_blank" rel="noopener">https://movie.nmask.cn</a></div><div class="line">start  <a href="https://tool.nmask.cn" target="_blank" rel="noopener">https://tool.nmask.cn</a></div><div class="line">stop  <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div><div class="line">stop  <a href="https://movie.nmask.cn" target="_blank" rel="noopener">https://movie.nmask.cn</a></div><div class="line">stop  <a href="https://home.nmask.cn" target="_blank" rel="noopener">https://home.nmask.cn</a></div><div class="line">stop  <a href="https://tool.nmask.cn" target="_blank" rel="noopener">https://tool.nmask.cn</a></div></pre></td></tr></table></figure><p>说明：有了run_in_executor方法，我们就可以使用之前熟悉的模块创建协程并发了，而不需要使用特定的模块进行IO异步开发。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#参考" title="参考"></a>参考</h3><p><a href="https://www.oschina.net/translate/playing-around-with-await-async-in-python-3-5" target="_blank" rel="noopener">https://www.oschina.net/translate/playing-around-with-await-async-in-python-3-5</a><br><a href="https://www.jianshu.com/p/b5e347b3a17c" target="_blank" rel="noopener">https://www.jianshu.com/p/b5e347b3a17c</a><br><a href="https://zhuanlan.zhihu.com/p/27258289" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27258289</a><br><a href="https://juejin.im/entry/5aabb949f265da23a04951df" target="_blank" rel="noopener">https://juejin.im/entry/5aabb949f265da23a04951df</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今夕何夕故人不来迟暮连山黛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　 之前有研究过python协程相关的知识，但一直没有进行深入探究。平常工作中使用的也还是以python2为主，然而最近的项目需要使用python3协程相关的内容，因此凑出时间
      
    
    </summary>
    
    
      <category term="编程之道" scheme="http://chucz.club/tags/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
      <category term="python" scheme="http://chucz.club/tags/python/"/>
    
      <category term="协程" scheme="http://chucz.club/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>利用chrome_remote_interface实现程序化、自动化Web安全测试</title>
    <link href="http://chucz.club/2018/06/07/%E5%88%A9%E7%94%A8chrome-remote-interface%E5%AE%9E%E7%8E%B0%E7%A8%8B%E5%BA%8F%E5%8C%96%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96Web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"/>
    <id>http://chucz.club/2018/06/07/利用chrome-remote-interface实现程序化、自动化Web安全测试/</id>
    <published>2018-06-07T01:00:27.000Z</published>
    <updated>2018-09-28T08:51:24.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>高考加油！</p></blockquote><p>　　如果要问有哪些抓包神器或者流量分析工具？以下几款工具是必须要提的，burpsuite（跨平台）、<a href="https://thief.one/2017/04/27/1/" target="_blank" rel="noopener">fiddler</a>（windows下抓包神器）、<a href="https://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/" target="_blank" rel="noopener">wireshark</a>（经典网络抓包工具）、<a href="https://thief.one/2017/09/27/1/" target="_blank" rel="noopener">justniffer</a>（与前面几个使用代理获取流量不一样的是，justniffer是基于网卡获取流量）等。以上这几款工具之前我有单独成文介绍过，如有需要可点击蓝色链接移步。<br>　　那么如果问有哪些程序化的抓包工具？（注明一下这里的程序化指的是可编程）首先burpsuite算一个，因为我们可以开发扩展工具（<a href="https://thief.one/2018/05/04/1/" target="_blank" rel="noopener">burpsuite插件开发之检测越权访问漏洞</a>）；另外fiddle也算一个，可以编辑配置文件，达到扩展功能，之前也介绍过。<br>　　那么如果问有哪些即可以实现程序化又可以实现自动化的抓包工具？（注明一下这里的自动化是指自动产生流量）这个问题有点拗口，你可能会想为什么一个抓包工具要负责产生流量，流量交给爬虫岂不是更好？这个问题暂且放一放，继续往下看。<br><a id="more"></a></p><h3 id="自动化安全测试"><a href="#自动化安全测试" class="headerlink" title="自动化安全测试"></a><a href="#自动化安全测试" title="自动化安全测试"></a>自动化安全测试</h3><p>　　平常我们经常会使用burpsuite等工具检测一个网站的安全性，检测方法不外乎使用浏览器访问网站且把流量代理到burpsuite上，然后在burpsuite上通过拦截、修改、重放流量等方式测试网站安全性。然而当要测试的网站非常多时，有没有一个更自动化、更省力的方式去测试呢？方案肯定是有的，简单来说要实现自动化web安全测试无非要解决几个问题，首先是流量怎么产生？然后是怎么从流量中分析出漏洞？</p><h4 id="自动化测试方案：主动扫描器"><a href="#自动化测试方案：主动扫描器" class="headerlink" title="自动化测试方案：主动扫描器"></a><a href="#自动化测试方案：主动扫描器" title="自动化测试方案：主动扫描器"></a>自动化测试方案：主动扫描器</h4><p>　　市面上基于爬虫的主动扫描器就是一种自动化安全测试工具，首先它的流量是通过爬虫爬取url主动产生的，然后利用一些漏洞插件去构造不同的访问请求。短板：目前市面上扫描器爬虫大多基于web1.0，无法加载js渲染网页，而现在越来越多的网站使用web2.0技术实现前后端数据交互。</p><h4 id="自动化测试方案：被动扫描器"><a href="#自动化测试方案：被动扫描器" class="headerlink" title="自动化测试方案：被动扫描器"></a><a href="#自动化测试方案：被动扫描器" title="自动化测试方案：被动扫描器"></a>自动化测试方案：被动扫描器</h4><p>　　一些大厂内部自研的被动扫描器，首先它的流量不是通过爬虫主动获取的，而是通过监听交换机等网络设备的网卡流量，然后利用一些漏洞插件去分析流量中存在漏洞的点。短板：适合大厂各业务线安全检查不适合测试某个特定的网站，因为需要人为访问网站产生流量。</p><h4 id="自动化测试方案：selenium-流量获取工具-漏洞插件"><a href="#自动化测试方案：selenium-流量获取工具-漏洞插件" class="headerlink" title="自动化测试方案：selenium+流量获取工具+漏洞插件"></a><a href="#自动化测试方案：selenium-流量获取工具-漏洞插件" title="自动化测试方案：selenium+流量获取工具+漏洞插件"></a>自动化测试方案：selenium+流量获取工具+漏洞插件</h4><p>　　selenium是一款网站自动化测试工具，可以程序化的操作浏览器，实现自动化产生流量。再结合抓包工具以及漏洞检测插件，应该就可以解决流量获取以及漏洞检测的问题。短板：用selenium只能实现一些简单的浏览器操作，对于检测复杂的网站系统，似乎不够用，而且速度很慢，性能很差。</p><h4 id="自动化测试方案：chrome-remote-interface-漏洞插件"><a href="#自动化测试方案：chrome-remote-interface-漏洞插件" class="headerlink" title="自动化测试方案：chrome_remote_interface+漏洞插件"></a><a href="#自动化测试方案：chrome-remote-interface-漏洞插件" title="自动化测试方案：chrome_remote_interface+漏洞插件"></a>自动化测试方案：chrome_remote_interface+漏洞插件</h4><p>　　之前我介绍过<a href="https://thief.one/2018/03/06/1/" target="_blank" rel="noopener">headless chrome</a>，也介绍过<a href="https://thief.one/2017/03/31/Phantomjs%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">phantomjs</a>等web2.0爬虫工具，目前推荐去学习使用headless-chrome。headless chrome工具是用来自动加载js，获取渲染后的页面源码，解决web2.0爬虫之困。而chrome_remote_interface是一个更底层的工具，可以用来分析协议，简单说就是可以分析整个渲染过程，以及截取分析过程中的流量。就类似您打开了chrome浏览器的审查元素功能，然后刷新一下页面，查看一下network信息。<br><img src="/upload_image/20180607/1.png" alt=""></p><h3 id="chrome-remote-interface介绍"><a href="#chrome-remote-interface介绍" class="headerlink" title="chrome_remote_interface介绍"></a><a href="#chrome-remote-interface介绍" title="chrome_remote_interface介绍"></a>chrome_remote_interface介绍</h3><p>chrome_remote_interface是一个开源项目，<a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="noopener">项目地址</a>，并且支持命令行、编码两种方式，且使用node.js开发。</p><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a><a href="#安装使用" title="安装使用"></a>安装使用</h4><p>因为chrome_remote_interface是基于nodejs的，因此需要安装npm包管理工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install npm -y</div></pre></td></tr></table></figure><p>然后创建一个目录，初始化一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure><p>在目录下安装chrome_remote_interface</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install chrome-remote-interface</div></pre></td></tr></table></figure><p>创建一个简单的nodejs程序(nmask.js)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">const CDP = require(<span class="string">‘chrome-remote-interface’</span>);</div><div class="line"></div><div class="line">// node nmask.js <a href="https://nmask.cn" target="_blank" rel="noopener">https://nmask.cn</a></div><div class="line"></div><div class="line">var options = process.argv;</div><div class="line">var target_url = options[2];</div><div class="line"></div><div class="line">CDP((client) =&gt; &#123;</div><div class="line">    // extract domains</div><div class="line">    const &#123;Network, Page&#125; = client;</div><div class="line">    </div><div class="line">    // setup handlers</div><div class="line">    Network.requestWillBeSent((params) =&gt; &#123;</div><div class="line">        console.log(params.request.url);</div><div class="line">    &#125;);</div><div class="line">    Page.loadEventFired(() =&gt; &#123;</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    // <span class="built_in">enable</span> events <span class="keyword">then</span> start!</div><div class="line">    Promise.all([</div><div class="line">        Network.enable(),</div><div class="line">        Page.enable()</div><div class="line">    ]).<span class="keyword">then</span>(() =&gt; &#123;</div><div class="line">        <span class="built_in">return</span> Page.navigate(&#123;url: target_url&#125;);//输出请求的url</div><div class="line">    &#125;).catch((err) =&gt; &#123;</div><div class="line">        console.error(err);</div><div class="line">        client.close();</div><div class="line">    &#125;);</div><div class="line">&#125;).on(<span class="string">‘error’</span>, (err) =&gt; &#123;</div><div class="line">    console.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>说明：在运行这段程序前，必须要在系统上安装chrome以及启动chrome headless监听模式，具体怎么安装chrome headless可以移步：<a href="https://thief.one/2018/03/06/1/" target="_blank" rel="noopener">headless chrome and api</a><br>启动chrome headless监听模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chrome –headless –remote-debugging-port=9222</div><div class="line">或者</div><div class="line">google-chrome –headless –remote-debugging-port=9222</div></pre></td></tr></table></figure><p>然后另外开启一个窗口，运行nodejs：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node nmask.js <a href="https://thief.one" target="_blank" rel="noopener">https://thief.one</a></div></pre></td></tr></table></figure><p>运行结果如下：(输出渲染过程中请求的所有url)<br><img src="/upload_image/20180607/2.png" alt=""></p><h3 id="chrome-remote-interface-for-python"><a href="#chrome-remote-interface-for-python" class="headerlink" title="chrome_remote_interface for python"></a><a href="#chrome-remote-interface-for-python" title="chrome_remote_interface for python"></a>chrome_remote_interface for python</h3><p>　　由于chrome_remote_interface是nodejs实现的，因此对于不熟悉nodejs的朋友来说coding成本比较高。然而好在已经有外国友人用python封装了一个工具，<a href="https://github.com/wasiher/chrome_remote_interface_python" target="_blank" rel="noopener">项目地址</a>，虽然目前此项目尚处于初级阶段，但实实在在地解决了我的问题。</p><h4 id="安装使用-1"><a href="#安装使用-1" class="headerlink" title="安装使用"></a><a href="#安装使用-1" title="安装使用"></a>安装使用</h4><p>基于是用python3.5开发的，那么就clone一下项目，直接安装吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> <a href="https://github.com/wasiher/chrome-remote-interface-python.git" target="_blank" rel="noopener">https://github.com/wasiher/chrome-remote-interface-python.git</a></div><div class="line">python3 setup.py install</div></pre></td></tr></table></figure><p>编写一个python版的程序(nmask.py)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -<em>- coding:utf-8 -</em>-</span></div><div class="line"></div><div class="line"><span class="string">‘’</span><span class="string">‘</span></div><div class="line"><strong>author</strong>=”nMask”</div><div class="line"><strong>Date</strong>=”7 Jun 2018”</div><div class="line"><strong>Blog</strong>=”<a href="https://thief.one&quot;" target="_blank" rel="noopener">https://thief.one&quot;</a></div><div class="line"><strong>version</strong>=”1.0”</div><div class="line"><strong>py_version</strong>=”3.5”</div><div class="line"></div><div class="line">‘<span class="string">‘’</span></div><div class="line"></div><div class="line">import asyncio</div><div class="line">import chrome_remote_interface</div><div class="line"></div><div class="line"></div><div class="line">class callbacks(object):</div><div class="line">    <span class="string">‘’</span><span class="string">‘ callback class ‘</span><span class="string">‘’</span></div><div class="line"></div><div class="line">    target_url = <span class="string">‘’</span></div><div class="line">    result = []</div><div class="line"></div><div class="line">    async def start(tabs):</div><div class="line">        await tabs.add()</div><div class="line"></div><div class="line">    async def tab_start(tabs, tab):</div><div class="line">        await tab.Page.enable()</div><div class="line">        await tab.Network.enable()</div><div class="line">        await tab.Page.navigate(url=callbacks.target_url)</div><div class="line"></div><div class="line">    async def network__response_received(tabs, tab, requestId, loaderId, timestamp, <span class="built_in">type</span>, response, <strong>kwargs):</strong></div><div class="line">        <span class="string">‘’</span><span class="string">‘</span></div><div class="line">        print(response.requestHeaders)</div><div class="line">        print(dir(response))</div><div class="line">        more response attribute <a href="https://chromedevtools.github.io/devtools-protocol/tot/Network#type-Response" target="_blank" rel="noopener">https://chromedevtools.github.io/devtools-protocol/tot/Network#type-Response</a></div><div class="line">        ‘<span class="string">‘’</span></div><div class="line">        try:</div><div class="line">            body = tabs.helpers.old_helpers.unpack_response_body(await tab.Network.get_response_body(requestId=requestId))</div><div class="line">        except tabs.FailResponse as e:</div><div class="line">            <span class="built_in">print</span>(<span class="string">‘[Error]’</span>, e)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">print</span>(response.url,response.status,len(body))</div><div class="line">            callbacks.result.append((response.url,response.status,len(body)))</div><div class="line"></div><div class="line">    async def page__frame_stopped_loading(tabs, tab, kwargs):</div><div class="line">        <span class="built_in">print</span>(<span class="string">“[Info]Finish”</span>)</div><div class="line">        tabs.terminate()</div><div class="line"></div><div class="line">    async def any(tabs, tab, callback_name, parameters):</div><div class="line">        pass</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> <strong>name</strong>==<span class="string">“<strong>main</strong>“</span>:</div><div class="line">    callbacks.target_url = <span class="string">“<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;</a></span></div><div class="line">    asyncio.get_event_loop().run_until_complete(chrome_remote_interface.Tabs.run(<span class="string">‘localhost’</span>, 9222, callbacks))</div><div class="line">    <span class="built_in">print</span>(callbacks.result)</div></pre></td></tr></table></figure><p>说明：同样的在运行这段代码前，先运行chrome headless监听程序。</p><p>然后运行该程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python nmask.py</div></pre></td></tr></table></figure><p><img src="/upload_image/20180607/3.png" alt=""></p><p>说明：运行程序，最终得到渲染过程中请求的url、响应码、响应内容长度。</p><h3 id="Chrome-Debugging-Protocol"><a href="#Chrome-Debugging-Protocol" class="headerlink" title="Chrome Debugging Protocol"></a><a href="#Chrome-Debugging-Protocol" title="Chrome Debugging Protocol"></a>Chrome Debugging Protocol</h3><p>　　无论是nodejs版本的chrome-remote-interface还是python版本的，实现的底层都是基于Chrome Debugging Protocol接口，<a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noopener">官方文档</a>，因此在使用chrome-remote-interface过程中，可以查询一下这个文档。比如python版本中network__response_received函数，是封装了Chrome Debugging Protocol接口Network.ResponseReceived函数，而此函数接受的参数，以及一些属性方法等都可以在该文档中查询。</p><h3 id="解决文章开头的问题"><a href="#解决文章开头的问题" class="headerlink" title="解决文章开头的问题"></a><a href="#解决文章开头的问题" title="解决文章开头的问题"></a>解决文章开头的问题</h3><p>　　文章开头还留了一个问题，有哪些即可以实现程序化又可以实现自动化的抓包工具？想想chrome-remote-interface能干啥？其一可以使用nodejs、python（可能还有其他语言封装的项目）编程，底层接口文档比较完善；其二用它来写web2.0爬虫，访问页面产生流量，当然区别web1.0爬虫，这里的流量是完整的流量，相当于人工打开浏览器访问网页；其三可以获取流量，并且进行分析。第一点功能实现了程序化，第二三点功能实现了自动化。<br>　　最后让我们回过头看一下前文提到的自动化测试方案–主动扫描器，其短板就是没法解决web2.0爬虫的困境，而chrome-remote-interface恰恰可以解决，发挥下想象力，其前途应该无限！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;高考加油！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　如果要问有哪些抓包神器或者流量分析工具？以下几款工具是必须要提的，burpsuite（跨平台）、&lt;a href=&quot;https://thief.one/2017/04/27/1/&quot; targe
      
    
    </summary>
    
    
      <category term="爬虫技术" scheme="http://chucz.club/tags/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF/"/>
    
      <category term="chrome_remote_interface" scheme="http://chucz.club/tags/chrome-remote-interface/"/>
    
      <category term="headless chrome" scheme="http://chucz.club/tags/headless-chrome/"/>
    
  </entry>
  
  <entry>
    <title>区块链系列·python实现的区块链</title>
    <link href="http://chucz.club/2018/05/25/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%B3%BB%E5%88%97%C2%B7python%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>http://chucz.club/2018/05/25/区块链系列·python实现的区块链/</id>
    <published>2018-05-25T00:16:48.000Z</published>
    <updated>2018-09-28T08:51:24.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>地是床 天是被 流星是眼泪<br>有时醒 有时醉 大雁飞一个来回<br>　　听说现在会点区块链技术的工资都高破天了，抱着对高工资的幻想，我决定也开始学一学区块链吧。那么我想接触区块链的第一步必须得是去交易平台注册个帐号，然后充点钱买0.00001个BTC了。（2333，~!~现在我穷得只剩下币了）<br><a id="more"></a></p></blockquote><p>　　老实说区块链技术还是有点难理解的，为此我搜了搜区块链的实现代码，想着结合代码看获许会简单一点，于是我发现有人用python实现了简单的区块链，于是再原作者基础上，我稍微修改了点内容，在此粘贴一下，以供学习。原项目地址：<a href="https://github.com/xilibi2003/blockchain" target="_blank" rel="noopener">https://github.com/xilibi2003/blockchain</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! -<em>- coding:utf-8 -</em>-</span></div><div class="line"></div><div class="line"></div><div class="line">import hashlib</div><div class="line">import json</div><div class="line">from time import time</div><div class="line"></div><div class="line"></div><div class="line">class Blockchain(object):</div><div class="line">    <span class="string">‘’</span><span class="string">‘ 区块链 </span></div><div class="line">    </div><div class="line">    一个区块结构（每个区块的字典顺序必须一致）：</div><div class="line"></div><div class="line">    block = &#123;</div><div class="line">        ‘index<span class="string">‘: 1, # 区块索引</span></div><div class="line">        ‘timestamp<span class="string">‘: 1506057125.900785, # 时间戳</span></div><div class="line">        ‘transactions<span class="string">‘: [ # 交易列表</span></div><div class="line">            &#123;</div><div class="line">                ‘sender<span class="string">‘: “8527147fe1f5426f9dd545de4b27ee00”,</span></div><div class="line">                ‘recipient<span class="string">‘: “a77f5cdfa2934df3954a5c7c7da5df1f”,</span></div><div class="line">                ‘amount<span class="string">‘: 5,</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        ‘proof<span class="string">‘: 324984774000, # 工作量证明</span></div><div class="line">        ‘previous_hash<span class="string">‘: “2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824”</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ‘<span class="string">‘’</span></div><div class="line"></div><div class="line">    def <strong>init</strong>(self):</div><div class="line"></div><div class="line">        self.chain = [] <span class="comment"># 区块列表</span></div><div class="line">        self.current_transactions = [] <span class="comment"># 交易列表</span></div><div class="line">        self.nodes = <span class="built_in">set</span>() <span class="comment"># 节点列表(避免重复)</span></div><div class="line"></div><div class="line">        self.new_block(previous_hash=1, proof=100) <span class="comment"># 创造创世区块</span></div><div class="line"></div><div class="line"></div><div class="line">    def register_node(self,address):</div><div class="line">        <span class="string">‘’</span><span class="string">‘ 注册节点 </span></div><div class="line"></div><div class="line">        Add a new node to the list of nodes</div><div class="line">        :param address: &lt;str&gt; 节点地址 ‘192.168.0.1:5000<span class="string">‘</span></div><div class="line">        :return: None</div><div class="line"></div><div class="line">        ‘<span class="string">‘’</span></div><div class="line"></div><div class="line">        self.nodes.add(address)</div><div class="line"></div><div class="line">    def valid_chain(self,chain):</div><div class="line">        <span class="string">‘’</span><span class="string">‘ 验证区块链的有效性 </span></div><div class="line"></div><div class="line">        :param chain: &lt;list&gt; 一个完整的区块链</div><div class="line">        :return: &lt;bool&gt; True if valid, False if not</div><div class="line"></div><div class="line">        ‘<span class="string">‘’</span></div><div class="line"></div><div class="line">        previous_block = chain[0] <span class="comment"># 前一个区块</span></div><div class="line">        current_index = 1 <span class="comment"># 当前区块索引</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> current_index &lt; len(chain):</div><div class="line">            block = chain[current_index] <span class="comment"># 当前区块</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> block[<span class="string">‘previous_hash’</span>] != self.hash(previous_block):</div><div class="line">                <span class="string">‘’</span><span class="string">‘ hash值验证 ‘</span><span class="string">‘’</span></div><div class="line">                <span class="built_in">return</span> False</div><div class="line"></div><div class="line">            <span class="keyword">if</span> not self.valid_proof(previous_block[<span class="string">‘proof’</span>],block[<span class="string">‘proof’</span>]):</div><div class="line">                <span class="string">‘’</span><span class="string">‘ 工作量证明验证 ‘</span><span class="string">‘’</span></div><div class="line">                <span class="built_in">return</span> False</div><div class="line"></div><div class="line">            previous_block = block</div><div class="line">            current_index += 1</div><div class="line"></div><div class="line">        <span class="built_in">return</span> True</div><div class="line"></div><div class="line">    def resolve_conflicts(self):</div><div class="line">        <span class="string">‘’</span><span class="string">‘ 共识算法解决不同节点账本不相同的冲突 </span></div><div class="line"></div><div class="line">        使用网络中最长的有效区块链</div><div class="line">        :return: &lt;bool&gt; True 如果链被取代, 否则为False</div><div class="line">        ‘<span class="string">‘’</span></div><div class="line"></div><div class="line">        neighbours = self.nodes <span class="comment"># 网络中所有节点列表</span></div><div class="line">        new_chain = None</div><div class="line"></div><div class="line">        max_length = len(self.chain) <span class="comment"># 当前节点的区块链长度</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> neighbours: <span class="comment"># 遍历所有网络节点，若有比本节点有效区块链长的，则替换掉本地区块链</span></div><div class="line">            </div><div class="line">            <span class="comment"># 通过api获取</span></div><div class="line">            length = 100 <span class="comment"># 某节点区块链长度</span></div><div class="line">            chain = [] <span class="comment"># 某节点区块链列表</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> length &gt; max_length and self.valid_chain(chain):</div><div class="line">                max_length = length</div><div class="line">                new_chain = chain</div><div class="line"></div><div class="line">        <span class="keyword">if</span> new_chain:</div><div class="line">            self.chain = new_chain</div><div class="line">            <span class="built_in">return</span> True</div><div class="line"></div><div class="line">        <span class="built_in">return</span> False</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    def new_block(self,proof,previous_hash=None):</div><div class="line">        <span class="string">‘’</span><span class="string">‘ 创建新的区块，添加到区块链中 </span></div><div class="line">        </div><div class="line">        生成新块</div><div class="line">        :param proof: &lt;int&gt; 工作量证明</div><div class="line">        :param previous_hash: 前一个区块的hash值</div><div class="line">        :return: &lt;dict&gt; 新区块</div><div class="line"></div><div class="line">        ‘<span class="string">‘’</span></div><div class="line"></div><div class="line">        block = &#123;</div><div class="line"></div><div class="line">            <span class="string">‘index’</span>: len(self.chain) + 1, <span class="comment"># 确保索引在区块链尾部</span></div><div class="line">            <span class="string">‘timestamp’</span>: time(),</div><div class="line">            <span class="string">‘transactions’</span>: self.current_transactions, <span class="comment"># 交易列表</span></div><div class="line">            <span class="string">‘proof’</span>: proof, <span class="comment"># 工作量证明</span></div><div class="line">            <span class="string">‘previous_hash’</span>: previous_hash or self.hash(self.chain[-1]), <span class="comment"># 此区块前一个区块的hash</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># 对交易的详细内容可以进行操作，比如说增加金币，或者减少金币等等。</span></div><div class="line"></div><div class="line">        self.current_transactions = [] <span class="comment"># 重置交易列表</span></div><div class="line"></div><div class="line">        self.chain.append(block) <span class="comment"># 将新的区块添加到区块链中</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> block</div><div class="line"></div><div class="line"></div><div class="line">    def new_transactions(self,sender,recipient,amount):</div><div class="line">        <span class="string">‘’</span><span class="string">‘ 添加新的交易到交易列表中 </span></div><div class="line"></div><div class="line">        生成新交易信息，信息将加入到下一个待挖的区块中</div><div class="line">        :param sender: &lt;str&gt; 发送者地址</div><div class="line">        :param recipient: &lt;str&gt; 接收着地址</div><div class="line">        :param amount: &lt;int&gt; 金额或者数量</div><div class="line">        :return: &lt;int&gt; 返回这笔交易的区块链索引（将这笔交易添加到区块链最后面）</div><div class="line"></div><div class="line">        ‘<span class="string">‘’</span></div><div class="line"></div><div class="line">        self.current_transactions.append(&#123;</div><div class="line"></div><div class="line">            <span class="string">“sender”</span>:sender,</div><div class="line">            <span class="string">‘recipient’</span>:recipient,</div><div class="line">            <span class="string">‘amount’</span>:amount,</div><div class="line"></div><div class="line">            &#125;)</div><div class="line"></div><div class="line">        <span class="built_in">return</span> self.last_block[<span class="string">‘index’</span>] + 1</div><div class="line">        </div><div class="line">    @staticmethod</div><div class="line">    def <span class="built_in">hash</span>(block):</div><div class="line">        <span class="string">‘’</span><span class="string">‘ 计算一个区块的hash值 </span></div><div class="line">        </div><div class="line">        生成块的 SHA-256 hash值</div><div class="line">        :param block: &lt;dict&gt; Block</div><div class="line">        :return: &lt;str&gt;</div><div class="line"></div><div class="line">        ‘<span class="string">‘’</span></div><div class="line">        </div><div class="line">        block_string = json.dumps(block, sort_keys=True).encode()</div><div class="line">        <span class="built_in">return</span> hashlib.sha256(block_string).hexdigest()</div><div class="line"></div><div class="line">    @property</div><div class="line">    def last_block(self):</div><div class="line">        <span class="string">‘’</span><span class="string">‘ 区块链中最后一个区块 ‘</span><span class="string">‘’</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> self.chain[-1] <span class="comment"># 返回区块链中最后一个区块</span></div><div class="line"></div><div class="line"></div><div class="line">    def proof_of_work(self, last_proof):</div><div class="line">        <span class="string">‘’</span><span class="string">‘</span></div><div class="line">        简单的工作量证明:</div><div class="line">         - 查找一个 p’ 使得 <span class="built_in">hash</span>(pp<span class="string">‘) 以4个0开头</span></div><div class="line">         - p 是上一个块的证明,  p’ 是当前的证明</div><div class="line">        :param last_proof: &lt;int&gt;</div><div class="line">        :<span class="built_in">return</span>: &lt;int&gt;</div><div class="line">        <span class="string">‘’</span><span class="string">‘</span></div><div class="line"></div><div class="line">        proof = 0</div><div class="line">        while self.valid_proof(last_proof, proof) is False:</div><div class="line">            proof += 1</div><div class="line"></div><div class="line">        return proof</div><div class="line"></div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def valid_proof(last_proof,proof):</div><div class="line">        ‘<span class="string">‘’</span></div><div class="line">        验证证明: 是否<span class="built_in">hash</span>(last_proof, proof)以4个0开头?</div><div class="line">        :param last_proof: &lt;int&gt; 前一个区块的<span class="built_in">hash</span></div><div class="line">        :param proof: &lt;int&gt; 当前区块的<span class="built_in">hash</span></div><div class="line">        :<span class="built_in">return</span>: &lt;bool&gt; True or False</div><div class="line">        <span class="string">‘’</span><span class="string">‘</span></div><div class="line"></div><div class="line">        guess = (str(last_proof)+str(proof)).encode()</div><div class="line">        guess_hash = hashlib.sha256(guess).hexdigest()</div><div class="line"></div><div class="line">        return guess_hash[:4] == “0000”</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">if <strong>name</strong>==”<strong>main</strong>“:</div><div class="line"></div><div class="line">    # 运行这一段脚本就是一个区块链节点，而节点之间可以通过api的方式互相传递信息</div><div class="line"></div><div class="line">    # 每个节点都每隔10分钟运行一次</div><div class="line"></div><div class="line">    blockchain = Blockchain()</div><div class="line"></div><div class="line">    for i in range(2):</div><div class="line"></div><div class="line">        # 同步一下区块</div><div class="line"></div><div class="line">        # 开始挖矿</div><div class="line">        last_block = blockchain.last_block</div><div class="line">        last_proof = last_block[‘proof<span class="string">‘]</span></div><div class="line">        proof = blockchain.proof_of_work(last_proof) </div><div class="line"></div><div class="line">        # 挖矿成功后，生成新的交易（奖励交易）</div><div class="line">        blockchain.new_transactions(sender=”0”,recipient=”000002”,amount=1)</div><div class="line"></div><div class="line">        # 添加新的交易(不是奖励交易，而是普通交易)</div><div class="line">        blockchain.new_transactions(sender=”0000001”,recipient=”000002”,amount=1)</div><div class="line"></div><div class="line">        # 输出当前交易列表</div><div class="line">        print “current_transactions lists is: \n”,blockchain.current_transactions</div><div class="line"></div><div class="line">        # 挖矿成功后，生成新的区块（包含奖励交易信息、新增的交易信息），只有挖矿成功后，才能创造出新的区块。</div><div class="line">        block = blockchain.new_block(proof)</div><div class="line"></div><div class="line">        # 输出当前区块链</div><div class="line">        print “current chain lists is: \n”,blockchain.chain</div></pre></td></tr></table></figure><p><code>从本篇开始，我将继续学习一些区块链的技术以及区块链安全相关的技术，并会总结成系列文章在博客发布，技术有限请多包涵！</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;地是床 天是被 流星是眼泪&lt;br&gt;有时醒 有时醉 大雁飞一个来回&lt;br&gt;　　听说现在会点区块链技术的工资都高破天了，抱着对高工资的幻想，我决定也开始学一学区块链吧。那么我想接触区块链的第一步必须得是去交易平台注册个帐号，然后充点钱买0.00001个
      
    
    </summary>
    
    
      <category term="区块链安全" scheme="http://chucz.club/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8/"/>
    
      <category term="区块链" scheme="http://chucz.club/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
</feed>
